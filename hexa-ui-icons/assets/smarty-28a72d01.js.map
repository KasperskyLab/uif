{"version":3,"file":"smarty-28a72d01.js","sources":["../../../node_modules/refractor/lang/smarty.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = smarty\nsmarty.displayName = 'smarty'\nsmarty.aliases = []\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  /* TODO\nAdd support for variables inside double quoted strings\nAdd support for {php}\n*/\n  ;(function(Prism) {\n    Prism.languages.smarty = {\n      comment: /\\{\\*[\\s\\S]*?\\*\\}/,\n      delimiter: {\n        pattern: /^\\{|\\}$/i,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [\n        /\\$(?!\\d)\\w+/,\n        /#(?!\\d)\\w+#/,\n        {\n          pattern: /(\\.|->)(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n          lookbehind: true\n        }\n      ],\n      function: [\n        {\n          pattern: /(\\|\\s*)@?(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        /^\\/?(?!\\d)\\w+/,\n        /(?!\\d)\\w+(?=\\()/\n      ],\n      'attr-name': {\n        // Value is made optional because it may have already been tokenized\n        pattern: /\\w+\\s*=\\s*(?:(?!\\d)\\w+)?/,\n        inside: {\n          variable: {\n            pattern: /(=\\s*)(?!\\d)\\w+/,\n            lookbehind: true\n          },\n          operator: /=/\n        }\n      },\n      punctuation: [/[\\[\\]().,:`]|->/],\n      operator: [\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n        /\\b(?:eq|neq?|gt|lt|gt?e|lt?e|not|mod|or|and)\\b/\n      ],\n      keyword: /\\b(?:false|off|on|no|true|yes)\\b/\n    } // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function(env) {\n      var smartyPattern = /\\{\\*[\\s\\S]*?\\*\\}|\\{[\\s\\S]+?\\}/g\n      var smartyLitteralStart = '{literal}'\n      var smartyLitteralEnd = '{/literal}'\n      var smartyLitteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'smarty',\n        smartyPattern,\n        function(match) {\n          // Smarty tags inside {literal} block are ignored\n          if (match === smartyLitteralEnd) {\n            smartyLitteralMode = false\n          }\n          if (!smartyLitteralMode) {\n            if (match === smartyLitteralStart) {\n              smartyLitteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\n    })\n  })(Prism)\n}\n"],"names":["refractorMarkupTemplating","require$$0","smarty_1","smarty","Prism","env","smartyPattern","smartyLitteralStart","smartyLitteralEnd","smartyLitteralMode","match"],"mappings":"oeACA,IAAIA,EAA4BC,EAAiC,EACjEC,EAAiBC,EACjBA,EAAO,YAAc,SACrBA,EAAO,QAAU,CAAE,EACnB,SAASA,EAAOC,EAAO,CACrBA,EAAM,SAASJ,CAAyB,EAKtC,SAASI,EAAO,CAChBA,EAAM,UAAU,OAAS,CACvB,QAAS,mBACT,UAAW,CACT,QAAS,WACT,MAAO,aACR,EACD,OAAQ,mCACR,OAAQ,2DACR,SAAU,CACR,cACA,cACA,CACE,QAAS,mBACT,WAAY,EACb,EACD,CACE,QAAS,sBACT,WAAY,EACb,CACF,EACD,SAAU,CACR,CACE,QAAS,qBACT,WAAY,EACb,EACD,gBACA,iBACD,EACD,YAAa,CAEX,QAAS,2BACT,OAAQ,CACN,SAAU,CACR,QAAS,kBACT,WAAY,EACb,EACD,SAAU,GACX,CACF,EACD,YAAa,CAAC,iBAAiB,EAC/B,SAAU,CACR,mCACA,iDACA,gDACD,EACD,QAAS,kCACV,EACDA,EAAM,MAAM,IAAI,kBAAmB,SAASC,EAAK,CAC/C,IAAIC,EAAgB,iCAChBC,EAAsB,YACtBC,EAAoB,aACpBC,EAAqB,GACzBL,EAAM,UAAU,mBAAmB,EAAE,kBACnCC,EACA,SACAC,EACA,SAASI,EAAO,CAKd,OAHIA,IAAUF,IACZC,EAAqB,IAElBA,EAME,IALDC,IAAUH,IACZE,EAAqB,IAEhB,GAGV,CACF,CACP,CAAK,EACDL,EAAM,MAAM,IAAI,iBAAkB,SAASC,EAAK,CAC9CD,EAAM,UAAU,mBAAmB,EAAE,qBAAqBC,EAAK,QAAQ,CAC7E,CAAK,CACF,EAAED,CAAK,CACV","x_google_ignoreList":[0]}