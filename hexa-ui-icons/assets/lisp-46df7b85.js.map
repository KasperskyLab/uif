{"version":3,"file":"lisp-46df7b85.js","sources":["../../../node_modules/refractor/lang/lisp.js"],"sourcesContent":["'use strict'\n\nmodule.exports = lisp\nlisp.displayName = 'lisp'\nlisp.aliases = []\nfunction lisp(Prism) {\n  ;(function(Prism) {\n    // Functions to construct regular expressions\n    // simple form\n    // e.g. (interactive ... or (interactive)\n    function simple_form(name) {\n      return RegExp('(\\\\()' + name + '(?=[\\\\s\\\\)])')\n    } // booleans and numbers\n    function primitive(pattern) {\n      return RegExp('([\\\\s([])' + pattern + '(?=[\\\\s)])')\n    } // Patterns in regular expressions\n    // Symbol name. See https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Type.html\n    // & and : are excluded as they are usually used for special purposes\n    var symbol = '[-+*/_~!@$%^=<>{}\\\\w]+' // symbol starting with & used in function arguments\n    var marker = '&' + symbol // Open parenthesis for look-behind\n    var par = '(\\\\()'\n    var endpar = '(?=\\\\))' // End the pattern with look-ahead space\n    var space = '(?=\\\\s)'\n    var language = {\n      // Three or four semicolons are considered a heading.\n      // See https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html\n      heading: {\n        pattern: /;;;.*/,\n        alias: ['comment', 'title']\n      },\n      comment: /;.*/,\n      string: {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        greedy: true,\n        inside: {\n          argument: /[-A-Z]+(?=[.,\\s])/,\n          symbol: RegExp('`' + symbol + \"'\")\n        }\n      },\n      'quoted-symbol': {\n        pattern: RegExp(\"#?'\" + symbol),\n        alias: ['variable', 'symbol']\n      },\n      'lisp-property': {\n        pattern: RegExp(':' + symbol),\n        alias: 'property'\n      },\n      splice: {\n        pattern: RegExp(',@?' + symbol),\n        alias: ['symbol', 'variable']\n      },\n      keyword: [\n        {\n          pattern: RegExp(\n            par +\n              '(?:(?:lexical-)?let\\\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)' +\n              space\n          ),\n          lookbehind: true\n        },\n        {\n          pattern: RegExp(\n            par +\n              '(?:for|do|collect|return|finally|append|concat|in|by)' +\n              space\n          ),\n          lookbehind: true\n        }\n      ],\n      declare: {\n        pattern: simple_form('declare'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      interactive: {\n        pattern: simple_form('interactive'),\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      boolean: {\n        pattern: primitive('(?:t|nil)'),\n        lookbehind: true\n      },\n      number: {\n        pattern: primitive('[-+]?\\\\d+(?:\\\\.\\\\d*)?'),\n        lookbehind: true\n      },\n      defvar: {\n        pattern: RegExp(par + 'def(?:var|const|custom|group)\\\\s+' + symbol),\n        lookbehind: true,\n        inside: {\n          keyword: /^def[a-z]+/,\n          variable: RegExp(symbol)\n        }\n      },\n      defun: {\n        pattern: RegExp(\n          par +\n            '(?:cl-)?(?:defun\\\\*?|defmacro)\\\\s+' +\n            symbol +\n            '\\\\s+\\\\([\\\\s\\\\S]*?\\\\)'\n        ),\n        lookbehind: true,\n        inside: {\n          keyword: /^(?:cl-)?def\\S+/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          function: {\n            pattern: RegExp('(^\\\\s)' + symbol),\n            lookbehind: true\n          },\n          punctuation: /[()]/\n        }\n      },\n      lambda: {\n        pattern: RegExp(par + 'lambda\\\\s+\\\\((?:&?' + symbol + '\\\\s*)*\\\\)'),\n        lookbehind: true,\n        inside: {\n          keyword: /^lambda/,\n          // See below, this property needs to be defined later so that it can\n          // reference the language object.\n          arguments: null,\n          punctuation: /[()]/\n        }\n      },\n      car: {\n        pattern: RegExp(par + symbol),\n        lookbehind: true\n      },\n      punctuation: [\n        // open paren, brackets, and close paren\n        /(['`,]?\\(|[)\\[\\]])/, // cons\n        {\n          pattern: /(\\s)\\.(?=\\s)/,\n          lookbehind: true\n        }\n      ]\n    }\n    var arg = {\n      'lisp-marker': RegExp(marker),\n      rest: {\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        varform: {\n          pattern: RegExp(par + symbol + '\\\\s+\\\\S[\\\\s\\\\S]*' + endpar),\n          lookbehind: true,\n          inside: {\n            string: language.string,\n            boolean: language.boolean,\n            number: language.number,\n            symbol: language.symbol,\n            punctuation: /[()]/\n          }\n        }\n      }\n    }\n    var forms = '\\\\S+(?:\\\\s+\\\\S+)*'\n    var arglist = {\n      pattern: RegExp(par + '[\\\\s\\\\S]*' + endpar),\n      lookbehind: true,\n      inside: {\n        'rest-vars': {\n          pattern: RegExp('&(?:rest|body)\\\\s+' + forms),\n          inside: arg\n        },\n        'other-marker-vars': {\n          pattern: RegExp('&(?:optional|aux)\\\\s+' + forms),\n          inside: arg\n        },\n        keys: {\n          pattern: RegExp('&key\\\\s+' + forms + '(?:\\\\s+&allow-other-keys)?'),\n          inside: arg\n        },\n        argument: {\n          pattern: RegExp(symbol),\n          alias: 'variable'\n        },\n        punctuation: /[()]/\n      }\n    }\n    language['lambda'].inside.arguments = arglist\n    language['defun'].inside.arguments = Prism.util.clone(arglist)\n    language['defun'].inside.arguments.inside.sublist = arglist\n    Prism.languages.lisp = language\n    Prism.languages.elisp = language\n    Prism.languages.emacs = language\n    Prism.languages['emacs-lisp'] = language\n  })(Prism)\n}\n"],"names":["lisp_1","lisp","Prism","simple_form","name","primitive","pattern","symbol","marker","par","endpar","space","language","arg","forms","arglist"],"mappings":"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","x_google_ignoreList":[0]}