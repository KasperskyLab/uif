{"version":3,"file":"ruby-89b11700.js","sources":["../../../node_modules/refractor/lang/ruby.js"],"sourcesContent":["'use strict'\n\nmodule.exports = ruby\nruby.displayName = 'ruby'\nruby.aliases = ['rb']\nfunction ruby(Prism) {\n  /**\n   * Original by Samuel Flores\n   *\n   * Adds the following new token classes:\n   *      constant, builtin, variable, symbol, regex\n   */\n  ;(function(Prism) {\n    Prism.languages.ruby = Prism.languages.extend('clike', {\n      comment: [\n        /#.*/,\n        {\n          pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n          greedy: true\n        }\n      ],\n      keyword: /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|false|for|if|in|module|new|next|nil|not|or|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|true|undef|unless|until|when|while|yield)\\b/\n    })\n    var interpolation = {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        delimiter: {\n          pattern: /^#\\{|\\}$/,\n          alias: 'tag'\n        },\n        rest: Prism.languages.ruby\n      }\n    }\n    delete Prism.languages.ruby.function\n    Prism.languages.insertBefore('ruby', 'keyword', {\n      regex: [\n        {\n          pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          // Here we need to specifically allow interpolation\n          pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n          greedy: true,\n          inside: {\n            interpolation: interpolation\n          }\n        },\n        {\n          pattern: /(^|[^/])\\/(?!\\/)(\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*($|[\\r\\n,.;})]))/,\n          lookbehind: true,\n          greedy: true\n        }\n      ],\n      variable: /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      symbol: {\n        pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n        lookbehind: true\n      },\n      'method-definition': {\n        pattern: /(\\bdef\\s+)[\\w.]+/,\n        lookbehind: true,\n        inside: {\n          function: /\\w+$/,\n          rest: Prism.languages.ruby\n        }\n      }\n    })\n    Prism.languages.insertBefore('ruby', 'number', {\n      builtin: /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n      constant: /\\b[A-Z]\\w*(?:[?!]|\\b)/\n    })\n    Prism.languages.ruby.string = [\n      {\n        pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        // Here we need to specifically allow interpolation\n        pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      },\n      {\n        pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: true,\n        inside: {\n          interpolation: interpolation\n        }\n      }\n    ]\n    Prism.languages.rb = Prism.languages.ruby\n  })(Prism)\n}\n"],"names":["ruby_1","ruby","Prism","interpolation"],"mappings":"uCAEAA,EAAiBC,EACjBA,EAAK,YAAc,OACnBA,EAAK,QAAU,CAAC,IAAI,EACpB,SAASA,EAAKC,EAAO,EAOjB,SAASA,EAAO,CAChBA,EAAM,UAAU,KAAOA,EAAM,UAAU,OAAO,QAAS,CACrD,QAAS,CACP,MACA,CACE,QAAS,0BACT,OAAQ,EACT,CACF,EACD,QAAS,sRACf,CAAK,EACD,IAAIC,EAAgB,CAClB,QAAS,aACT,OAAQ,CACN,UAAW,CACT,QAAS,WACT,MAAO,KACR,EACD,KAAMD,EAAM,UAAU,IACvB,CACF,EACD,OAAOA,EAAM,UAAU,KAAK,SAC5BA,EAAM,UAAU,aAAa,OAAQ,UAAW,CAC9C,MAAO,CACL,CACE,QAAS,+DACT,OAAQ,GACR,OAAQ,CACN,cAAeC,CAChB,CACF,EACD,CACE,QAAS,wCACT,OAAQ,GACR,OAAQ,CACN,cAAeA,CAChB,CACF,EACD,CAEE,QAAS,yDACT,OAAQ,GACR,OAAQ,CACN,cAAeA,CAChB,CACF,EACD,CACE,QAAS,0CACT,OAAQ,GACR,OAAQ,CACN,cAAeA,CAChB,CACF,EACD,CACE,QAAS,sCACT,OAAQ,GACR,OAAQ,CACN,cAAeA,CAChB,CACF,EACD,CACE,QAAS,6EACT,WAAY,GACZ,OAAQ,EACT,CACF,EACD,SAAU,+BACV,OAAQ,CACN,QAAS,mCACT,WAAY,EACb,EACD,oBAAqB,CACnB,QAAS,mBACT,WAAY,GACZ,OAAQ,CACN,SAAU,OACV,KAAMD,EAAM,UAAU,IACvB,CACF,CACP,CAAK,EACDA,EAAM,UAAU,aAAa,OAAQ,SAAU,CAC7C,QAAS,+OACT,SAAU,uBAChB,CAAK,EACDA,EAAM,UAAU,KAAK,OAAS,CAC5B,CACE,QAAS,+DACT,OAAQ,GACR,OAAQ,CACN,cAAeC,CAChB,CACF,EACD,CACE,QAAS,wCACT,OAAQ,GACR,OAAQ,CACN,cAAeA,CAChB,CACF,EACD,CAEE,QAAS,yDACT,OAAQ,GACR,OAAQ,CACN,cAAeA,CAChB,CACF,EACD,CACE,QAAS,0CACT,OAAQ,GACR,OAAQ,CACN,cAAeA,CAChB,CACF,EACD,CACE,QAAS,sCACT,OAAQ,GACR,OAAQ,CACN,cAAeA,CAChB,CACF,EACD,CACE,QAAS,2DACT,OAAQ,GACR,OAAQ,CACN,cAAeA,CAChB,CACF,CACF,EACDD,EAAM,UAAU,GAAKA,EAAM,UAAU,IACtC,GAAEA,CAAK,CACV","x_google_ignoreList":[0]}