{"version":3,"file":"erlang-1fe3ed5d.js","sources":["../../../node_modules/refractor/lang/erlang.js"],"sourcesContent":["'use strict'\n\nmodule.exports = erlang\nerlang.displayName = 'erlang'\nerlang.aliases = []\nfunction erlang(Prism) {\n  Prism.languages.erlang = {\n    comment: /%.+/,\n    string: {\n      pattern: /\"(?:\\\\.|[^\\\\\"\\r\\n])*\"/,\n      greedy: true\n    },\n    'quoted-function': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'(?=\\()/,\n      alias: 'function'\n    },\n    'quoted-atom': {\n      pattern: /'(?:\\\\.|[^\\\\'\\r\\n])+'/,\n      alias: 'atom'\n    },\n    boolean: /\\b(?:true|false)\\b/,\n    keyword: /\\b(?:fun|when|case|of|end|if|receive|after|try|catch)\\b/,\n    number: [\n      /\\$\\\\?./,\n      /\\d+#[a-z0-9]+/i,\n      /(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i\n    ],\n    function: /\\b[a-z][\\w@]*(?=\\()/,\n    variable: {\n      // Look-behind is used to prevent wrong highlighting of atoms containing \"@\"\n      pattern: /(^|[^@])(?:\\b|\\?)[A-Z_][\\w@]*/,\n      lookbehind: true\n    },\n    operator: [\n      /[=\\/<>:]=|=[:\\/]=|\\+\\+?|--?|[=*\\/!]|\\b(?:bnot|div|rem|band|bor|bxor|bsl|bsr|not|and|or|xor|orelse|andalso)\\b/,\n      {\n        // We don't want to match <<\n        pattern: /(^|[^<])<(?!<)/,\n        lookbehind: true\n      },\n      {\n        // We don't want to match >>\n        pattern: /(^|[^>])>(?!>)/,\n        lookbehind: true\n      }\n    ],\n    atom: /\\b[a-z][\\w@]*/,\n    punctuation: /[()[\\]{}:;,.#|]|<<|>>/\n  }\n}\n"],"names":["erlang_1","erlang","Prism"],"mappings":"gbAEAA,EAAiBC,EACjBA,EAAO,YAAc,SACrBA,EAAO,QAAU,CAAE,EACnB,SAASA,EAAOC,EAAO,CACrBA,EAAM,UAAU,OAAS,CACvB,QAAS,MACT,OAAQ,CACN,QAAS,wBACT,OAAQ,EACT,EACD,kBAAmB,CACjB,QAAS,8BACT,MAAO,UACR,EACD,cAAe,CACb,QAAS,wBACT,MAAO,MACR,EACD,QAAS,qBACT,QAAS,0DACT,OAAQ,CACN,SACA,iBACA,wCACD,EACD,SAAU,sBACV,SAAU,CAER,QAAS,gCACT,WAAY,EACb,EACD,SAAU,CACR,+GACA,CAEE,QAAS,iBACT,WAAY,EACb,EACD,CAEE,QAAS,iBACT,WAAY,EACb,CACF,EACD,KAAM,gBACN,YAAa,uBACd,CACH","x_google_ignoreList":[0]}