{"version":3,"file":"xquery-7a41911f.js","sources":["../../../node_modules/refractor/lang/xquery.js"],"sourcesContent":["'use strict'\n\nmodule.exports = xquery\nxquery.displayName = 'xquery'\nxquery.aliases = []\nfunction xquery(Prism) {\n  ;(function(Prism) {\n    Prism.languages.xquery = Prism.languages.extend('markup', {\n      'xquery-comment': {\n        pattern: /\\(:[\\s\\S]*?:\\)/,\n        greedy: true,\n        alias: 'comment'\n      },\n      string: {\n        pattern: /([\"'])(?:\\1\\1|(?!\\1)[\\s\\S])*\\1/,\n        greedy: true\n      },\n      extension: {\n        pattern: /\\(#.+?#\\)/,\n        alias: 'symbol'\n      },\n      variable: /\\$[\\w-:]+/,\n      axis: {\n        pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      'keyword-operator': {\n        pattern: /(^|[^:-])\\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\\b(?=$|[^:-])/,\n        lookbehind: true,\n        alias: 'operator'\n      },\n      keyword: {\n        pattern: /(^|[^:-])\\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      function: /[\\w-]+(?::[\\w-]+)*(?=\\s*\\()/,\n      'xquery-element': {\n        pattern: /(element\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'tag'\n      },\n      'xquery-attribute': {\n        pattern: /(attribute\\s+)[\\w-]+(?::[\\w-]+)*/,\n        lookbehind: true,\n        alias: 'attr-name'\n      },\n      builtin: {\n        pattern: /(^|[^:-])\\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|ENTITIES|ENTITY|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|ID|IDREFS?|int|integer|language|long|Name|NCName|negativeInteger|NMTOKENS?|nonNegativeInteger|nonPositiveInteger|normalizedString|NOTATION|positiveInteger|QName|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\\b(?=$|[^:-])/,\n        lookbehind: true\n      },\n      number: /\\b\\d+(?:\\.\\d+)?(?:E[+-]?\\d+)?/,\n      operator: [\n        /[+*=?|@]|\\.\\.?|:=|!=|<[=<]?|>[=>]?/,\n        {\n          pattern: /(\\s)-(?=\\s)/,\n          lookbehind: true\n        }\n      ],\n      punctuation: /[[\\](){},;:/]/\n    })\n    Prism.languages.xquery.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+))?)*\\s*\\/?>/i\n    Prism.languages.xquery['tag'].inside[\n      'attr-value'\n    ].pattern = /=(?:(\"|')(?:\\\\[\\s\\S]|{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}|(?!\\1)[^\\\\])*\\1|[^\\s'\">=]+)/i\n    Prism.languages.xquery['tag'].inside['attr-value'].inside[\n      'punctuation'\n    ] = /^=\"|\"$/\n    Prism.languages.xquery['tag'].inside['attr-value'].inside['expression'] = {\n      // Allow for two levels of nesting\n      pattern: /{(?!{)(?:{(?:{[^}]*}|[^}])*}|[^}])+}/,\n      inside: {\n        rest: Prism.languages.xquery\n      },\n      alias: 'language-xquery'\n    } // The following will handle plain text inside tags\n    var stringifyToken = function(token) {\n      if (typeof token === 'string') {\n        return token\n      }\n      if (typeof token.content === 'string') {\n        return token.content\n      }\n      return token.content.map(stringifyToken).join('')\n    }\n    var walkTokens = function(tokens) {\n      var openedTags = []\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i]\n        var notTagNorBrace = false\n        if (typeof token !== 'string') {\n          if (\n            token.type === 'tag' &&\n            token.content[0] &&\n            token.content[0].type === 'tag'\n          ) {\n            // We found a tag, now find its kind\n            if (token.content[0].content[0].content === '</') {\n              // Closing tag\n              if (\n                openedTags.length > 0 &&\n                openedTags[openedTags.length - 1].tagName ===\n                  stringifyToken(token.content[0].content[1])\n              ) {\n                // Pop matching opening tag\n                openedTags.pop()\n              }\n            } else {\n              if (token.content[token.content.length - 1].content === '/>') {\n                // Autoclosed tag, ignore\n              } else {\n                // Opening tag\n                openedTags.push({\n                  tagName: stringifyToken(token.content[0].content[1]),\n                  openedBraces: 0\n                })\n              }\n            }\n          } else if (\n            openedTags.length > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '{' && // Ignore `{{`\n            (!tokens[i + 1] ||\n              tokens[i + 1].type !== 'punctuation' ||\n              tokens[i + 1].content !== '{') &&\n            (!tokens[i - 1] ||\n              tokens[i - 1].type !== 'plain-text' ||\n              tokens[i - 1].content !== '{')\n          ) {\n            // Here we might have entered an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces++\n          } else if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces > 0 &&\n            token.type === 'punctuation' &&\n            token.content === '}'\n          ) {\n            // Here we might have left an XQuery expression inside a tag\n            openedTags[openedTags.length - 1].openedBraces--\n          } else if (token.type !== 'comment') {\n            notTagNorBrace = true\n          }\n        }\n        if (notTagNorBrace || typeof token === 'string') {\n          if (\n            openedTags.length > 0 &&\n            openedTags[openedTags.length - 1].openedBraces === 0\n          ) {\n            // Here we are inside a tag, and not inside an XQuery expression.\n            // That's plain text: drop any tokens matched.\n            var plainText = stringifyToken(token) // And merge text with adjacent text\n            if (\n              i < tokens.length - 1 &&\n              (typeof tokens[i + 1] === 'string' ||\n                tokens[i + 1].type === 'plain-text')\n            ) {\n              plainText += stringifyToken(tokens[i + 1])\n              tokens.splice(i + 1, 1)\n            }\n            if (\n              i > 0 &&\n              (typeof tokens[i - 1] === 'string' ||\n                tokens[i - 1].type === 'plain-text')\n            ) {\n              plainText = stringifyToken(tokens[i - 1]) + plainText\n              tokens.splice(i - 1, 1)\n              i--\n            }\n            if (/^\\s+$/.test(plainText)) {\n              tokens[i] = plainText\n            } else {\n              tokens[i] = new Prism.Token(\n                'plain-text',\n                plainText,\n                null,\n                plainText\n              )\n            }\n          }\n        }\n        if (token.content && typeof token.content !== 'string') {\n          walkTokens(token.content)\n        }\n      }\n    }\n    Prism.hooks.add('after-tokenize', function(env) {\n      if (env.language !== 'xquery') {\n        return\n      }\n      walkTokens(env.tokens)\n    })\n  })(Prism)\n}\n"],"names":["xquery_1","xquery","Prism","stringifyToken","token","walkTokens","tokens","openedTags","i","notTagNorBrace","plainText","env"],"mappings":"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","x_google_ignoreList":[0]}