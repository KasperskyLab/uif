"use strict";(self.webpackChunk_kaspersky_components=self.webpackChunk_kaspersky_components||[]).push([[9530],{"./helpers/hocs/MetaComponent/MetaDod.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.MetaDod=void 0;var _react=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_styledComponents=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js")),_blocks=__webpack_require__("./node_modules/@storybook/blocks/dist/index.js"),_types=__webpack_require__("./helpers/hocs/MetaComponent/types.ts"),_tag=__webpack_require__("./src/tag/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}const StyledTableContainer=_styledComponents.default.div.withConfig({displayName:"MetaDod__StyledTableContainer",componentId:"sc-1gxe50k-0"})(["&&&&&{width:300px;td,th,tr{background:transparent;border:none;}}"]),MetaDod=_ref=>{let{list}=_ref;const metaDodKeys=(0,_react.useMemo)((()=>Object.keys(_types.metaDod)),[]);return(0,_jsxRuntime.jsxs)(_jsxRuntime.Fragment,{children:[(0,_jsxRuntime.jsx)(_blocks.Subtitle,{children:`Definition of done ${(new Date).getDate()}.${(new Date).getMonth()}.${(new Date).getFullYear()}`}),(0,_jsxRuntime.jsx)(StyledTableContainer,{children:(0,_jsxRuntime.jsxs)("table",{children:[(0,_jsxRuntime.jsx)("thead",{children:(0,_jsxRuntime.jsxs)("tr",{children:[(0,_jsxRuntime.jsx)("td",{children:(0,_jsxRuntime.jsx)("b",{children:"Point"})}),(0,_jsxRuntime.jsx)("td",{children:(0,_jsxRuntime.jsx)("b",{children:"Status"})})]})}),(0,_jsxRuntime.jsx)("tbody",{children:metaDodKeys.map((key=>(0,_jsxRuntime.jsxs)("tr",{children:[(0,_jsxRuntime.jsx)("td",{children:_types.metaDod[key]}),(0,_jsxRuntime.jsx)("td",{children:(0,_jsxRuntime.jsx)(_tag.Tag,{mode:list[key]?"grass":"red",children:list[key]?"ready":"need"})})]},key)))})]})})]})};exports.MetaDod=MetaDod;try{MetaDod.displayName="MetaDod",MetaDod.__docgenInfo={description:"",displayName:"MetaDod",props:{list:{defaultValue:null,description:"",name:"list",required:!0,type:{name:'Partial<Record<"storybook" | "designTokens" | "useThemedHook" | "unitTests" | "screenshotTests" | "migration" | "apiTable" | "figmaView", boolean>>'}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["helpers/hocs/MetaComponent/MetaDod.tsx#MetaDod"]={docgenInfo:MetaDod.__docgenInfo,name:"MetaDod",path:"helpers/hocs/MetaComponent/MetaDod.tsx#MetaDod"})}catch(__react_docgen_typescript_loader_error){}},"./helpers/hocs/MetaComponent/types.ts":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.metaDod=void 0;exports.metaDod={designTokens:"Дизайн токены",useThemedHook:"Использование theme hook",unitTests:"Unit tests",screenshotTests:"Screenshot tests",migration:"Описание миграции",apiTable:"api table",storybook:"storybook",figmaView:"Отображение в Фигме"}},"./helpers/hocs/MetaComponent/withMeta.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.withMeta=function withMeta(list,Component){return props=>(0,_jsxRuntime.jsxs)(_jsxRuntime.Fragment,{children:[(0,_jsxRuntime.jsx)(_blocks.Title,{children:list.component}),(0,_jsxRuntime.jsx)(_MetaDod.MetaDod,{list:list.dod}),(0,_jsxRuntime.jsx)(_blocks.Subtitle,{children:"Описание"}),list.description?(0,_jsxRuntime.jsx)(_blocks.Markdown,{children:list.description}):"-",(0,_jsxRuntime.jsx)(_blocks.Subtitle,{children:"Использование"}),(0,_jsxRuntime.jsx)(_blocks.Markdown,{children:list.usage}),(0,_jsxRuntime.jsx)(_blocks.Markdown,{children:`[Дизайн](${list.designLink})`}),Component&&(0,_jsxRuntime.jsx)(Component,{...props}),(0,_jsxRuntime.jsx)(_blocks.Primary,{}),(0,_jsxRuntime.jsx)(_blocks.ArgsTable,{story:_blocks.PRIMARY_STORY}),(0,_jsxRuntime.jsx)(_blocks.Stories,{title:"Variants of View"})]})};(function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}})(__webpack_require__("./node_modules/react/index.js"));var _MetaDod=__webpack_require__("./helpers/hocs/MetaComponent/MetaDod.tsx"),_blocks=__webpack_require__("./node_modules/@storybook/blocks/dist/index.js"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js")},"./src/field/stories/Field.stories.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.__namedExportsOrder=exports.Validation=exports.LabelTypes=exports.LabelPositions=exports.LabelAdditions=exports.GridLayout=exports.Description=exports.Basic=exports.AdditionalComponent=void 0;var _Basic$parameters,_Basic$parameters2,_Basic$parameters2$do,_LabelAdditions$param,_LabelAdditions$param2,_LabelAdditions$param3,_LabelPositions$param,_LabelPositions$param2,_LabelPositions$param3,_Description$paramete,_Description$paramete2,_Description$paramete3,_Validation$parameter,_Validation$parameter2,_Validation$parameter3,_AdditionalComponent$,_AdditionalComponent$2,_AdditionalComponent$3,_LabelTypes$parameter,_LabelTypes$parameter2,_LabelTypes$parameter3,_GridLayout$parameter,_GridLayout$parameter2,_GridLayout$parameter3,_react=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_styledComponents=_interopRequireDefault(__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js")),_index=__webpack_require__("./src/index.ts"),_withMeta=__webpack_require__("./helpers/hocs/MetaComponent/withMeta.tsx"),_meta=_interopRequireDefault(__webpack_require__("./src/field/__meta__/meta.json")),_badges=__webpack_require__("./.storybook/badges.ts"),_storybookHelpers=__webpack_require__("./helpers/storybookHelpers.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}const meta={title:"Molecules/Field",component:_index.Field,argTypes:{...(0,_storybookHelpers.sbHideControls)(["theme","control"])},args:{labelPosition:"before",label:"Label",control:(0,_jsxRuntime.jsx)(_index.Textbox,{}),required:!1,onHelpClick:void 0,testId:"field-test-id",klId:"field-kl-id"},parameters:{storySource:{source:"import React from 'react';\nimport styled from 'styled-components';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { Field, Textbox, Checkbox, Radio, SectionMessage, SegmentedButton, Toggle, H4 } from '@src/index';\nimport { FieldProps, LabelPosition } from '../types';\nimport { withMeta } from '@helpers/hocs/MetaComponent/withMeta';\nimport MetaData from '../__meta__/meta.json';\nimport { badges } from '@sb/badges';\nimport { sbHideControls } from '@helpers/storybookHelpers';\nimport { LabelType } from '@design-system/tokens';\nconst meta: Meta<FieldProps> = {\n  title: 'Molecules/Field',\n  component: Field,\n  argTypes: {\n    ...sbHideControls(['theme', 'control'])\n  },\n  args: {\n    labelPosition: 'before',\n    label: 'Label',\n    control: <Textbox />,\n    required: false,\n    onHelpClick: undefined,\n    testId: 'field-test-id',\n    klId: 'field-kl-id'\n  },\n  parameters: {\n    badges: [badges.stable, badges.dev],\n    docs: {\n      page: withMeta(MetaData)\n    }\n  }\n};\nexport default meta;\ntype Story = StoryObj<FieldProps>;\nconst labelPositions: LabelPosition[] = ['top', 'before', 'after'];\nconst labelTypes: LabelType[] = ['default', 'full', 'stretch'];\nexport const Basic: Story = {\n  args: {\n    labelPosition: 'top'\n  }\n};\nexport const LabelAdditions: Story = {\n  render: (args: FieldProps) => <>\n      <Field {...args} description='With tooltip' tooltip='Tooltip text' />\n      <Field {...args} label='' tooltip='Tooltip text' description='With tooltip when no label text' />\n      <Field {...args} description='Required' required />\n    </>\n};\nexport const LabelPositions: Story = {\n  render: (args: FieldProps) => <>\n      {labelPositions.map(position => <Field key={position} {...args} labelPosition={position} label={`Label ${position}`} />)}\n      <SectionMessage mode='warning' title='Исключение'>\n        Для компонента toggle не может быть лейбла сверху\n      </SectionMessage>\n      <Field {...args} labelPosition='before' control={<Toggle />} />\n    </>\n};\nexport const Description: Story = {\n  render: (args: FieldProps) => <>\n      <Field {...args} />\n      <Field {...args} control={<Toggle>Label</Toggle>} />\n      <SectionMessage mode='warning' title='Исключение'>\n        Для Radio/Checkbox.Group не может быть общего описания, только описание на уровне конкретных айтемов внутри этой группы\n      </SectionMessage>\n      <H4>Со стороны разработки пока не готово</H4>\n      <Field {...args} control={<Checkbox.Group options={[{\n      label: 'Checkbox 1',\n      value: '1'\n    }, {\n      label: 'Checkbox 2',\n      value: '2'\n    }, {\n      label: 'Checkbox 3',\n      value: '3'\n    }, {\n      label: 'Checkbox 4',\n      value: '4'\n    }]} />} />\n      <Field {...args} control={<Radio vertical={true} options={[{\n      label: 'Radio 1',\n      value: '1'\n    }, {\n      label: 'Radio 2',\n      value: '2'\n    }, {\n      label: 'Radio 3',\n      value: '3'\n    }, {\n      label: 'Radio 4',\n      value: '4'\n    }]} />} />\n    </>,\n  args: {\n    description: 'Description'\n  }\n};\nexport const Validation: Story = {\n  render: (args: FieldProps) => <>\n      <Field {...args} messageMode='success' control={<Textbox valid={true} />} />\n      <Field {...args} messageMode='error' control={<Textbox invalid={true} />} />\n      <Field {...args} messageMode='error' control={<Checkbox.Group options={['1', '2', '3', '4'].map(item => ({\n      label: `Checkbox ${item}`,\n      value: item,\n      invalid: true\n    }))} />} />\n      <Field {...args} messageMode='error' control={<SegmentedButton value={['2']} onChange={e => e} size='large' items={['1', '2', '3', '4'].map(value => ({\n      text: 'Label',\n      value\n    }))} />} />\n      <Field {...args} messageMode='error' control={<Toggle>Label</Toggle>} />\n    </>,\n  args: {\n    message: 'Validation text'\n  }\n};\nexport const AdditionalComponent: Story = {\n  args: {\n    additionalComponent: <Checkbox>Label</Checkbox>\n  }\n};\nconst FieldsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  margin-bottom: 12px;\n`;\nconst LabelTypeGroup = ({\n  controlWidth,\n  ...args\n}: FieldProps) => {\n  const longLabel = 'The long label '.repeat(10);\n  return <FieldsContainer>\n      <H4>labelType={args.labelType}</H4>\n      <Field {...args} label='Basic label' control={<Textbox value='min-width: 200px' />} />\n      <Field {...args} label={longLabel} control={<Textbox value='min-width: 200px' />} />\n      <Field {...args} label='Basic label' control={<Textbox value={`${controlWidth}px`} />} controlWidth={controlWidth} />\n      <Field {...args} label={longLabel} control={<Textbox value={`${controlWidth}px`} />} controlWidth={controlWidth} />\n    </FieldsContainer>;\n};\nexport const LabelTypes: Story = {\n  render: (args: FieldProps) => <>\n      {labelTypes.map(type => <LabelTypeGroup {...args} key={type} labelType={type} />)}\n    </>,\n  args: {\n    controlWidth: 60\n  }\n};\nexport const GridLayout: Story = {\n  args: {\n    gridLayout: {\n      firstCol: '123px',\n      secondCol: '456px'\n    }\n  }\n};\nBasic.parameters = {\n  ...Basic.parameters,\n  docs: {\n    ...Basic.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    labelPosition: 'top'\\n  }\\n}\",\n      ...Basic.parameters?.docs?.source\n    }\n  }\n};\nLabelAdditions.parameters = {\n  ...LabelAdditions.parameters,\n  docs: {\n    ...LabelAdditions.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: (args: FieldProps) => <>\\n      <Field {...args} description='With tooltip' tooltip='Tooltip text' />\\n      <Field {...args} label='' tooltip='Tooltip text' description='With tooltip when no label text' />\\n      <Field {...args} description='Required' required />\\n    </>\\n}\",\n      ...LabelAdditions.parameters?.docs?.source\n    }\n  }\n};\nLabelPositions.parameters = {\n  ...LabelPositions.parameters,\n  docs: {\n    ...LabelPositions.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: (args: FieldProps) => <>\\n      {labelPositions.map(position => <Field key={position} {...args} labelPosition={position} label={`Label ${position}`} />)}\\n      <SectionMessage mode='warning' title='\\u0418\\u0441\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u0438\\u0435'>\\n        \\u0414\\u043B\\u044F \\u043A\\u043E\\u043C\\u043F\\u043E\\u043D\\u0435\\u043D\\u0442\\u0430 toggle \\u043D\\u0435 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0431\\u044B\\u0442\\u044C \\u043B\\u0435\\u0439\\u0431\\u043B\\u0430 \\u0441\\u0432\\u0435\\u0440\\u0445\\u0443\\n      </SectionMessage>\\n      <Field {...args} labelPosition='before' control={<Toggle />} />\\n    </>\\n}\",\n      ...LabelPositions.parameters?.docs?.source\n    }\n  }\n};\nDescription.parameters = {\n  ...Description.parameters,\n  docs: {\n    ...Description.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: (args: FieldProps) => <>\\n      <Field {...args} />\\n      <Field {...args} control={<Toggle>Label</Toggle>} />\\n      <SectionMessage mode='warning' title='\\u0418\\u0441\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u0438\\u0435'>\\n        \\u0414\\u043B\\u044F Radio/Checkbox.Group \\u043D\\u0435 \\u043C\\u043E\\u0436\\u0435\\u0442 \\u0431\\u044B\\u0442\\u044C \\u043E\\u0431\\u0449\\u0435\\u0433\\u043E \\u043E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u044F, \\u0442\\u043E\\u043B\\u044C\\u043A\\u043E \\u043E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435 \\u043D\\u0430 \\u0443\\u0440\\u043E\\u0432\\u043D\\u0435 \\u043A\\u043E\\u043D\\u043A\\u0440\\u0435\\u0442\\u043D\\u044B\\u0445 \\u0430\\u0439\\u0442\\u0435\\u043C\\u043E\\u0432 \\u0432\\u043D\\u0443\\u0442\\u0440\\u0438 \\u044D\\u0442\\u043E\\u0439 \\u0433\\u0440\\u0443\\u043F\\u043F\\u044B\\n      </SectionMessage>\\n      <H4>\\u0421\\u043E \\u0441\\u0442\\u043E\\u0440\\u043E\\u043D\\u044B \\u0440\\u0430\\u0437\\u0440\\u0430\\u0431\\u043E\\u0442\\u043A\\u0438 \\u043F\\u043E\\u043A\\u0430 \\u043D\\u0435 \\u0433\\u043E\\u0442\\u043E\\u0432\\u043E</H4>\\n      <Field {...args} control={<Checkbox.Group options={[{\\n      label: 'Checkbox 1',\\n      value: '1'\\n    }, {\\n      label: 'Checkbox 2',\\n      value: '2'\\n    }, {\\n      label: 'Checkbox 3',\\n      value: '3'\\n    }, {\\n      label: 'Checkbox 4',\\n      value: '4'\\n    }]} />} />\\n      <Field {...args} control={<Radio vertical={true} options={[{\\n      label: 'Radio 1',\\n      value: '1'\\n    }, {\\n      label: 'Radio 2',\\n      value: '2'\\n    }, {\\n      label: 'Radio 3',\\n      value: '3'\\n    }, {\\n      label: 'Radio 4',\\n      value: '4'\\n    }]} />} />\\n    </>,\\n  args: {\\n    description: 'Description'\\n  }\\n}\",\n      ...Description.parameters?.docs?.source\n    }\n  }\n};\nValidation.parameters = {\n  ...Validation.parameters,\n  docs: {\n    ...Validation.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: (args: FieldProps) => <>\\n      <Field {...args} messageMode='success' control={<Textbox valid={true} />} />\\n      <Field {...args} messageMode='error' control={<Textbox invalid={true} />} />\\n      <Field {...args} messageMode='error' control={<Checkbox.Group options={['1', '2', '3', '4'].map(item => ({\\n      label: `Checkbox ${item}`,\\n      value: item,\\n      invalid: true\\n    }))} />} />\\n      <Field {...args} messageMode='error' control={<SegmentedButton value={['2']} onChange={e => e} size='large' items={['1', '2', '3', '4'].map(value => ({\\n      text: 'Label',\\n      value\\n    }))} />} />\\n      <Field {...args} messageMode='error' control={<Toggle>Label</Toggle>} />\\n    </>,\\n  args: {\\n    message: 'Validation text'\\n  }\\n}\",\n      ...Validation.parameters?.docs?.source\n    }\n  }\n};\nAdditionalComponent.parameters = {\n  ...AdditionalComponent.parameters,\n  docs: {\n    ...AdditionalComponent.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    additionalComponent: <Checkbox>Label</Checkbox>\\n  }\\n}\",\n      ...AdditionalComponent.parameters?.docs?.source\n    }\n  }\n};\nLabelTypes.parameters = {\n  ...LabelTypes.parameters,\n  docs: {\n    ...LabelTypes.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: (args: FieldProps) => <>\\n      {labelTypes.map(type => <LabelTypeGroup {...args} key={type} labelType={type} />)}\\n    </>,\\n  args: {\\n    controlWidth: 60\\n  }\\n}\",\n      ...LabelTypes.parameters?.docs?.source\n    }\n  }\n};\nGridLayout.parameters = {\n  ...GridLayout.parameters,\n  docs: {\n    ...GridLayout.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  args: {\\n    gridLayout: {\\n      firstCol: '123px',\\n      secondCol: '456px'\\n    }\\n  }\\n}\",\n      ...GridLayout.parameters?.docs?.source\n    }\n  }\n};",locationsMap:{basic:{startLoc:{col:28,line:37},endLoc:{col:1,line:41},startBody:{col:28,line:37},endBody:{col:1,line:41}},"label-additions":{startLoc:{col:37,line:42},endLoc:{col:1,line:48},startBody:{col:37,line:42},endBody:{col:1,line:48}},"label-positions":{startLoc:{col:37,line:49},endLoc:{col:1,line:57},startBody:{col:37,line:49},endBody:{col:1,line:57}},description:{startLoc:{col:34,line:58},endLoc:{col:1,line:96},startBody:{col:34,line:58},endBody:{col:1,line:96}},validation:{startLoc:{col:33,line:97},endLoc:{col:1,line:115},startBody:{col:33,line:97},endBody:{col:1,line:115}},"additional-component":{startLoc:{col:42,line:116},endLoc:{col:1,line:120},startBody:{col:42,line:116},endBody:{col:1,line:120}},"label-types":{startLoc:{col:33,line:140},endLoc:{col:1,line:147},startBody:{col:33,line:140},endBody:{col:1,line:147}},"grid-layout":{startLoc:{col:33,line:148},endLoc:{col:1,line:155},startBody:{col:33,line:148},endBody:{col:1,line:155}}}},badges:[_badges.badges.stable,_badges.badges.dev],docs:{page:(0,_withMeta.withMeta)(_meta.default)}}};exports.default=meta;const labelPositions=["top","before","after"],labelTypes=["default","full","stretch"],Basic=exports.Basic={args:{labelPosition:"top"}},LabelAdditions=exports.LabelAdditions={render:args=>(0,_jsxRuntime.jsxs)(_jsxRuntime.Fragment,{children:[(0,_jsxRuntime.jsx)(_index.Field,{...args,description:"With tooltip",tooltip:"Tooltip text"}),(0,_jsxRuntime.jsx)(_index.Field,{...args,label:"",tooltip:"Tooltip text",description:"With tooltip when no label text"}),(0,_jsxRuntime.jsx)(_index.Field,{...args,description:"Required",required:!0})]})},LabelPositions=exports.LabelPositions={render:args=>(0,_jsxRuntime.jsxs)(_jsxRuntime.Fragment,{children:[labelPositions.map((position=>(0,_jsxRuntime.jsx)(_index.Field,{...args,labelPosition:position,label:`Label ${position}`},position))),(0,_jsxRuntime.jsx)(_index.SectionMessage,{mode:"warning",title:"Исключение",children:"Для компонента toggle не может быть лейбла сверху"}),(0,_jsxRuntime.jsx)(_index.Field,{...args,labelPosition:"before",control:(0,_jsxRuntime.jsx)(_index.Toggle,{})})]})},Description=exports.Description={render:args=>(0,_jsxRuntime.jsxs)(_jsxRuntime.Fragment,{children:[(0,_jsxRuntime.jsx)(_index.Field,{...args}),(0,_jsxRuntime.jsx)(_index.Field,{...args,control:(0,_jsxRuntime.jsx)(_index.Toggle,{children:"Label"})}),(0,_jsxRuntime.jsx)(_index.SectionMessage,{mode:"warning",title:"Исключение",children:"Для Radio/Checkbox.Group не может быть общего описания, только описание на уровне конкретных айтемов внутри этой группы"}),(0,_jsxRuntime.jsx)(_index.H4,{children:"Со стороны разработки пока не готово"}),(0,_jsxRuntime.jsx)(_index.Field,{...args,control:(0,_jsxRuntime.jsx)(_index.Checkbox.Group,{options:[{label:"Checkbox 1",value:"1"},{label:"Checkbox 2",value:"2"},{label:"Checkbox 3",value:"3"},{label:"Checkbox 4",value:"4"}]})}),(0,_jsxRuntime.jsx)(_index.Field,{...args,control:(0,_jsxRuntime.jsx)(_index.Radio,{vertical:!0,options:[{label:"Radio 1",value:"1"},{label:"Radio 2",value:"2"},{label:"Radio 3",value:"3"},{label:"Radio 4",value:"4"}]})})]}),args:{description:"Description"}},Validation=exports.Validation={render:args=>(0,_jsxRuntime.jsxs)(_jsxRuntime.Fragment,{children:[(0,_jsxRuntime.jsx)(_index.Field,{...args,messageMode:"success",control:(0,_jsxRuntime.jsx)(_index.Textbox,{valid:!0})}),(0,_jsxRuntime.jsx)(_index.Field,{...args,messageMode:"error",control:(0,_jsxRuntime.jsx)(_index.Textbox,{invalid:!0})}),(0,_jsxRuntime.jsx)(_index.Field,{...args,messageMode:"error",control:(0,_jsxRuntime.jsx)(_index.Checkbox.Group,{options:["1","2","3","4"].map((item=>({label:`Checkbox ${item}`,value:item,invalid:!0})))})}),(0,_jsxRuntime.jsx)(_index.Field,{...args,messageMode:"error",control:(0,_jsxRuntime.jsx)(_index.SegmentedButton,{value:["2"],onChange:e=>e,size:"large",items:["1","2","3","4"].map((value=>({text:"Label",value})))})}),(0,_jsxRuntime.jsx)(_index.Field,{...args,messageMode:"error",control:(0,_jsxRuntime.jsx)(_index.Toggle,{children:"Label"})})]}),args:{message:"Validation text"}},AdditionalComponent=exports.AdditionalComponent={args:{additionalComponent:(0,_jsxRuntime.jsx)(_index.Checkbox,{children:"Label"})}},FieldsContainer=_styledComponents.default.div.withConfig({displayName:"Fieldstories__FieldsContainer",componentId:"sc-1a55c6d-0"})(["display:flex;flex-direction:column;gap:12px;margin-bottom:12px;"]),LabelTypeGroup=_ref=>{let{controlWidth,...args}=_ref;const longLabel="The long label ".repeat(10);return(0,_jsxRuntime.jsxs)(FieldsContainer,{children:[(0,_jsxRuntime.jsxs)(_index.H4,{children:["labelType=",args.labelType]}),(0,_jsxRuntime.jsx)(_index.Field,{...args,label:"Basic label",control:(0,_jsxRuntime.jsx)(_index.Textbox,{value:"min-width: 200px"})}),(0,_jsxRuntime.jsx)(_index.Field,{...args,label:longLabel,control:(0,_jsxRuntime.jsx)(_index.Textbox,{value:"min-width: 200px"})}),(0,_jsxRuntime.jsx)(_index.Field,{...args,label:"Basic label",control:(0,_jsxRuntime.jsx)(_index.Textbox,{value:`${controlWidth}px`}),controlWidth}),(0,_jsxRuntime.jsx)(_index.Field,{...args,label:longLabel,control:(0,_jsxRuntime.jsx)(_index.Textbox,{value:`${controlWidth}px`}),controlWidth})]})};LabelTypeGroup.displayName="LabelTypeGroup";const LabelTypes=exports.LabelTypes={render:args=>(0,_jsxRuntime.jsx)(_jsxRuntime.Fragment,{children:labelTypes.map((type=>(0,_react.createElement)(LabelTypeGroup,{...args,key:type,labelType:type})))}),args:{controlWidth:60}},GridLayout=exports.GridLayout={args:{gridLayout:{firstCol:"123px",secondCol:"456px"}}};Basic.parameters={...Basic.parameters,docs:{...null===(_Basic$parameters=Basic.parameters)||void 0===_Basic$parameters?void 0:_Basic$parameters.docs,source:{originalSource:"{\n  args: {\n    labelPosition: 'top'\n  }\n}",...null===(_Basic$parameters2=Basic.parameters)||void 0===_Basic$parameters2||null===(_Basic$parameters2$do=_Basic$parameters2.docs)||void 0===_Basic$parameters2$do?void 0:_Basic$parameters2$do.source}}},LabelAdditions.parameters={...LabelAdditions.parameters,docs:{...null===(_LabelAdditions$param=LabelAdditions.parameters)||void 0===_LabelAdditions$param?void 0:_LabelAdditions$param.docs,source:{originalSource:"{\n  render: (args: FieldProps) => <>\n      <Field {...args} description='With tooltip' tooltip='Tooltip text' />\n      <Field {...args} label='' tooltip='Tooltip text' description='With tooltip when no label text' />\n      <Field {...args} description='Required' required />\n    </>\n}",...null===(_LabelAdditions$param2=LabelAdditions.parameters)||void 0===_LabelAdditions$param2||null===(_LabelAdditions$param3=_LabelAdditions$param2.docs)||void 0===_LabelAdditions$param3?void 0:_LabelAdditions$param3.source}}},LabelPositions.parameters={...LabelPositions.parameters,docs:{...null===(_LabelPositions$param=LabelPositions.parameters)||void 0===_LabelPositions$param?void 0:_LabelPositions$param.docs,source:{originalSource:"{\n  render: (args: FieldProps) => <>\n      {labelPositions.map(position => <Field key={position} {...args} labelPosition={position} label={`Label ${position}`} />)}\n      <SectionMessage mode='warning' title='Исключение'>\n        Для компонента toggle не может быть лейбла сверху\n      </SectionMessage>\n      <Field {...args} labelPosition='before' control={<Toggle />} />\n    </>\n}",...null===(_LabelPositions$param2=LabelPositions.parameters)||void 0===_LabelPositions$param2||null===(_LabelPositions$param3=_LabelPositions$param2.docs)||void 0===_LabelPositions$param3?void 0:_LabelPositions$param3.source}}},Description.parameters={...Description.parameters,docs:{...null===(_Description$paramete=Description.parameters)||void 0===_Description$paramete?void 0:_Description$paramete.docs,source:{originalSource:"{\n  render: (args: FieldProps) => <>\n      <Field {...args} />\n      <Field {...args} control={<Toggle>Label</Toggle>} />\n      <SectionMessage mode='warning' title='Исключение'>\n        Для Radio/Checkbox.Group не может быть общего описания, только описание на уровне конкретных айтемов внутри этой группы\n      </SectionMessage>\n      <H4>Со стороны разработки пока не готово</H4>\n      <Field {...args} control={<Checkbox.Group options={[{\n      label: 'Checkbox 1',\n      value: '1'\n    }, {\n      label: 'Checkbox 2',\n      value: '2'\n    }, {\n      label: 'Checkbox 3',\n      value: '3'\n    }, {\n      label: 'Checkbox 4',\n      value: '4'\n    }]} />} />\n      <Field {...args} control={<Radio vertical={true} options={[{\n      label: 'Radio 1',\n      value: '1'\n    }, {\n      label: 'Radio 2',\n      value: '2'\n    }, {\n      label: 'Radio 3',\n      value: '3'\n    }, {\n      label: 'Radio 4',\n      value: '4'\n    }]} />} />\n    </>,\n  args: {\n    description: 'Description'\n  }\n}",...null===(_Description$paramete2=Description.parameters)||void 0===_Description$paramete2||null===(_Description$paramete3=_Description$paramete2.docs)||void 0===_Description$paramete3?void 0:_Description$paramete3.source}}},Validation.parameters={...Validation.parameters,docs:{...null===(_Validation$parameter=Validation.parameters)||void 0===_Validation$parameter?void 0:_Validation$parameter.docs,source:{originalSource:"{\n  render: (args: FieldProps) => <>\n      <Field {...args} messageMode='success' control={<Textbox valid={true} />} />\n      <Field {...args} messageMode='error' control={<Textbox invalid={true} />} />\n      <Field {...args} messageMode='error' control={<Checkbox.Group options={['1', '2', '3', '4'].map(item => ({\n      label: `Checkbox ${item}`,\n      value: item,\n      invalid: true\n    }))} />} />\n      <Field {...args} messageMode='error' control={<SegmentedButton value={['2']} onChange={e => e} size='large' items={['1', '2', '3', '4'].map(value => ({\n      text: 'Label',\n      value\n    }))} />} />\n      <Field {...args} messageMode='error' control={<Toggle>Label</Toggle>} />\n    </>,\n  args: {\n    message: 'Validation text'\n  }\n}",...null===(_Validation$parameter2=Validation.parameters)||void 0===_Validation$parameter2||null===(_Validation$parameter3=_Validation$parameter2.docs)||void 0===_Validation$parameter3?void 0:_Validation$parameter3.source}}},AdditionalComponent.parameters={...AdditionalComponent.parameters,docs:{...null===(_AdditionalComponent$=AdditionalComponent.parameters)||void 0===_AdditionalComponent$?void 0:_AdditionalComponent$.docs,source:{originalSource:"{\n  args: {\n    additionalComponent: <Checkbox>Label</Checkbox>\n  }\n}",...null===(_AdditionalComponent$2=AdditionalComponent.parameters)||void 0===_AdditionalComponent$2||null===(_AdditionalComponent$3=_AdditionalComponent$2.docs)||void 0===_AdditionalComponent$3?void 0:_AdditionalComponent$3.source}}},LabelTypes.parameters={...LabelTypes.parameters,docs:{...null===(_LabelTypes$parameter=LabelTypes.parameters)||void 0===_LabelTypes$parameter?void 0:_LabelTypes$parameter.docs,source:{originalSource:"{\n  render: (args: FieldProps) => <>\n      {labelTypes.map(type => <LabelTypeGroup {...args} key={type} labelType={type} />)}\n    </>,\n  args: {\n    controlWidth: 60\n  }\n}",...null===(_LabelTypes$parameter2=LabelTypes.parameters)||void 0===_LabelTypes$parameter2||null===(_LabelTypes$parameter3=_LabelTypes$parameter2.docs)||void 0===_LabelTypes$parameter3?void 0:_LabelTypes$parameter3.source}}},GridLayout.parameters={...GridLayout.parameters,docs:{...null===(_GridLayout$parameter=GridLayout.parameters)||void 0===_GridLayout$parameter?void 0:_GridLayout$parameter.docs,source:{originalSource:"{\n  args: {\n    gridLayout: {\n      firstCol: '123px',\n      secondCol: '456px'\n    }\n  }\n}",...null===(_GridLayout$parameter2=GridLayout.parameters)||void 0===_GridLayout$parameter2||null===(_GridLayout$parameter3=_GridLayout$parameter2.docs)||void 0===_GridLayout$parameter3?void 0:_GridLayout$parameter3.source}}};exports.__namedExportsOrder=["Basic","LabelAdditions","LabelPositions","Description","Validation","AdditionalComponent","LabelTypes","GridLayout"]},"./src/field/__meta__/meta.json":module=>{module.exports=JSON.parse('{"dod":{"designTokens":true,"useThemedHook":false,"unitTests":false,"screenshotTests":false,"migration":true,"apiTable":true,"storybook":true},"component":"Field","description":"","usage":"","designLink":""}')}}]);