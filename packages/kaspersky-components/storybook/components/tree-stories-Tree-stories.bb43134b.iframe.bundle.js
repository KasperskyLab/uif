"use strict";(self.webpackChunk_kaspersky_components=self.webpackChunk_kaspersky_components||[]).push([[5242],{"./helpers/hocs/MetaComponent/MetaDod.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.MetaDod=void 0;var _react=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_styledComponents=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js")),_blocks=__webpack_require__("./node_modules/@storybook/blocks/dist/index.js"),_types=__webpack_require__("./helpers/hocs/MetaComponent/types.ts"),_tag=__webpack_require__("./src/tag/index.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}const StyledTableContainer=_styledComponents.default.div.withConfig({displayName:"MetaDod__StyledTableContainer",componentId:"sc-1gxe50k-0"})(["&&&&&{width:300px;td,th,tr{background:transparent;border:none;}}"]),MetaDod=_ref=>{let{list}=_ref;const metaDodKeys=(0,_react.useMemo)((()=>Object.keys(_types.metaDod)),[]);return(0,_jsxRuntime.jsxs)(_jsxRuntime.Fragment,{children:[(0,_jsxRuntime.jsx)(_blocks.Subtitle,{children:`Definition of done ${(new Date).getDate()}.${(new Date).getMonth()}.${(new Date).getFullYear()}`}),(0,_jsxRuntime.jsx)(StyledTableContainer,{children:(0,_jsxRuntime.jsxs)("table",{children:[(0,_jsxRuntime.jsx)("thead",{children:(0,_jsxRuntime.jsxs)("tr",{children:[(0,_jsxRuntime.jsx)("td",{children:(0,_jsxRuntime.jsx)("b",{children:"Point"})}),(0,_jsxRuntime.jsx)("td",{children:(0,_jsxRuntime.jsx)("b",{children:"Status"})})]})}),(0,_jsxRuntime.jsx)("tbody",{children:metaDodKeys.map((key=>(0,_jsxRuntime.jsxs)("tr",{children:[(0,_jsxRuntime.jsx)("td",{children:_types.metaDod[key]}),(0,_jsxRuntime.jsx)("td",{children:(0,_jsxRuntime.jsx)(_tag.Tag,{mode:list[key]?"grass":"red",children:list[key]?"ready":"need"})})]},key)))})]})})]})};exports.MetaDod=MetaDod;try{MetaDod.displayName="MetaDod",MetaDod.__docgenInfo={description:"",displayName:"MetaDod",props:{list:{defaultValue:null,description:"",name:"list",required:!0,type:{name:'Partial<Record<"storybook" | "designTokens" | "useThemedHook" | "unitTests" | "screenshotTests" | "migration" | "apiTable" | "figmaView", boolean>>'}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["helpers/hocs/MetaComponent/MetaDod.tsx#MetaDod"]={docgenInfo:MetaDod.__docgenInfo,name:"MetaDod",path:"helpers/hocs/MetaComponent/MetaDod.tsx#MetaDod"})}catch(__react_docgen_typescript_loader_error){}},"./helpers/hocs/MetaComponent/types.ts":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.metaDod=void 0;exports.metaDod={designTokens:"Дизайн токены",useThemedHook:"Использование theme hook",unitTests:"Unit tests",screenshotTests:"Screenshot tests",migration:"Описание миграции",apiTable:"api table",storybook:"storybook",figmaView:"Отображение в Фигме"}},"./helpers/hocs/MetaComponent/withMeta.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.withMeta=function withMeta(list,Component){return props=>(0,_jsxRuntime.jsxs)(_jsxRuntime.Fragment,{children:[(0,_jsxRuntime.jsx)(_blocks.Title,{children:list.component}),(0,_jsxRuntime.jsx)(_MetaDod.MetaDod,{list:list.dod}),(0,_jsxRuntime.jsx)(_blocks.Subtitle,{children:"Описание"}),list.description?(0,_jsxRuntime.jsx)(_blocks.Markdown,{children:list.description}):"-",(0,_jsxRuntime.jsx)(_blocks.Subtitle,{children:"Использование"}),(0,_jsxRuntime.jsx)(_blocks.Markdown,{children:list.usage}),(0,_jsxRuntime.jsx)(_blocks.Markdown,{children:`[Дизайн](${list.designLink})`}),Component&&(0,_jsxRuntime.jsx)(Component,{...props}),(0,_jsxRuntime.jsx)(_blocks.Primary,{}),(0,_jsxRuntime.jsx)(_blocks.ArgsTable,{story:_blocks.PRIMARY_STORY}),(0,_jsxRuntime.jsx)(_blocks.Stories,{title:"Variants of View"})]})};(function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}})(__webpack_require__("./node_modules/react/index.js"));var _MetaDod=__webpack_require__("./helpers/hocs/MetaComponent/MetaDod.tsx"),_blocks=__webpack_require__("./node_modules/@storybook/blocks/dist/index.js"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js")},"./src/tree/stories/Tree.stories.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.__namedExportsOrder=exports.TreeNavSingleChoice=exports.TreeNavMultipleChoiceWithALotOfData=exports.TreeNavMultipleChoice=exports.TreeNavLoadDataAsynchronously=exports.TreeListSingleChoice=exports.TreeListReadOnly=exports.TreeListMultipleChoice=exports.TreeListLoadDataAsynchronously=exports.Draggable=void 0;var _TreeListReadOnly$par,_TreeListReadOnly$par2,_TreeListReadOnly$par3,_TreeListSingleChoice,_TreeListSingleChoice2,_TreeListSingleChoice3,_TreeListMultipleChoi,_TreeListMultipleChoi2,_TreeListMultipleChoi3,_TreeListLoadDataAsyn,_TreeListLoadDataAsyn2,_TreeListLoadDataAsyn3,_TreeNavSingleChoice$,_TreeNavSingleChoice$2,_TreeNavSingleChoice$3,_TreeNavMultipleChoic,_TreeNavMultipleChoic2,_TreeNavMultipleChoic3,_TreeNavMultipleChoic4,_TreeNavMultipleChoic5,_TreeNavMultipleChoic6,_TreeNavLoadDataAsync,_TreeNavLoadDataAsync2,_TreeNavLoadDataAsync3,_Draggable$parameters,_Draggable$parameters2,_Draggable$parameters3,_react=_interopRequireDefault(__webpack_require__("./node_modules/react/index.js")),_badges=__webpack_require__("./.storybook/badges.ts"),_storybookHelpers=__webpack_require__("./helpers/storybookHelpers.ts"),_withMeta=__webpack_require__("./helpers/hocs/MetaComponent/withMeta.tsx"),_meta=_interopRequireDefault(__webpack_require__("./src/tree/__meta__/meta.json")),_tree=__webpack_require__("./src/tree/index.ts"),_utils=__webpack_require__("./src/tree/stories/utils.ts"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const meta={title:"Molecules/Tree",argTypes:{...(0,_storybookHelpers.sbHideControls)(["theme"])},args:{testId:"tree-test-id",klId:"tree-kl-id"},parameters:{storySource:{source:"import React from 'react';\nimport { StoryObj as Story, Meta } from '@storybook/react';\nimport { badges } from '@sb/badges';\nimport { sbHideControls } from '@helpers/storybookHelpers';\nimport { withMeta } from '@helpers/hocs/MetaComponent/withMeta';\nimport MetaData from '../__meta__/meta.json';\nimport { DataNode, TreeList, TreeListProps, TreeNav, TreeNavProps } from '@src/tree';\nimport { TreeProps } from 'antd';\nimport { generateTreeData, getKeys } from './utils';\nconst meta: Meta = {\n  title: 'Molecules/Tree',\n  argTypes: {\n    ...sbHideControls(['theme'])\n  },\n  args: {\n    testId: 'tree-test-id',\n    klId: 'tree-kl-id'\n  },\n  parameters: {\n    badges: [badges.stable],\n    docs: {\n      page: withMeta(MetaData)\n    }\n  }\n};\nexport default meta;\nconst treeDataMock: DataNode[] = [{\n  title: 'Main',\n  key: '0-0',\n  children: [{\n    title: 'Categorized assets',\n    disabled: true,\n    key: '0-0-0',\n    children: [{\n      title: 'Address space',\n      key: '0-0-0-0',\n      children: [{\n        title: 'Address space',\n        key: '0-0-0-0-0'\n      }]\n    }, {\n      title: 'Business impact',\n      key: '0-0-0-1'\n    }, {\n      title: 'Location',\n      key: '0-0-0-2'\n    }]\n  }]\n}, {\n  title: 'KUMA Updater',\n  key: '0-1',\n  children: [{\n    title: 'Categorized assets',\n    key: '0-1-0',\n    children: [{\n      title: 'Address space',\n      key: '0-1-0-0'\n    }, {\n      title: 'Business impact',\n      key: '0-1-0-1'\n    }, {\n      title: 'Location',\n      key: '0-1-0-2'\n    }]\n  }]\n}, {\n  title: 'Shared',\n  key: '0-2',\n  children: [{\n    title: 'Categorized assets',\n    key: '0-2-0',\n    children: [{\n      title: 'Address space',\n      key: '0-2-0-0'\n    }, {\n      title: 'Business impact',\n      key: '0-2-0-1'\n    }, {\n      title: 'Location',\n      key: '0-2-0-2'\n    }]\n  }, {\n    title: 'Org chart',\n    key: '0-2-1',\n    children: [{\n      title: 'Shared chart',\n      key: '0-2-1-0'\n    }]\n  }, {\n    title: 'Test chart',\n    key: '0-2-2',\n    children: [{\n      title: 'Test common',\n      key: '0-2-2-0'\n    }]\n  }]\n}];\nexport const TreeListReadOnly: Story = {\n  render: () => <TreeList mode=\"readOnly\" treeData={treeDataMock} showLine={{\n    showLeafIcon: false\n  }} />\n};\nexport const TreeListSingleChoice: Story = {\n  render: () => <TreeList mode=\"singleChoice\" treeData={treeDataMock} showLine={{\n    showLeafIcon: false\n  }} />\n};\nexport const TreeListMultipleChoice: Story = {\n  render: () => <TreeList mode=\"multipleChoice\" treeData={treeDataMock} showLine={{\n    showLeafIcon: false\n  }} />\n};\nfunction LoadDataAsynchronously({\n  Component,\n  ...props\n}: ({\n  Component: typeof TreeList;\n} & Partial<TreeListProps>) | ({\n  Component: typeof TreeNav;\n} & Partial<TreeNavProps>)) {\n  const [treeData, setTreeData] = React.useState<DataNode[]>([{\n    key: '0-0',\n    title: '0-0',\n    checkable: false\n  }]);\n  const updateTreeData = (nodes: DataNode[], key: React.Key, children: DataNode[]): DataNode[] => nodes.map(node => {\n    if (node.key === key) {\n      return {\n        ...node,\n        children\n      };\n    }\n    if (node.children) {\n      return {\n        ...node,\n        children: updateTreeData(node.children, key, children)\n      };\n    }\n    return node;\n  });\n  return <Component {...props} loadData={async node => {\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    setTreeData(updateTreeData(treeData, node.key, [{\n      key: `${node.key}-0`,\n      title: `${node.title}-0`\n    }, {\n      key: `${node.key}-1`,\n      isLeaf: true,\n      title: `${node.title}-1`\n    }]));\n  }} treeData={treeData} />;\n}\nexport const TreeListLoadDataAsynchronously: Story = {\n  render: () => <LoadDataAsynchronously Component={TreeList} mode=\"multipleChoice\" />\n};\nexport const TreeNavSingleChoice: Story = {\n  render: () => <TreeNav multiple={false} treeData={treeDataMock} showLine={{\n    showLeafIcon: false\n  }} />\n};\nexport const TreeNavMultipleChoice: Story = {\n  render: () => <TreeNav multiple treeData={treeDataMock} showLine={{\n    showLeafIcon: false\n  }} onCheck={checkedKeys => {\n    console.log(checkedKeys);\n  }} />\n};\nexport const TreeNavMultipleChoiceWithALotOfData: Story = {\n  render: () => {\n    const treeData = React.useMemo(() => {\n      return [{\n        key: 'all',\n        title: 'all',\n        children: generateTreeData(400, {\n          depth: 3,\n          width: 10\n        })\n      }];\n    }, []);\n    const defaultExpandedKeys = React.useMemo(() => getKeys(treeData), [treeData]);\n    return <TreeNav defaultExpandedKeys={defaultExpandedKeys} multiple treeData={treeData} showLine={{\n      showLeafIcon: false\n    }} />;\n  }\n};\nexport const TreeNavLoadDataAsynchronously: Story = {\n  render: () => <LoadDataAsynchronously Component={TreeNav} multiple />\n};\nconst defaultData: DataNode[] = generateTreeData(20);\nexport const Draggable: Story = {\n  render: () => {\n    const [gData, setGData] = React.useState(defaultData);\n    const [expandedKeys] = React.useState(['0-0', '0-0-0', '0-0-0-0']);\n    const onDrop: TreeProps['onDrop'] = info => {\n      const dropKey = info.node.key;\n      const dragKey = info.dragNode.key;\n      const dropPos = info.node.pos.split('-');\n      const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n      const loop = (data: DataNode[], key: React.Key, callback: (node: DataNode, i: number, data: DataNode[]) => void) => {\n        for (let i = 0; i < data.length; i++) {\n          if (data[i].key === key) {\n            return callback(data[i], i, data);\n          }\n          if (data[i].children) {\n            loop(data[i].children!, key, callback);\n          }\n        }\n      };\n      const data = [...gData];\n      let dragObj: DataNode;\n      loop(data, dragKey, (item, index, arr) => {\n        arr.splice(index, 1);\n        dragObj = item;\n      });\n      if (!info.dropToGap) {\n        loop(data, dropKey, item => {\n          item.children = item.children || [];\n          item.children.unshift(dragObj);\n        });\n      } else if (((info.node as any).props.children || []).length > 0 && (info.node as any).props.expanded && dropPosition === 1) {\n        loop(data, dropKey, item => {\n          item.children = item.children || [];\n          item.children.unshift(dragObj);\n        });\n      } else {\n        let ar: DataNode[] = [];\n        let i: number;\n        loop(data, dropKey, (_item, index, arr) => {\n          ar = arr;\n          i = index;\n        });\n        if (dropPosition === -1) {\n          ar.splice(i!, 0, dragObj!);\n        } else {\n          ar.splice(i! + 1, 0, dragObj!);\n        }\n      }\n      setGData(data);\n    };\n    return <TreeNav defaultExpandedKeys={expandedKeys} draggable blockNode onDrop={onDrop} treeData={gData} />;\n  }\n};\nTreeListReadOnly.parameters = {\n  ...TreeListReadOnly.parameters,\n  docs: {\n    ...TreeListReadOnly.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <TreeList mode=\\\"readOnly\\\" treeData={treeDataMock} showLine={{\\n    showLeafIcon: false\\n  }} />\\n}\",\n      ...TreeListReadOnly.parameters?.docs?.source\n    }\n  }\n};\nTreeListSingleChoice.parameters = {\n  ...TreeListSingleChoice.parameters,\n  docs: {\n    ...TreeListSingleChoice.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <TreeList mode=\\\"singleChoice\\\" treeData={treeDataMock} showLine={{\\n    showLeafIcon: false\\n  }} />\\n}\",\n      ...TreeListSingleChoice.parameters?.docs?.source\n    }\n  }\n};\nTreeListMultipleChoice.parameters = {\n  ...TreeListMultipleChoice.parameters,\n  docs: {\n    ...TreeListMultipleChoice.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <TreeList mode=\\\"multipleChoice\\\" treeData={treeDataMock} showLine={{\\n    showLeafIcon: false\\n  }} />\\n}\",\n      ...TreeListMultipleChoice.parameters?.docs?.source\n    }\n  }\n};\nTreeListLoadDataAsynchronously.parameters = {\n  ...TreeListLoadDataAsynchronously.parameters,\n  docs: {\n    ...TreeListLoadDataAsynchronously.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <LoadDataAsynchronously Component={TreeList} mode=\\\"multipleChoice\\\" />\\n}\",\n      ...TreeListLoadDataAsynchronously.parameters?.docs?.source\n    }\n  }\n};\nTreeNavSingleChoice.parameters = {\n  ...TreeNavSingleChoice.parameters,\n  docs: {\n    ...TreeNavSingleChoice.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <TreeNav multiple={false} treeData={treeDataMock} showLine={{\\n    showLeafIcon: false\\n  }} />\\n}\",\n      ...TreeNavSingleChoice.parameters?.docs?.source\n    }\n  }\n};\nTreeNavMultipleChoice.parameters = {\n  ...TreeNavMultipleChoice.parameters,\n  docs: {\n    ...TreeNavMultipleChoice.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <TreeNav multiple treeData={treeDataMock} showLine={{\\n    showLeafIcon: false\\n  }} onCheck={checkedKeys => {\\n    console.log(checkedKeys);\\n  }} />\\n}\",\n      ...TreeNavMultipleChoice.parameters?.docs?.source\n    }\n  }\n};\nTreeNavMultipleChoiceWithALotOfData.parameters = {\n  ...TreeNavMultipleChoiceWithALotOfData.parameters,\n  docs: {\n    ...TreeNavMultipleChoiceWithALotOfData.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => {\\n    const treeData = React.useMemo(() => {\\n      return [{\\n        key: 'all',\\n        title: 'all',\\n        children: generateTreeData(400, {\\n          depth: 3,\\n          width: 10\\n        })\\n      }];\\n    }, []);\\n    const defaultExpandedKeys = React.useMemo(() => getKeys(treeData), [treeData]);\\n    return <TreeNav defaultExpandedKeys={defaultExpandedKeys} multiple treeData={treeData} showLine={{\\n      showLeafIcon: false\\n    }} />;\\n  }\\n}\",\n      ...TreeNavMultipleChoiceWithALotOfData.parameters?.docs?.source\n    }\n  }\n};\nTreeNavLoadDataAsynchronously.parameters = {\n  ...TreeNavLoadDataAsynchronously.parameters,\n  docs: {\n    ...TreeNavLoadDataAsynchronously.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <LoadDataAsynchronously Component={TreeNav} multiple />\\n}\",\n      ...TreeNavLoadDataAsynchronously.parameters?.docs?.source\n    }\n  }\n};\nDraggable.parameters = {\n  ...Draggable.parameters,\n  docs: {\n    ...Draggable.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => {\\n    const [gData, setGData] = React.useState(defaultData);\\n    const [expandedKeys] = React.useState(['0-0', '0-0-0', '0-0-0-0']);\\n    const onDrop: TreeProps['onDrop'] = info => {\\n      const dropKey = info.node.key;\\n      const dragKey = info.dragNode.key;\\n      const dropPos = info.node.pos.split('-');\\n      const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\\n      const loop = (data: DataNode[], key: React.Key, callback: (node: DataNode, i: number, data: DataNode[]) => void) => {\\n        for (let i = 0; i < data.length; i++) {\\n          if (data[i].key === key) {\\n            return callback(data[i], i, data);\\n          }\\n          if (data[i].children) {\\n            loop(data[i].children!, key, callback);\\n          }\\n        }\\n      };\\n      const data = [...gData];\\n      let dragObj: DataNode;\\n      loop(data, dragKey, (item, index, arr) => {\\n        arr.splice(index, 1);\\n        dragObj = item;\\n      });\\n      if (!info.dropToGap) {\\n        loop(data, dropKey, item => {\\n          item.children = item.children || [];\\n          item.children.unshift(dragObj);\\n        });\\n      } else if (((info.node as any).props.children || []).length > 0 && (info.node as any).props.expanded && dropPosition === 1) {\\n        loop(data, dropKey, item => {\\n          item.children = item.children || [];\\n          item.children.unshift(dragObj);\\n        });\\n      } else {\\n        let ar: DataNode[] = [];\\n        let i: number;\\n        loop(data, dropKey, (_item, index, arr) => {\\n          ar = arr;\\n          i = index;\\n        });\\n        if (dropPosition === -1) {\\n          ar.splice(i!, 0, dragObj!);\\n        } else {\\n          ar.splice(i! + 1, 0, dragObj!);\\n        }\\n      }\\n      setGData(data);\\n    };\\n    return <TreeNav defaultExpandedKeys={expandedKeys} draggable blockNode onDrop={onDrop} treeData={gData} />;\\n  }\\n}\",\n      ...Draggable.parameters?.docs?.source\n    }\n  }\n};",locationsMap:{"tree-list-read-only":{startLoc:{col:39,line:98},endLoc:{col:1,line:102},startBody:{col:39,line:98},endBody:{col:1,line:102}},"tree-list-single-choice":{startLoc:{col:43,line:103},endLoc:{col:1,line:107},startBody:{col:43,line:103},endBody:{col:1,line:107}},"tree-list-multiple-choice":{startLoc:{col:45,line:108},endLoc:{col:1,line:112},startBody:{col:45,line:108},endBody:{col:1,line:112}},"tree-list-load-data-asynchronously":{startLoc:{col:53,line:153},endLoc:{col:1,line:155},startBody:{col:53,line:153},endBody:{col:1,line:155}},"tree-nav-single-choice":{startLoc:{col:42,line:156},endLoc:{col:1,line:160},startBody:{col:42,line:156},endBody:{col:1,line:160}},"tree-nav-multiple-choice":{startLoc:{col:44,line:161},endLoc:{col:1,line:167},startBody:{col:44,line:161},endBody:{col:1,line:167}},"tree-nav-multiple-choice-with-a-lot-of-data":{startLoc:{col:58,line:168},endLoc:{col:1,line:185},startBody:{col:58,line:168},endBody:{col:1,line:185}},"tree-nav-load-data-asynchronously":{startLoc:{col:52,line:186},endLoc:{col:1,line:188},startBody:{col:52,line:186},endBody:{col:1,line:188}},draggable:{startLoc:{col:32,line:190},endLoc:{col:1,line:242},startBody:{col:32,line:190},endBody:{col:1,line:242}}}},badges:[_badges.badges.stable],docs:{page:(0,_withMeta.withMeta)(_meta.default)}}};exports.default=meta;const treeDataMock=[{title:"Main",key:"0-0",children:[{title:"Categorized assets",disabled:!0,key:"0-0-0",children:[{title:"Address space",key:"0-0-0-0",children:[{title:"Address space",key:"0-0-0-0-0"}]},{title:"Business impact",key:"0-0-0-1"},{title:"Location",key:"0-0-0-2"}]}]},{title:"KUMA Updater",key:"0-1",children:[{title:"Categorized assets",key:"0-1-0",children:[{title:"Address space",key:"0-1-0-0"},{title:"Business impact",key:"0-1-0-1"},{title:"Location",key:"0-1-0-2"}]}]},{title:"Shared",key:"0-2",children:[{title:"Categorized assets",key:"0-2-0",children:[{title:"Address space",key:"0-2-0-0"},{title:"Business impact",key:"0-2-0-1"},{title:"Location",key:"0-2-0-2"}]},{title:"Org chart",key:"0-2-1",children:[{title:"Shared chart",key:"0-2-1-0"}]},{title:"Test chart",key:"0-2-2",children:[{title:"Test common",key:"0-2-2-0"}]}]}],TreeListReadOnly=exports.TreeListReadOnly={render:()=>(0,_jsxRuntime.jsx)(_tree.TreeList,{mode:"readOnly",treeData:treeDataMock,showLine:{showLeafIcon:!1}})},TreeListSingleChoice=exports.TreeListSingleChoice={render:()=>(0,_jsxRuntime.jsx)(_tree.TreeList,{mode:"singleChoice",treeData:treeDataMock,showLine:{showLeafIcon:!1}})},TreeListMultipleChoice=exports.TreeListMultipleChoice={render:()=>(0,_jsxRuntime.jsx)(_tree.TreeList,{mode:"multipleChoice",treeData:treeDataMock,showLine:{showLeafIcon:!1}})};function LoadDataAsynchronously(_ref){let{Component,...props}=_ref;const[treeData,setTreeData]=_react.default.useState([{key:"0-0",title:"0-0",checkable:!1}]),updateTreeData=(nodes,key,children)=>nodes.map((node=>node.key===key?{...node,children}:node.children?{...node,children:updateTreeData(node.children,key,children)}:node));return(0,_jsxRuntime.jsx)(Component,{...props,loadData:async node=>{await new Promise((resolve=>setTimeout(resolve,2e3))),setTreeData(updateTreeData(treeData,node.key,[{key:`${node.key}-0`,title:`${node.title}-0`},{key:`${node.key}-1`,isLeaf:!0,title:`${node.title}-1`}]))},treeData})}LoadDataAsynchronously.displayName="LoadDataAsynchronously";const TreeListLoadDataAsynchronously=exports.TreeListLoadDataAsynchronously={render:()=>(0,_jsxRuntime.jsx)(LoadDataAsynchronously,{Component:_tree.TreeList,mode:"multipleChoice"})},TreeNavSingleChoice=exports.TreeNavSingleChoice={render:()=>(0,_jsxRuntime.jsx)(_tree.TreeNav,{multiple:!1,treeData:treeDataMock,showLine:{showLeafIcon:!1}})},TreeNavMultipleChoice=exports.TreeNavMultipleChoice={render:()=>(0,_jsxRuntime.jsx)(_tree.TreeNav,{multiple:!0,treeData:treeDataMock,showLine:{showLeafIcon:!1},onCheck:checkedKeys=>{console.log(checkedKeys)}})},TreeNavMultipleChoiceWithALotOfData=exports.TreeNavMultipleChoiceWithALotOfData={render:()=>{const treeData=_react.default.useMemo((()=>[{key:"all",title:"all",children:(0,_utils.generateTreeData)(400,{depth:3,width:10})}]),[]),defaultExpandedKeys=_react.default.useMemo((()=>(0,_utils.getKeys)(treeData)),[treeData]);return(0,_jsxRuntime.jsx)(_tree.TreeNav,{defaultExpandedKeys,multiple:!0,treeData,showLine:{showLeafIcon:!1}})}},TreeNavLoadDataAsynchronously=exports.TreeNavLoadDataAsynchronously={render:()=>(0,_jsxRuntime.jsx)(LoadDataAsynchronously,{Component:_tree.TreeNav,multiple:!0})},defaultData=(0,_utils.generateTreeData)(20),Draggable=exports.Draggable={render:()=>{const[gData,setGData]=_react.default.useState(defaultData),[expandedKeys]=_react.default.useState(["0-0","0-0-0","0-0-0-0"]);return(0,_jsxRuntime.jsx)(_tree.TreeNav,{defaultExpandedKeys:expandedKeys,draggable:!0,blockNode:!0,onDrop:info=>{const dropKey=info.node.key,dragKey=info.dragNode.key,dropPos=info.node.pos.split("-"),dropPosition=info.dropPosition-Number(dropPos[dropPos.length-1]),loop=(data,key,callback)=>{for(let i=0;i<data.length;i++){if(data[i].key===key)return callback(data[i],i,data);data[i].children&&loop(data[i].children,key,callback)}},data=[...gData];let dragObj;if(loop(data,dragKey,((item,index,arr)=>{arr.splice(index,1),dragObj=item})),info.dropToGap)if((info.node.props.children||[]).length>0&&info.node.props.expanded&&1===dropPosition)loop(data,dropKey,(item=>{item.children=item.children||[],item.children.unshift(dragObj)}));else{let i,ar=[];loop(data,dropKey,((_item,index,arr)=>{ar=arr,i=index})),-1===dropPosition?ar.splice(i,0,dragObj):ar.splice(i+1,0,dragObj)}else loop(data,dropKey,(item=>{item.children=item.children||[],item.children.unshift(dragObj)}));setGData(data)},treeData:gData})}};TreeListReadOnly.parameters={...TreeListReadOnly.parameters,docs:{...null===(_TreeListReadOnly$par=TreeListReadOnly.parameters)||void 0===_TreeListReadOnly$par?void 0:_TreeListReadOnly$par.docs,source:{originalSource:'{\n  render: () => <TreeList mode="readOnly" treeData={treeDataMock} showLine={{\n    showLeafIcon: false\n  }} />\n}',...null===(_TreeListReadOnly$par2=TreeListReadOnly.parameters)||void 0===_TreeListReadOnly$par2||null===(_TreeListReadOnly$par3=_TreeListReadOnly$par2.docs)||void 0===_TreeListReadOnly$par3?void 0:_TreeListReadOnly$par3.source}}},TreeListSingleChoice.parameters={...TreeListSingleChoice.parameters,docs:{...null===(_TreeListSingleChoice=TreeListSingleChoice.parameters)||void 0===_TreeListSingleChoice?void 0:_TreeListSingleChoice.docs,source:{originalSource:'{\n  render: () => <TreeList mode="singleChoice" treeData={treeDataMock} showLine={{\n    showLeafIcon: false\n  }} />\n}',...null===(_TreeListSingleChoice2=TreeListSingleChoice.parameters)||void 0===_TreeListSingleChoice2||null===(_TreeListSingleChoice3=_TreeListSingleChoice2.docs)||void 0===_TreeListSingleChoice3?void 0:_TreeListSingleChoice3.source}}},TreeListMultipleChoice.parameters={...TreeListMultipleChoice.parameters,docs:{...null===(_TreeListMultipleChoi=TreeListMultipleChoice.parameters)||void 0===_TreeListMultipleChoi?void 0:_TreeListMultipleChoi.docs,source:{originalSource:'{\n  render: () => <TreeList mode="multipleChoice" treeData={treeDataMock} showLine={{\n    showLeafIcon: false\n  }} />\n}',...null===(_TreeListMultipleChoi2=TreeListMultipleChoice.parameters)||void 0===_TreeListMultipleChoi2||null===(_TreeListMultipleChoi3=_TreeListMultipleChoi2.docs)||void 0===_TreeListMultipleChoi3?void 0:_TreeListMultipleChoi3.source}}},TreeListLoadDataAsynchronously.parameters={...TreeListLoadDataAsynchronously.parameters,docs:{...null===(_TreeListLoadDataAsyn=TreeListLoadDataAsynchronously.parameters)||void 0===_TreeListLoadDataAsyn?void 0:_TreeListLoadDataAsyn.docs,source:{originalSource:'{\n  render: () => <LoadDataAsynchronously Component={TreeList} mode="multipleChoice" />\n}',...null===(_TreeListLoadDataAsyn2=TreeListLoadDataAsynchronously.parameters)||void 0===_TreeListLoadDataAsyn2||null===(_TreeListLoadDataAsyn3=_TreeListLoadDataAsyn2.docs)||void 0===_TreeListLoadDataAsyn3?void 0:_TreeListLoadDataAsyn3.source}}},TreeNavSingleChoice.parameters={...TreeNavSingleChoice.parameters,docs:{...null===(_TreeNavSingleChoice$=TreeNavSingleChoice.parameters)||void 0===_TreeNavSingleChoice$?void 0:_TreeNavSingleChoice$.docs,source:{originalSource:"{\n  render: () => <TreeNav multiple={false} treeData={treeDataMock} showLine={{\n    showLeafIcon: false\n  }} />\n}",...null===(_TreeNavSingleChoice$2=TreeNavSingleChoice.parameters)||void 0===_TreeNavSingleChoice$2||null===(_TreeNavSingleChoice$3=_TreeNavSingleChoice$2.docs)||void 0===_TreeNavSingleChoice$3?void 0:_TreeNavSingleChoice$3.source}}},TreeNavMultipleChoice.parameters={...TreeNavMultipleChoice.parameters,docs:{...null===(_TreeNavMultipleChoic=TreeNavMultipleChoice.parameters)||void 0===_TreeNavMultipleChoic?void 0:_TreeNavMultipleChoic.docs,source:{originalSource:"{\n  render: () => <TreeNav multiple treeData={treeDataMock} showLine={{\n    showLeafIcon: false\n  }} onCheck={checkedKeys => {\n    console.log(checkedKeys);\n  }} />\n}",...null===(_TreeNavMultipleChoic2=TreeNavMultipleChoice.parameters)||void 0===_TreeNavMultipleChoic2||null===(_TreeNavMultipleChoic3=_TreeNavMultipleChoic2.docs)||void 0===_TreeNavMultipleChoic3?void 0:_TreeNavMultipleChoic3.source}}},TreeNavMultipleChoiceWithALotOfData.parameters={...TreeNavMultipleChoiceWithALotOfData.parameters,docs:{...null===(_TreeNavMultipleChoic4=TreeNavMultipleChoiceWithALotOfData.parameters)||void 0===_TreeNavMultipleChoic4?void 0:_TreeNavMultipleChoic4.docs,source:{originalSource:"{\n  render: () => {\n    const treeData = React.useMemo(() => {\n      return [{\n        key: 'all',\n        title: 'all',\n        children: generateTreeData(400, {\n          depth: 3,\n          width: 10\n        })\n      }];\n    }, []);\n    const defaultExpandedKeys = React.useMemo(() => getKeys(treeData), [treeData]);\n    return <TreeNav defaultExpandedKeys={defaultExpandedKeys} multiple treeData={treeData} showLine={{\n      showLeafIcon: false\n    }} />;\n  }\n}",...null===(_TreeNavMultipleChoic5=TreeNavMultipleChoiceWithALotOfData.parameters)||void 0===_TreeNavMultipleChoic5||null===(_TreeNavMultipleChoic6=_TreeNavMultipleChoic5.docs)||void 0===_TreeNavMultipleChoic6?void 0:_TreeNavMultipleChoic6.source}}},TreeNavLoadDataAsynchronously.parameters={...TreeNavLoadDataAsynchronously.parameters,docs:{...null===(_TreeNavLoadDataAsync=TreeNavLoadDataAsynchronously.parameters)||void 0===_TreeNavLoadDataAsync?void 0:_TreeNavLoadDataAsync.docs,source:{originalSource:"{\n  render: () => <LoadDataAsynchronously Component={TreeNav} multiple />\n}",...null===(_TreeNavLoadDataAsync2=TreeNavLoadDataAsynchronously.parameters)||void 0===_TreeNavLoadDataAsync2||null===(_TreeNavLoadDataAsync3=_TreeNavLoadDataAsync2.docs)||void 0===_TreeNavLoadDataAsync3?void 0:_TreeNavLoadDataAsync3.source}}},Draggable.parameters={...Draggable.parameters,docs:{...null===(_Draggable$parameters=Draggable.parameters)||void 0===_Draggable$parameters?void 0:_Draggable$parameters.docs,source:{originalSource:"{\n  render: () => {\n    const [gData, setGData] = React.useState(defaultData);\n    const [expandedKeys] = React.useState(['0-0', '0-0-0', '0-0-0-0']);\n    const onDrop: TreeProps['onDrop'] = info => {\n      const dropKey = info.node.key;\n      const dragKey = info.dragNode.key;\n      const dropPos = info.node.pos.split('-');\n      const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n      const loop = (data: DataNode[], key: React.Key, callback: (node: DataNode, i: number, data: DataNode[]) => void) => {\n        for (let i = 0; i < data.length; i++) {\n          if (data[i].key === key) {\n            return callback(data[i], i, data);\n          }\n          if (data[i].children) {\n            loop(data[i].children!, key, callback);\n          }\n        }\n      };\n      const data = [...gData];\n      let dragObj: DataNode;\n      loop(data, dragKey, (item, index, arr) => {\n        arr.splice(index, 1);\n        dragObj = item;\n      });\n      if (!info.dropToGap) {\n        loop(data, dropKey, item => {\n          item.children = item.children || [];\n          item.children.unshift(dragObj);\n        });\n      } else if (((info.node as any).props.children || []).length > 0 && (info.node as any).props.expanded && dropPosition === 1) {\n        loop(data, dropKey, item => {\n          item.children = item.children || [];\n          item.children.unshift(dragObj);\n        });\n      } else {\n        let ar: DataNode[] = [];\n        let i: number;\n        loop(data, dropKey, (_item, index, arr) => {\n          ar = arr;\n          i = index;\n        });\n        if (dropPosition === -1) {\n          ar.splice(i!, 0, dragObj!);\n        } else {\n          ar.splice(i! + 1, 0, dragObj!);\n        }\n      }\n      setGData(data);\n    };\n    return <TreeNav defaultExpandedKeys={expandedKeys} draggable blockNode onDrop={onDrop} treeData={gData} />;\n  }\n}",...null===(_Draggable$parameters2=Draggable.parameters)||void 0===_Draggable$parameters2||null===(_Draggable$parameters3=_Draggable$parameters2.docs)||void 0===_Draggable$parameters3?void 0:_Draggable$parameters3.source}}};exports.__namedExportsOrder=["TreeListReadOnly","TreeListSingleChoice","TreeListMultipleChoice","TreeListLoadDataAsynchronously","TreeNavSingleChoice","TreeNavMultipleChoice","TreeNavMultipleChoiceWithALotOfData","TreeNavLoadDataAsynchronously","Draggable"]},"./src/tree/stories/utils.ts":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.generateTreeData=function generateTreeData(num){let config=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{depth:3,width:3};const nodes=[];let currentRootWidth=0,currentNum=0;function isNumberOfNodesExceeded(){return currentNum>=num}function flipCoin(){return Math.random()<.5}function createNode(key,currentDepth){const node={key,isLeaf:!0,title:key};if(currentNum++,!isNumberOfNodesExceeded()&&config.depth>currentDepth&&flipCoin()){node.isLeaf=!1,node.children=[];let childrenNumber=0;for(;node.children.push(createNode(`${key}-${childrenNumber++}`,currentDepth+1)),!isNumberOfNodesExceeded()&&config.width!==childrenNumber&&!flipCoin(););}return node}function createRootNode(){return createNode("0-"+currentRootWidth++,1)}for(;!isNumberOfNodesExceeded();)nodes.push(createRootNode());return nodes},exports.getKeys=function getKeys(nodes){const out=[];for(const node of nodes)out.push(node.key),node.children&&out.push(...getKeys(node.children));return out}},"./src/tree/__meta__/meta.json":module=>{module.exports=JSON.parse('{"dod":{"designTokens":true,"useThemedHook":true,"unitTests":true,"screenshotTests":false,"migration":true,"apiTable":true,"storybook":true},"component":"Tree","description":"В качестве основы используется Tree из библиотеки Antd.","usage":"Компонент Tree предназначен для отображения иерархической структуры","designLink":"https://www.figma.com/file/9hiN2DbkqbxbhR9EWRI1VK/B2B-UI-KIT?node-id=30551%3A107886"}')}}]);