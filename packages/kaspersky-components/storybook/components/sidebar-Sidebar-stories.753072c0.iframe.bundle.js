"use strict";(self.webpackChunk_kaspersky_components=self.webpackChunk_kaspersky_components||[]).push([[4247],{"./src/sidebar/Sidebar.stories.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.__namedExportsOrder=exports.WithoutOverlay=exports.WithSubtitle=exports.WithNavigation=exports.WithHeaderActions=exports.WithFooter=exports.WithFixedElements=exports.Sizes=exports.Overlap=exports.CloseConfirmation=exports.Basic=void 0;var _Basic$parameters,_Basic$parameters2,_Basic$parameters2$do,_WithHeaderActions$pa,_WithHeaderActions$pa2,_WithHeaderActions$pa3,_WithSubtitle$paramet,_WithSubtitle$paramet2,_WithSubtitle$paramet3,_WithFixedElements$pa,_WithFixedElements$pa2,_WithFixedElements$pa3,_WithoutOverlay$param,_WithoutOverlay$param2,_WithoutOverlay$param3,_Sizes$parameters,_Sizes$parameters2,_Sizes$parameters2$do,_WithFooter$parameter,_WithFooter$parameter2,_WithFooter$parameter3,_WithNavigation$param,_WithNavigation$param2,_WithNavigation$param3,_Overlap$parameters,_Overlap$parameters2,_Overlap$parameters2$,_CloseConfirmation$pa,_CloseConfirmation$pa2,_CloseConfirmation$pa3,_react=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_meta=_interopRequireDefault(__webpack_require__("./src/sidebar/__meta__/meta.json")),_Sidebar=__webpack_require__("./src/sidebar/Sidebar.tsx"),_badges=__webpack_require__("./.storybook/badges.ts"),_storybookHelpers=__webpack_require__("./helpers/storybookHelpers.ts"),_withMeta=__webpack_require__("./helpers/hocs/MetaComponent/withMeta.tsx"),_button=__webpack_require__("./src/button/index.ts"),_typography=__webpack_require__("./src/typography/index.ts"),_styledComponents=_interopRequireDefault(__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js")),_types=__webpack_require__("./design-system/types/index.ts"),_space=__webpack_require__("./src/space/index.ts"),_actionButton=__webpack_require__("./src/action-button/index.ts"),_=__webpack_require__("./node_modules/@kaspersky/icons/16/index.js"),_2=__webpack_require__("./node_modules/@kaspersky/icons/24/index.js"),_badge=__webpack_require__("./src/badge/index.ts"),_uuid=__webpack_require__("./node_modules/uuid/dist/commonjs-browser/index.js"),_tabs=__webpack_require__("./src/tabs/index.ts"),_modal=__webpack_require__("./src/modal/index.ts"),_toolbar=__webpack_require__("./src/toolbar/index.ts"),_Toolbar=__webpack_require__("./src/toolbar/stories/Toolbar.stories.tsx"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}const meta={title:"Organisms/Sidebar",component:_Sidebar.Sidebar,argTypes:{...(0,_storybookHelpers.sbHideControls)(["theme","closable","closeIcon","keyboard","maskClosable"])},args:{testId:"sidebar-test-id",klId:"sidebar-kl-id"},parameters:{storySource:{source:"import React, { useState } from 'react';\nimport MetaData from './__meta__/meta.json';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { SidebarProps, SidebarSize } from './types';\nimport { Sidebar } from './Sidebar';\nimport { badges } from '@sb/badges';\nimport { sbHideControls } from '@helpers/storybookHelpers';\nimport { withMeta } from '@helpers/hocs/MetaComponent/withMeta';\nimport { Button } from '../button';\nimport { Text } from '../typography';\nimport styled from 'styled-components';\nimport { Size } from '@design-system/types';\nimport { Space } from '@src/space';\nimport { ActionButton } from '@src/action-button';\nimport { Help, Youtube } from '@kaspersky/icons/16';\nimport { Star } from '@kaspersky/icons/24';\nimport { Badge } from '@src/badge';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ButtonMode } from '@src/button/types';\nimport { Tabs, TabsProps } from '@src/tabs';\nimport { Modal } from '@src/modal';\nimport { Toolbar } from '@src/toolbar';\nimport { itemsLeft, itemsRight } from '@src/toolbar/stories/Toolbar.stories';\nconst meta: Meta<SidebarProps> = {\n  title: 'Organisms/Sidebar',\n  component: Sidebar,\n  argTypes: {\n    ...sbHideControls(['theme', 'closable', 'closeIcon', 'keyboard', 'maskClosable'])\n  },\n  args: {\n    testId: 'sidebar-test-id',\n    klId: 'sidebar-kl-id'\n  },\n  parameters: {\n    badges: [badges.stable, badges.needsDesignReview],\n    docs: {\n      page: withMeta(MetaData)\n    },\n    design: MetaData.figmaView\n  }\n};\nexport default meta;\ntype SidebarWithButtonProps = SidebarProps & {\n  buttonText?: string;\n};\ntype StoryWithButton = StoryObj<SidebarWithButtonProps>;\nconst SidebarWithButton = (props: SidebarWithButtonProps) => {\n  const [isOpen, setIsOpen] = useState(false);\n  return <>\n      <Button onClick={() => setIsOpen(true)}>\n        {props.buttonText || 'Open'}\n      </Button>\n      <Sidebar {...props} visible={isOpen} onClose={() => setIsOpen(false)} title=\"Sidebar\">\n        {props.children || <Text>Content</Text>}\n      </Sidebar>\n    </>;\n};\nexport const Basic: StoryWithButton = {\n  render: (args: SidebarWithButtonProps) => <SidebarWithButton {...args} />\n};\nexport const WithHeaderActions: StoryWithButton = {\n  render: (args: SidebarWithButtonProps) => <SidebarWithButton {...args} />,\n  args: {\n    headerActions: <Space size={8}>\n        <ActionButton size=\"large\" icon={<Youtube />} />\n        <ActionButton size=\"large\" icon={<Help />} />\n      </Space>\n  }\n};\nexport const WithSubtitle: StoryWithButton = {\n  render: (args: SidebarWithButtonProps) => <SidebarWithButton {...args} />,\n  args: {\n    subtitle: 'Sidebar 1200',\n    titlePostfix: <div>\n        <Badge count={10} />\n      </div>,\n    titlePrefix: <Star />\n  }\n};\nexport const WithFixedElements: StoryObj = {\n  render: (args: SidebarWithButtonProps) => <SidebarWithButton {...args} />,\n  args: {\n    subHeader: <div style={{\n      padding: '0 24px'\n    }}>\n        <Toolbar left={itemsLeft} right={itemsRight} />\n      </div>,\n    children: <div>\n        <p style={{\n        height: '200vh'\n      }}>Scrollable content</p>\n      </div>\n  }\n};\nexport const WithoutOverlay: StoryWithButton = {\n  render: (args: SidebarWithButtonProps) => <SidebarWithButton {...args} />,\n  args: {\n    mask: false\n  }\n};\nconst SidebarsContainer = styled.div`\n  display: flex;\n  gap: 12px;\n`;\nexport const Sizes: StoryWithButton = {\n  render: (args: SidebarProps) => {\n    const sizes: SidebarSize[] = [Size.ExtraSmall, Size.Small, Size.Medium, Size.Large];\n    return <SidebarsContainer>\n        {sizes.map(size => <SidebarWithButton key={size} size={size} buttonText={size} {...args} />)}\n        <SidebarWithButton key={'flex'} buttonText={'flex'} flex {...args} />\n      </SidebarsContainer>;\n  }\n};\nconst FooterContainer = styled.div`\n  display: flex;\n  gap: 12px;\n`;\ntype WithFooterProps = {\n  'Button 1 Text': string;\n  'Button 2 Text': string;\n  'Button 3 Text': string;\n  'Button 1 Mode': ButtonMode;\n  'Button 2 Mode': ButtonMode;\n  'Button 3 Mode': ButtonMode;\n  'Button 3 Position': 'left' | 'right' | 'none';\n} & SidebarWithButtonProps;\nconst RightSide = styled.div<{\n  position: 'left' | 'right';\n}>`\n  margin-left: ${props => props.position === 'right' ? 'auto' : ''};\n`;\nexport const WithFooter: StoryObj<WithFooterProps> = {\n  render: (args: WithFooterProps) => <SidebarWithButton footer={<FooterContainer>\n          <Button mode={args['Button 1 Mode']}>{args['Button 1 Text']}</Button>\n          <Button mode={args['Button 2 Mode']}>{args['Button 2 Text']}</Button>\n          {args['Button 3 Position'] !== 'none' && <RightSide position={args['Button 3 Position']}>\n              <Button mode={args['Button 3 Mode']}>\n                {args['Button 3 Text']}\n              </Button>\n            </RightSide>}\n        </FooterContainer>} {...args} />,\n  argTypes: {\n    'Button 1 Text': {\n      control: {\n        type: 'text'\n      }\n    },\n    'Button 1 Mode': {\n      control: {\n        type: 'select'\n      },\n      options: ['primary', 'secondary', 'tertiary', 'dangerFilled', 'dangerOutlined']\n    },\n    'Button 2 Text': {\n      control: {\n        type: 'text'\n      }\n    },\n    'Button 2 Mode': {\n      control: {\n        type: 'select'\n      },\n      options: ['primary', 'secondary', 'tertiary', 'dangerFilled', 'dangerOutlined']\n    },\n    'Button 3 Position': {\n      control: {\n        type: 'radio'\n      },\n      options: ['left', 'right', 'none']\n    },\n    'Button 3 Text': {\n      control: {\n        type: 'text'\n      }\n    },\n    'Button 3 Mode': {\n      control: {\n        type: 'select'\n      },\n      options: ['primary', 'secondary', 'tertiary', 'dangerFilled', 'dangerOutlined']\n    }\n  },\n  args: {\n    'Button 1 Text': 'Save',\n    'Button 1 Mode': 'primary',\n    'Button 2 Text': 'Cancel',\n    'Button 2 Mode': 'secondary',\n    'Button 3 Position': 'none',\n    'Button 3 Text': 'Action',\n    'Button 3 Mode': 'dangerFilled'\n  }\n};\nconst StyledSidebarWithTabs = styled(Sidebar)<{\n  tabPosition: TabsProps['tabPosition'];\n}>`\n  .ant-drawer-body {\n    padding: ${props => props.tabPosition === 'left' ? '0' : '24px 24px 0 24px'};\n  }\n`;\nconst StyledTabs = styled(Tabs)`\n  .ant-tabs-left .ant-tabs-tabpane {\n    padding: 24px;\n  }\n\n  .ant-tabs-top > .ant-tabs-nav {\n    margin-bottom: 24px;\n  }\n`;\ntype WithTabsProps = SidebarProps & {\n  tabPosition: TabsProps['tabPosition'];\n};\nexport const WithNavigation: StoryObj<WithTabsProps> = {\n  render: ({\n    tabPosition,\n    ...props\n  }: WithTabsProps) => {\n    const [isOpen, setIsOpen] = useState(false);\n    return <>\n        <Button onClick={() => setIsOpen(true)}>Open</Button>\n        <StyledSidebarWithTabs {...props} tabPosition={tabPosition} title=\"Sidebar\" visible={isOpen} onClose={() => setIsOpen(!isOpen)}>\n          <StyledTabs tabPosition={tabPosition}>\n            <Tabs.TabPane tab=\"Tab 1\" key=\"1\">\n              Content of Tab Pane 1\n            </Tabs.TabPane>\n            <Tabs.TabPane tab=\"Tab 2\" key=\"2\">\n              Content of Tab Pane 2\n            </Tabs.TabPane>\n            <Tabs.TabPane tab=\"Tab 3\" key=\"3\">\n              Content of Tab Pane 3\n            </Tabs.TabPane>\n          </StyledTabs>\n        </StyledSidebarWithTabs>\n      </>;\n  },\n  argTypes: {\n    tabPosition: {\n      control: {\n        type: 'radio'\n      },\n      options: ['left', 'top']\n    },\n    ...sbHideControls(['size'])\n  },\n  args: {\n    tabPosition: 'left',\n    size: 'large',\n    subHeader: <div style={{\n      padding: '0 24px'\n    }}>\n        <Toolbar left={itemsLeft} right={itemsRight} />\n      </div>,\n    footer: <FooterContainer>\n        <Button mode=\"primary\">Save</Button>\n        <Button mode=\"secondary\">Cancel</Button>\n      </FooterContainer>\n  }\n};\nconst ButtonGroup = styled.div`\n  display: grid;\n  grid-gap: 10px;\n  position: fixed;\n  background: white;\n  z-index: 9999;\n  padding: 8px;\n  left: 20px;\n  bottom: 20px;\n`;\nexport const Overlap: StoryObj = {\n  render: () => {\n    const [sizes, setSizes] = React.useState<{\n      [key: string]: {\n        size: SidebarSize | 'flex';\n        visible: boolean;\n      };\n    }>({});\n    const buttons: (SidebarSize | 'flex')[] = [Size.ExtraSmall, Size.Small, Size.Medium, Size.Large, 'flex'];\n    return <div>\n        <ButtonGroup>\n          {buttons.map(size => <Button key={size} onClick={() => {\n          const id = uuidv4();\n          setSizes({\n            ...sizes,\n            [id]: {\n              size,\n              visible: false\n            }\n          });\n          setTimeout(() => {\n            setSizes({\n              ...sizes,\n              [id]: {\n                size,\n                visible: true\n              }\n            });\n          }, 0);\n        }}>\n              Add {size}\n            </Button>)}\n        </ButtonGroup>\n        {Object.entries(sizes).map(([key, {\n        size,\n        visible\n      }], index) => <Sidebar key={key} size={size === 'flex' ? 'medium' : size} flex={size === 'flex'} visible={visible} onClose={() => setSizes({\n        ...sizes,\n        [key]: {\n          size,\n          visible: false\n        }\n      })} title=\"Sidebar\">\n            <Text>\n              {size} {index}\n            </Text>\n          </Sidebar>)}\n      </div>;\n  }\n};\nexport const CloseConfirmation: StoryObj = {\n  render: () => {\n    const [isOpen, setIsOpen] = React.useState(false);\n    const [showModal, setShowModal] = React.useState(false);\n    return <>\n        <Button onClick={() => setIsOpen(true)}>Open</Button>\n        <Modal visible={showModal} mode=\"default\" header=\"Подтверждение закрытия\" content=\"Вы действительно хотите закрыть сайдбар?\" onCancel={() => setShowModal(false)} actions={{\n        FIRST_ACTION: {\n          text: 'OK',\n          mode: 'primary',\n          onClick: () => {\n            setIsOpen(false);\n            setShowModal(false);\n          }\n        },\n        SECOND_ACTION: {\n          text: 'Cancel',\n          mode: 'secondary',\n          onClick: () => setShowModal(false)\n        }\n      }} />\n        <Sidebar mask={!showModal} size={Size.Medium} visible={isOpen} onClose={() => setShowModal(true)} title=\"Sidebar\">\n          <Text>Content</Text>\n        </Sidebar>\n      </>;\n  }\n};\nBasic.parameters = {\n  ...Basic.parameters,\n  docs: {\n    ...Basic.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: (args: SidebarWithButtonProps) => <SidebarWithButton {...args} />\\n}\",\n      ...Basic.parameters?.docs?.source\n    }\n  }\n};\nWithHeaderActions.parameters = {\n  ...WithHeaderActions.parameters,\n  docs: {\n    ...WithHeaderActions.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: (args: SidebarWithButtonProps) => <SidebarWithButton {...args} />,\\n  args: {\\n    headerActions: <Space size={8}>\\n        <ActionButton size=\\\"large\\\" icon={<Youtube />} />\\n        <ActionButton size=\\\"large\\\" icon={<Help />} />\\n      </Space>\\n  }\\n}\",\n      ...WithHeaderActions.parameters?.docs?.source\n    }\n  }\n};\nWithSubtitle.parameters = {\n  ...WithSubtitle.parameters,\n  docs: {\n    ...WithSubtitle.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: (args: SidebarWithButtonProps) => <SidebarWithButton {...args} />,\\n  args: {\\n    subtitle: 'Sidebar 1200',\\n    titlePostfix: <div>\\n        <Badge count={10} />\\n      </div>,\\n    titlePrefix: <Star />\\n  }\\n}\",\n      ...WithSubtitle.parameters?.docs?.source\n    }\n  }\n};\nWithFixedElements.parameters = {\n  ...WithFixedElements.parameters,\n  docs: {\n    ...WithFixedElements.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: (args: SidebarWithButtonProps) => <SidebarWithButton {...args} />,\\n  args: {\\n    subHeader: <div style={{\\n      padding: '0 24px'\\n    }}>\\n        <Toolbar left={itemsLeft} right={itemsRight} />\\n      </div>,\\n    children: <div>\\n        <p style={{\\n        height: '200vh'\\n      }}>Scrollable content</p>\\n      </div>\\n  }\\n}\",\n      ...WithFixedElements.parameters?.docs?.source\n    }\n  }\n};\nWithoutOverlay.parameters = {\n  ...WithoutOverlay.parameters,\n  docs: {\n    ...WithoutOverlay.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: (args: SidebarWithButtonProps) => <SidebarWithButton {...args} />,\\n  args: {\\n    mask: false\\n  }\\n}\",\n      ...WithoutOverlay.parameters?.docs?.source\n    }\n  }\n};\nSizes.parameters = {\n  ...Sizes.parameters,\n  docs: {\n    ...Sizes.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: (args: SidebarProps) => {\\n    const sizes: SidebarSize[] = [Size.ExtraSmall, Size.Small, Size.Medium, Size.Large];\\n    return <SidebarsContainer>\\n        {sizes.map(size => <SidebarWithButton key={size} size={size} buttonText={size} {...args} />)}\\n        <SidebarWithButton key={'flex'} buttonText={'flex'} flex {...args} />\\n      </SidebarsContainer>;\\n  }\\n}\",\n      ...Sizes.parameters?.docs?.source\n    }\n  }\n};\nWithFooter.parameters = {\n  ...WithFooter.parameters,\n  docs: {\n    ...WithFooter.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: (args: WithFooterProps) => <SidebarWithButton footer={<FooterContainer>\\n          <Button mode={args['Button 1 Mode']}>{args['Button 1 Text']}</Button>\\n          <Button mode={args['Button 2 Mode']}>{args['Button 2 Text']}</Button>\\n          {args['Button 3 Position'] !== 'none' && <RightSide position={args['Button 3 Position']}>\\n              <Button mode={args['Button 3 Mode']}>\\n                {args['Button 3 Text']}\\n              </Button>\\n            </RightSide>}\\n        </FooterContainer>} {...args} />,\\n  argTypes: {\\n    'Button 1 Text': {\\n      control: {\\n        type: 'text'\\n      }\\n    },\\n    'Button 1 Mode': {\\n      control: {\\n        type: 'select'\\n      },\\n      options: ['primary', 'secondary', 'tertiary', 'dangerFilled', 'dangerOutlined']\\n    },\\n    'Button 2 Text': {\\n      control: {\\n        type: 'text'\\n      }\\n    },\\n    'Button 2 Mode': {\\n      control: {\\n        type: 'select'\\n      },\\n      options: ['primary', 'secondary', 'tertiary', 'dangerFilled', 'dangerOutlined']\\n    },\\n    'Button 3 Position': {\\n      control: {\\n        type: 'radio'\\n      },\\n      options: ['left', 'right', 'none']\\n    },\\n    'Button 3 Text': {\\n      control: {\\n        type: 'text'\\n      }\\n    },\\n    'Button 3 Mode': {\\n      control: {\\n        type: 'select'\\n      },\\n      options: ['primary', 'secondary', 'tertiary', 'dangerFilled', 'dangerOutlined']\\n    }\\n  },\\n  args: {\\n    'Button 1 Text': 'Save',\\n    'Button 1 Mode': 'primary',\\n    'Button 2 Text': 'Cancel',\\n    'Button 2 Mode': 'secondary',\\n    'Button 3 Position': 'none',\\n    'Button 3 Text': 'Action',\\n    'Button 3 Mode': 'dangerFilled'\\n  }\\n}\",\n      ...WithFooter.parameters?.docs?.source\n    }\n  }\n};\nWithNavigation.parameters = {\n  ...WithNavigation.parameters,\n  docs: {\n    ...WithNavigation.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: ({\\n    tabPosition,\\n    ...props\\n  }: WithTabsProps) => {\\n    const [isOpen, setIsOpen] = useState(false);\\n    return <>\\n        <Button onClick={() => setIsOpen(true)}>Open</Button>\\n        <StyledSidebarWithTabs {...props} tabPosition={tabPosition} title=\\\"Sidebar\\\" visible={isOpen} onClose={() => setIsOpen(!isOpen)}>\\n          <StyledTabs tabPosition={tabPosition}>\\n            <Tabs.TabPane tab=\\\"Tab 1\\\" key=\\\"1\\\">\\n              Content of Tab Pane 1\\n            </Tabs.TabPane>\\n            <Tabs.TabPane tab=\\\"Tab 2\\\" key=\\\"2\\\">\\n              Content of Tab Pane 2\\n            </Tabs.TabPane>\\n            <Tabs.TabPane tab=\\\"Tab 3\\\" key=\\\"3\\\">\\n              Content of Tab Pane 3\\n            </Tabs.TabPane>\\n          </StyledTabs>\\n        </StyledSidebarWithTabs>\\n      </>;\\n  },\\n  argTypes: {\\n    tabPosition: {\\n      control: {\\n        type: 'radio'\\n      },\\n      options: ['left', 'top']\\n    },\\n    ...sbHideControls(['size'])\\n  },\\n  args: {\\n    tabPosition: 'left',\\n    size: 'large',\\n    subHeader: <div style={{\\n      padding: '0 24px'\\n    }}>\\n        <Toolbar left={itemsLeft} right={itemsRight} />\\n      </div>,\\n    footer: <FooterContainer>\\n        <Button mode=\\\"primary\\\">Save</Button>\\n        <Button mode=\\\"secondary\\\">Cancel</Button>\\n      </FooterContainer>\\n  }\\n}\",\n      ...WithNavigation.parameters?.docs?.source\n    }\n  }\n};\nOverlap.parameters = {\n  ...Overlap.parameters,\n  docs: {\n    ...Overlap.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => {\\n    const [sizes, setSizes] = React.useState<{\\n      [key: string]: {\\n        size: SidebarSize | 'flex';\\n        visible: boolean;\\n      };\\n    }>({});\\n    const buttons: (SidebarSize | 'flex')[] = [Size.ExtraSmall, Size.Small, Size.Medium, Size.Large, 'flex'];\\n    return <div>\\n        <ButtonGroup>\\n          {buttons.map(size => <Button key={size} onClick={() => {\\n          const id = uuidv4();\\n          setSizes({\\n            ...sizes,\\n            [id]: {\\n              size,\\n              visible: false\\n            }\\n          });\\n          setTimeout(() => {\\n            setSizes({\\n              ...sizes,\\n              [id]: {\\n                size,\\n                visible: true\\n              }\\n            });\\n          }, 0);\\n        }}>\\n              Add {size}\\n            </Button>)}\\n        </ButtonGroup>\\n        {Object.entries(sizes).map(([key, {\\n        size,\\n        visible\\n      }], index) => <Sidebar key={key} size={size === 'flex' ? 'medium' : size} flex={size === 'flex'} visible={visible} onClose={() => setSizes({\\n        ...sizes,\\n        [key]: {\\n          size,\\n          visible: false\\n        }\\n      })} title=\\\"Sidebar\\\">\\n            <Text>\\n              {size} {index}\\n            </Text>\\n          </Sidebar>)}\\n      </div>;\\n  }\\n}\",\n      ...Overlap.parameters?.docs?.source\n    }\n  }\n};\nCloseConfirmation.parameters = {\n  ...CloseConfirmation.parameters,\n  docs: {\n    ...CloseConfirmation.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => {\\n    const [isOpen, setIsOpen] = React.useState(false);\\n    const [showModal, setShowModal] = React.useState(false);\\n    return <>\\n        <Button onClick={() => setIsOpen(true)}>Open</Button>\\n        <Modal visible={showModal} mode=\\\"default\\\" header=\\\"\\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0436\\u0434\\u0435\\u043D\\u0438\\u0435 \\u0437\\u0430\\u043A\\u0440\\u044B\\u0442\\u0438\\u044F\\\" content=\\\"\\u0412\\u044B \\u0434\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E \\u0445\\u043E\\u0442\\u0438\\u0442\\u0435 \\u0437\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C \\u0441\\u0430\\u0439\\u0434\\u0431\\u0430\\u0440?\\\" onCancel={() => setShowModal(false)} actions={{\\n        FIRST_ACTION: {\\n          text: 'OK',\\n          mode: 'primary',\\n          onClick: () => {\\n            setIsOpen(false);\\n            setShowModal(false);\\n          }\\n        },\\n        SECOND_ACTION: {\\n          text: 'Cancel',\\n          mode: 'secondary',\\n          onClick: () => setShowModal(false)\\n        }\\n      }} />\\n        <Sidebar mask={!showModal} size={Size.Medium} visible={isOpen} onClose={() => setShowModal(true)} title=\\\"Sidebar\\\">\\n          <Text>Content</Text>\\n        </Sidebar>\\n      </>;\\n  }\\n}\",\n      ...CloseConfirmation.parameters?.docs?.source\n    }\n  }\n};",locationsMap:{basic:{startLoc:{col:38,line:58},endLoc:{col:1,line:60},startBody:{col:38,line:58},endBody:{col:1,line:60}},"with-header-actions":{startLoc:{col:50,line:61},endLoc:{col:1,line:69},startBody:{col:50,line:61},endBody:{col:1,line:69}},"with-subtitle":{startLoc:{col:45,line:70},endLoc:{col:1,line:79},startBody:{col:45,line:70},endBody:{col:1,line:79}},"with-fixed-elements":{startLoc:{col:43,line:80},endLoc:{col:1,line:94},startBody:{col:43,line:80},endBody:{col:1,line:94}},"without-overlay":{startLoc:{col:47,line:95},endLoc:{col:1,line:100},startBody:{col:47,line:95},endBody:{col:1,line:100}},sizes:{startLoc:{col:38,line:105},endLoc:{col:1,line:113},startBody:{col:38,line:105},endBody:{col:1,line:113}},"with-footer":{startLoc:{col:53,line:132},endLoc:{col:1,line:192},startBody:{col:53,line:132},endBody:{col:1,line:192}},"with-navigation":{startLoc:{col:55,line:212},endLoc:{col:1,line:257},startBody:{col:55,line:212},endBody:{col:1,line:257}},overlap:{startLoc:{col:33,line:268},endLoc:{col:1,line:317},startBody:{col:33,line:268},endBody:{col:1,line:317}},"close-confirmation":{startLoc:{col:43,line:318},endLoc:{col:1,line:344},startBody:{col:43,line:318},endBody:{col:1,line:344}}}},badges:[_badges.badges.stable,_badges.badges.needsDesignReview],docs:{page:(0,_withMeta.withMeta)(_meta.default)},design:_meta.default.figmaView}};exports.default=meta;const SidebarWithButton=props=>{const[isOpen,setIsOpen]=(0,_react.useState)(!1);return(0,_jsxRuntime.jsxs)(_jsxRuntime.Fragment,{children:[(0,_jsxRuntime.jsx)(_button.Button,{onClick:()=>setIsOpen(!0),children:props.buttonText||"Open"}),(0,_jsxRuntime.jsx)(_Sidebar.Sidebar,{...props,visible:isOpen,onClose:()=>setIsOpen(!1),title:"Sidebar",children:props.children||(0,_jsxRuntime.jsx)(_typography.Text,{children:"Content"})})]})},Basic=exports.Basic={render:args=>(0,_jsxRuntime.jsx)(SidebarWithButton,{...args})},WithHeaderActions=exports.WithHeaderActions={render:args=>(0,_jsxRuntime.jsx)(SidebarWithButton,{...args}),args:{headerActions:(0,_jsxRuntime.jsxs)(_space.Space,{size:8,children:[(0,_jsxRuntime.jsx)(_actionButton.ActionButton,{size:"large",icon:(0,_jsxRuntime.jsx)(_.Youtube,{})}),(0,_jsxRuntime.jsx)(_actionButton.ActionButton,{size:"large",icon:(0,_jsxRuntime.jsx)(_.Help,{})})]})}},WithSubtitle=exports.WithSubtitle={render:args=>(0,_jsxRuntime.jsx)(SidebarWithButton,{...args}),args:{subtitle:"Sidebar 1200",titlePostfix:(0,_jsxRuntime.jsx)("div",{children:(0,_jsxRuntime.jsx)(_badge.Badge,{count:10})}),titlePrefix:(0,_jsxRuntime.jsx)(_2.Star,{})}},WithFixedElements=exports.WithFixedElements={render:args=>(0,_jsxRuntime.jsx)(SidebarWithButton,{...args}),args:{subHeader:(0,_jsxRuntime.jsx)("div",{style:{padding:"0 24px"},children:(0,_jsxRuntime.jsx)(_toolbar.Toolbar,{left:_Toolbar.itemsLeft,right:_Toolbar.itemsRight})}),children:(0,_jsxRuntime.jsx)("div",{children:(0,_jsxRuntime.jsx)("p",{style:{height:"200vh"},children:"Scrollable content"})})}},WithoutOverlay=exports.WithoutOverlay={render:args=>(0,_jsxRuntime.jsx)(SidebarWithButton,{...args}),args:{mask:!1}},SidebarsContainer=_styledComponents.default.div.withConfig({displayName:"Sidebarstories__SidebarsContainer",componentId:"sc-1uzvshu-0"})(["display:flex;gap:12px;"]),Sizes=exports.Sizes={render:args=>{const sizes=[_types.Size.ExtraSmall,_types.Size.Small,_types.Size.Medium,_types.Size.Large];return(0,_jsxRuntime.jsxs)(SidebarsContainer,{children:[sizes.map((size=>(0,_jsxRuntime.jsx)(SidebarWithButton,{size,buttonText:size,...args},size))),(0,_jsxRuntime.jsx)(SidebarWithButton,{buttonText:"flex",flex:!0,...args},"flex")]})}},FooterContainer=_styledComponents.default.div.withConfig({displayName:"Sidebarstories__FooterContainer",componentId:"sc-1uzvshu-1"})(["display:flex;gap:12px;"]),RightSide=_styledComponents.default.div.withConfig({displayName:"Sidebarstories__RightSide",componentId:"sc-1uzvshu-2"})(["margin-left:",";"],(props=>"right"===props.position?"auto":"")),WithFooter=exports.WithFooter={render:args=>(0,_jsxRuntime.jsx)(SidebarWithButton,{footer:(0,_jsxRuntime.jsxs)(FooterContainer,{children:[(0,_jsxRuntime.jsx)(_button.Button,{mode:args["Button 1 Mode"],children:args["Button 1 Text"]}),(0,_jsxRuntime.jsx)(_button.Button,{mode:args["Button 2 Mode"],children:args["Button 2 Text"]}),"none"!==args["Button 3 Position"]&&(0,_jsxRuntime.jsx)(RightSide,{position:args["Button 3 Position"],children:(0,_jsxRuntime.jsx)(_button.Button,{mode:args["Button 3 Mode"],children:args["Button 3 Text"]})})]}),...args}),argTypes:{"Button 1 Text":{control:{type:"text"}},"Button 1 Mode":{control:{type:"select"},options:["primary","secondary","tertiary","dangerFilled","dangerOutlined"]},"Button 2 Text":{control:{type:"text"}},"Button 2 Mode":{control:{type:"select"},options:["primary","secondary","tertiary","dangerFilled","dangerOutlined"]},"Button 3 Position":{control:{type:"radio"},options:["left","right","none"]},"Button 3 Text":{control:{type:"text"}},"Button 3 Mode":{control:{type:"select"},options:["primary","secondary","tertiary","dangerFilled","dangerOutlined"]}},args:{"Button 1 Text":"Save","Button 1 Mode":"primary","Button 2 Text":"Cancel","Button 2 Mode":"secondary","Button 3 Position":"none","Button 3 Text":"Action","Button 3 Mode":"dangerFilled"}},StyledSidebarWithTabs=(0,_styledComponents.default)(_Sidebar.Sidebar).withConfig({displayName:"Sidebarstories__StyledSidebarWithTabs",componentId:"sc-1uzvshu-3"})([".ant-drawer-body{padding:",";}"],(props=>"left"===props.tabPosition?"0":"24px 24px 0 24px")),StyledTabs=(0,_styledComponents.default)(_tabs.Tabs).withConfig({displayName:"Sidebarstories__StyledTabs",componentId:"sc-1uzvshu-4"})([".ant-tabs-left .ant-tabs-tabpane{padding:24px;}.ant-tabs-top > .ant-tabs-nav{margin-bottom:24px;}"]),WithNavigation=exports.WithNavigation={render:_ref=>{let{tabPosition,...props}=_ref;const[isOpen,setIsOpen]=(0,_react.useState)(!1);return(0,_jsxRuntime.jsxs)(_jsxRuntime.Fragment,{children:[(0,_jsxRuntime.jsx)(_button.Button,{onClick:()=>setIsOpen(!0),children:"Open"}),(0,_jsxRuntime.jsx)(StyledSidebarWithTabs,{...props,tabPosition,title:"Sidebar",visible:isOpen,onClose:()=>setIsOpen(!isOpen),children:(0,_jsxRuntime.jsxs)(StyledTabs,{tabPosition,children:[(0,_jsxRuntime.jsx)(_tabs.Tabs.TabPane,{tab:"Tab 1",children:"Content of Tab Pane 1"},"1"),(0,_jsxRuntime.jsx)(_tabs.Tabs.TabPane,{tab:"Tab 2",children:"Content of Tab Pane 2"},"2"),(0,_jsxRuntime.jsx)(_tabs.Tabs.TabPane,{tab:"Tab 3",children:"Content of Tab Pane 3"},"3")]})})]})},argTypes:{tabPosition:{control:{type:"radio"},options:["left","top"]},...(0,_storybookHelpers.sbHideControls)(["size"])},args:{tabPosition:"left",size:"large",subHeader:(0,_jsxRuntime.jsx)("div",{style:{padding:"0 24px"},children:(0,_jsxRuntime.jsx)(_toolbar.Toolbar,{left:_Toolbar.itemsLeft,right:_Toolbar.itemsRight})}),footer:(0,_jsxRuntime.jsxs)(FooterContainer,{children:[(0,_jsxRuntime.jsx)(_button.Button,{mode:"primary",children:"Save"}),(0,_jsxRuntime.jsx)(_button.Button,{mode:"secondary",children:"Cancel"})]})}},ButtonGroup=_styledComponents.default.div.withConfig({displayName:"Sidebarstories__ButtonGroup",componentId:"sc-1uzvshu-5"})(["display:grid;grid-gap:10px;position:fixed;background:white;z-index:9999;padding:8px;left:20px;bottom:20px;"]),Overlap=exports.Overlap={render:()=>{const[sizes,setSizes]=_react.default.useState({}),buttons=[_types.Size.ExtraSmall,_types.Size.Small,_types.Size.Medium,_types.Size.Large,"flex"];return(0,_jsxRuntime.jsxs)("div",{children:[(0,_jsxRuntime.jsx)(ButtonGroup,{children:buttons.map((size=>(0,_jsxRuntime.jsxs)(_button.Button,{onClick:()=>{const id=(0,_uuid.v4)();setSizes({...sizes,[id]:{size,visible:!1}}),setTimeout((()=>{setSizes({...sizes,[id]:{size,visible:!0}})}),0)},children:["Add ",size]},size)))}),Object.entries(sizes).map(((_ref2,index)=>{let[key,{size,visible}]=_ref2;return(0,_jsxRuntime.jsx)(_Sidebar.Sidebar,{size:"flex"===size?"medium":size,flex:"flex"===size,visible,onClose:()=>setSizes({...sizes,[key]:{size,visible:!1}}),title:"Sidebar",children:(0,_jsxRuntime.jsxs)(_typography.Text,{children:[size," ",index]})},key)}))]})}},CloseConfirmation=exports.CloseConfirmation={render:()=>{const[isOpen,setIsOpen]=_react.default.useState(!1),[showModal,setShowModal]=_react.default.useState(!1);return(0,_jsxRuntime.jsxs)(_jsxRuntime.Fragment,{children:[(0,_jsxRuntime.jsx)(_button.Button,{onClick:()=>setIsOpen(!0),children:"Open"}),(0,_jsxRuntime.jsx)(_modal.Modal,{visible:showModal,mode:"default",header:"Подтверждение закрытия",content:"Вы действительно хотите закрыть сайдбар?",onCancel:()=>setShowModal(!1),actions:{FIRST_ACTION:{text:"OK",mode:"primary",onClick:()=>{setIsOpen(!1),setShowModal(!1)}},SECOND_ACTION:{text:"Cancel",mode:"secondary",onClick:()=>setShowModal(!1)}}}),(0,_jsxRuntime.jsx)(_Sidebar.Sidebar,{mask:!showModal,size:_types.Size.Medium,visible:isOpen,onClose:()=>setShowModal(!0),title:"Sidebar",children:(0,_jsxRuntime.jsx)(_typography.Text,{children:"Content"})})]})}};Basic.parameters={...Basic.parameters,docs:{...null===(_Basic$parameters=Basic.parameters)||void 0===_Basic$parameters?void 0:_Basic$parameters.docs,source:{originalSource:"{\n  render: (args: SidebarWithButtonProps) => <SidebarWithButton {...args} />\n}",...null===(_Basic$parameters2=Basic.parameters)||void 0===_Basic$parameters2||null===(_Basic$parameters2$do=_Basic$parameters2.docs)||void 0===_Basic$parameters2$do?void 0:_Basic$parameters2$do.source}}},WithHeaderActions.parameters={...WithHeaderActions.parameters,docs:{...null===(_WithHeaderActions$pa=WithHeaderActions.parameters)||void 0===_WithHeaderActions$pa?void 0:_WithHeaderActions$pa.docs,source:{originalSource:'{\n  render: (args: SidebarWithButtonProps) => <SidebarWithButton {...args} />,\n  args: {\n    headerActions: <Space size={8}>\n        <ActionButton size="large" icon={<Youtube />} />\n        <ActionButton size="large" icon={<Help />} />\n      </Space>\n  }\n}',...null===(_WithHeaderActions$pa2=WithHeaderActions.parameters)||void 0===_WithHeaderActions$pa2||null===(_WithHeaderActions$pa3=_WithHeaderActions$pa2.docs)||void 0===_WithHeaderActions$pa3?void 0:_WithHeaderActions$pa3.source}}},WithSubtitle.parameters={...WithSubtitle.parameters,docs:{...null===(_WithSubtitle$paramet=WithSubtitle.parameters)||void 0===_WithSubtitle$paramet?void 0:_WithSubtitle$paramet.docs,source:{originalSource:"{\n  render: (args: SidebarWithButtonProps) => <SidebarWithButton {...args} />,\n  args: {\n    subtitle: 'Sidebar 1200',\n    titlePostfix: <div>\n        <Badge count={10} />\n      </div>,\n    titlePrefix: <Star />\n  }\n}",...null===(_WithSubtitle$paramet2=WithSubtitle.parameters)||void 0===_WithSubtitle$paramet2||null===(_WithSubtitle$paramet3=_WithSubtitle$paramet2.docs)||void 0===_WithSubtitle$paramet3?void 0:_WithSubtitle$paramet3.source}}},WithFixedElements.parameters={...WithFixedElements.parameters,docs:{...null===(_WithFixedElements$pa=WithFixedElements.parameters)||void 0===_WithFixedElements$pa?void 0:_WithFixedElements$pa.docs,source:{originalSource:"{\n  render: (args: SidebarWithButtonProps) => <SidebarWithButton {...args} />,\n  args: {\n    subHeader: <div style={{\n      padding: '0 24px'\n    }}>\n        <Toolbar left={itemsLeft} right={itemsRight} />\n      </div>,\n    children: <div>\n        <p style={{\n        height: '200vh'\n      }}>Scrollable content</p>\n      </div>\n  }\n}",...null===(_WithFixedElements$pa2=WithFixedElements.parameters)||void 0===_WithFixedElements$pa2||null===(_WithFixedElements$pa3=_WithFixedElements$pa2.docs)||void 0===_WithFixedElements$pa3?void 0:_WithFixedElements$pa3.source}}},WithoutOverlay.parameters={...WithoutOverlay.parameters,docs:{...null===(_WithoutOverlay$param=WithoutOverlay.parameters)||void 0===_WithoutOverlay$param?void 0:_WithoutOverlay$param.docs,source:{originalSource:"{\n  render: (args: SidebarWithButtonProps) => <SidebarWithButton {...args} />,\n  args: {\n    mask: false\n  }\n}",...null===(_WithoutOverlay$param2=WithoutOverlay.parameters)||void 0===_WithoutOverlay$param2||null===(_WithoutOverlay$param3=_WithoutOverlay$param2.docs)||void 0===_WithoutOverlay$param3?void 0:_WithoutOverlay$param3.source}}},Sizes.parameters={...Sizes.parameters,docs:{...null===(_Sizes$parameters=Sizes.parameters)||void 0===_Sizes$parameters?void 0:_Sizes$parameters.docs,source:{originalSource:"{\n  render: (args: SidebarProps) => {\n    const sizes: SidebarSize[] = [Size.ExtraSmall, Size.Small, Size.Medium, Size.Large];\n    return <SidebarsContainer>\n        {sizes.map(size => <SidebarWithButton key={size} size={size} buttonText={size} {...args} />)}\n        <SidebarWithButton key={'flex'} buttonText={'flex'} flex {...args} />\n      </SidebarsContainer>;\n  }\n}",...null===(_Sizes$parameters2=Sizes.parameters)||void 0===_Sizes$parameters2||null===(_Sizes$parameters2$do=_Sizes$parameters2.docs)||void 0===_Sizes$parameters2$do?void 0:_Sizes$parameters2$do.source}}},WithFooter.parameters={...WithFooter.parameters,docs:{...null===(_WithFooter$parameter=WithFooter.parameters)||void 0===_WithFooter$parameter?void 0:_WithFooter$parameter.docs,source:{originalSource:"{\n  render: (args: WithFooterProps) => <SidebarWithButton footer={<FooterContainer>\n          <Button mode={args['Button 1 Mode']}>{args['Button 1 Text']}</Button>\n          <Button mode={args['Button 2 Mode']}>{args['Button 2 Text']}</Button>\n          {args['Button 3 Position'] !== 'none' && <RightSide position={args['Button 3 Position']}>\n              <Button mode={args['Button 3 Mode']}>\n                {args['Button 3 Text']}\n              </Button>\n            </RightSide>}\n        </FooterContainer>} {...args} />,\n  argTypes: {\n    'Button 1 Text': {\n      control: {\n        type: 'text'\n      }\n    },\n    'Button 1 Mode': {\n      control: {\n        type: 'select'\n      },\n      options: ['primary', 'secondary', 'tertiary', 'dangerFilled', 'dangerOutlined']\n    },\n    'Button 2 Text': {\n      control: {\n        type: 'text'\n      }\n    },\n    'Button 2 Mode': {\n      control: {\n        type: 'select'\n      },\n      options: ['primary', 'secondary', 'tertiary', 'dangerFilled', 'dangerOutlined']\n    },\n    'Button 3 Position': {\n      control: {\n        type: 'radio'\n      },\n      options: ['left', 'right', 'none']\n    },\n    'Button 3 Text': {\n      control: {\n        type: 'text'\n      }\n    },\n    'Button 3 Mode': {\n      control: {\n        type: 'select'\n      },\n      options: ['primary', 'secondary', 'tertiary', 'dangerFilled', 'dangerOutlined']\n    }\n  },\n  args: {\n    'Button 1 Text': 'Save',\n    'Button 1 Mode': 'primary',\n    'Button 2 Text': 'Cancel',\n    'Button 2 Mode': 'secondary',\n    'Button 3 Position': 'none',\n    'Button 3 Text': 'Action',\n    'Button 3 Mode': 'dangerFilled'\n  }\n}",...null===(_WithFooter$parameter2=WithFooter.parameters)||void 0===_WithFooter$parameter2||null===(_WithFooter$parameter3=_WithFooter$parameter2.docs)||void 0===_WithFooter$parameter3?void 0:_WithFooter$parameter3.source}}},WithNavigation.parameters={...WithNavigation.parameters,docs:{...null===(_WithNavigation$param=WithNavigation.parameters)||void 0===_WithNavigation$param?void 0:_WithNavigation$param.docs,source:{originalSource:'{\n  render: ({\n    tabPosition,\n    ...props\n  }: WithTabsProps) => {\n    const [isOpen, setIsOpen] = useState(false);\n    return <>\n        <Button onClick={() => setIsOpen(true)}>Open</Button>\n        <StyledSidebarWithTabs {...props} tabPosition={tabPosition} title="Sidebar" visible={isOpen} onClose={() => setIsOpen(!isOpen)}>\n          <StyledTabs tabPosition={tabPosition}>\n            <Tabs.TabPane tab="Tab 1" key="1">\n              Content of Tab Pane 1\n            </Tabs.TabPane>\n            <Tabs.TabPane tab="Tab 2" key="2">\n              Content of Tab Pane 2\n            </Tabs.TabPane>\n            <Tabs.TabPane tab="Tab 3" key="3">\n              Content of Tab Pane 3\n            </Tabs.TabPane>\n          </StyledTabs>\n        </StyledSidebarWithTabs>\n      </>;\n  },\n  argTypes: {\n    tabPosition: {\n      control: {\n        type: \'radio\'\n      },\n      options: [\'left\', \'top\']\n    },\n    ...sbHideControls([\'size\'])\n  },\n  args: {\n    tabPosition: \'left\',\n    size: \'large\',\n    subHeader: <div style={{\n      padding: \'0 24px\'\n    }}>\n        <Toolbar left={itemsLeft} right={itemsRight} />\n      </div>,\n    footer: <FooterContainer>\n        <Button mode="primary">Save</Button>\n        <Button mode="secondary">Cancel</Button>\n      </FooterContainer>\n  }\n}',...null===(_WithNavigation$param2=WithNavigation.parameters)||void 0===_WithNavigation$param2||null===(_WithNavigation$param3=_WithNavigation$param2.docs)||void 0===_WithNavigation$param3?void 0:_WithNavigation$param3.source}}},Overlap.parameters={...Overlap.parameters,docs:{...null===(_Overlap$parameters=Overlap.parameters)||void 0===_Overlap$parameters?void 0:_Overlap$parameters.docs,source:{originalSource:"{\n  render: () => {\n    const [sizes, setSizes] = React.useState<{\n      [key: string]: {\n        size: SidebarSize | 'flex';\n        visible: boolean;\n      };\n    }>({});\n    const buttons: (SidebarSize | 'flex')[] = [Size.ExtraSmall, Size.Small, Size.Medium, Size.Large, 'flex'];\n    return <div>\n        <ButtonGroup>\n          {buttons.map(size => <Button key={size} onClick={() => {\n          const id = uuidv4();\n          setSizes({\n            ...sizes,\n            [id]: {\n              size,\n              visible: false\n            }\n          });\n          setTimeout(() => {\n            setSizes({\n              ...sizes,\n              [id]: {\n                size,\n                visible: true\n              }\n            });\n          }, 0);\n        }}>\n              Add {size}\n            </Button>)}\n        </ButtonGroup>\n        {Object.entries(sizes).map(([key, {\n        size,\n        visible\n      }], index) => <Sidebar key={key} size={size === 'flex' ? 'medium' : size} flex={size === 'flex'} visible={visible} onClose={() => setSizes({\n        ...sizes,\n        [key]: {\n          size,\n          visible: false\n        }\n      })} title=\"Sidebar\">\n            <Text>\n              {size} {index}\n            </Text>\n          </Sidebar>)}\n      </div>;\n  }\n}",...null===(_Overlap$parameters2=Overlap.parameters)||void 0===_Overlap$parameters2||null===(_Overlap$parameters2$=_Overlap$parameters2.docs)||void 0===_Overlap$parameters2$?void 0:_Overlap$parameters2$.source}}},CloseConfirmation.parameters={...CloseConfirmation.parameters,docs:{...null===(_CloseConfirmation$pa=CloseConfirmation.parameters)||void 0===_CloseConfirmation$pa?void 0:_CloseConfirmation$pa.docs,source:{originalSource:"{\n  render: () => {\n    const [isOpen, setIsOpen] = React.useState(false);\n    const [showModal, setShowModal] = React.useState(false);\n    return <>\n        <Button onClick={() => setIsOpen(true)}>Open</Button>\n        <Modal visible={showModal} mode=\"default\" header=\"Подтверждение закрытия\" content=\"Вы действительно хотите закрыть сайдбар?\" onCancel={() => setShowModal(false)} actions={{\n        FIRST_ACTION: {\n          text: 'OK',\n          mode: 'primary',\n          onClick: () => {\n            setIsOpen(false);\n            setShowModal(false);\n          }\n        },\n        SECOND_ACTION: {\n          text: 'Cancel',\n          mode: 'secondary',\n          onClick: () => setShowModal(false)\n        }\n      }} />\n        <Sidebar mask={!showModal} size={Size.Medium} visible={isOpen} onClose={() => setShowModal(true)} title=\"Sidebar\">\n          <Text>Content</Text>\n        </Sidebar>\n      </>;\n  }\n}",...null===(_CloseConfirmation$pa2=CloseConfirmation.parameters)||void 0===_CloseConfirmation$pa2||null===(_CloseConfirmation$pa3=_CloseConfirmation$pa2.docs)||void 0===_CloseConfirmation$pa3?void 0:_CloseConfirmation$pa3.source}}};exports.__namedExportsOrder=["Basic","WithHeaderActions","WithSubtitle","WithFixedElements","WithoutOverlay","Sizes","WithFooter","WithNavigation","Overlap","CloseConfirmation"]},"./src/sidebar/__meta__/meta.json":module=>{module.exports=JSON.parse('{"dod":{"designTokens":true,"useThemedHook":true,"unitTests":true,"screenshotTests":false,"migration":true,"apiTable":true,"storybook":true,"designLink":true,"figmaView":true},"component":"Sidebar","description":"В качестве основы используется AntdDrawer из библиотеки Antd.","usage":"Боковая панель, область навигации. Появлется при нажатии на элемент с действием.","designLink":"https://www.figma.com/file/9hiN2DbkqbxbhR9EWRI1VK/B2B-Kit?node-id=1250%3A84457","figmaView":"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2F9hiN2DbkqbxbhR9EWRI1VK%2F01-%255BB2B%255D-Hexa-UI-Components%3Ftype%3Ddesign%26node-id%3D1250%253A8445%26mode%3Ddev"}')}}]);