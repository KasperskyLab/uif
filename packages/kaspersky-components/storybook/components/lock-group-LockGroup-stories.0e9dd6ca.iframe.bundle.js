"use strict";(self.webpackChunk_kaspersky_components=self.webpackChunk_kaspersky_components||[]).push([[1244],{"./src/lock-group/LockGroup.stories.tsx":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.__namedExportsOrder=exports.WithInformationTextNode=exports.WithInformationText=exports.Basic=void 0;var _Basic$parameters,_Basic$parameters2,_Basic$parameters2$do,_WithInformationText$,_WithInformationText$2,_WithInformationText$3,_WithInformationTextN,_WithInformationTextN2,_WithInformationTextN3,_react=function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u]}return n.default=e,t&&t.set(e,n),n}(__webpack_require__("./node_modules/react/index.js")),_styledComponents=function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}(__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js")),_addonKnobs=__webpack_require__("./node_modules/@storybook/addon-knobs/dist/index.js"),_typography=__webpack_require__("./src/typography/index.ts"),_input=__webpack_require__("./src/input/index.ts"),_LockGroup=__webpack_require__("./src/lock-group/LockGroup.tsx"),_jsxRuntime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap,t=new WeakMap;return(_getRequireWildcardCache=function(e){return e?t:r})(e)}const Wrapper=_styledComponents.default.div.withConfig({displayName:"LockGroupstories__Wrapper",componentId:"sc-f9c90u-0"})(["width:100%;"]),meta={parameters:{storySource:{source:"import React, { useState } from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport styled from 'styled-components';\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { Text } from '../typography';\nimport { Textbox } from '../input';\nimport { ILockGroupProps, LockGroup } from './LockGroup';\nconst Wrapper = styled.div`\n  width: 100%;\n`;\nconst meta: Meta = {\n  title: 'Molecules/LockGroup',\n  component: LockGroup,\n  decorators: [withKnobs],\n  args: {\n    title: 'Title'\n  }\n};\nexport default meta;\ntype Story = StoryObj<ILockGroupProps>;\nconst StoryDefaultRender = (args: ILockGroupProps) => {\n  const [isLockClosed, setIsLockClosed] = useState(false);\n  const [textValue, setTextValue] = useState('12345');\n  return <Wrapper>\n      <LockGroup {...args} isLockClosed={isLockClosed} onLockChange={checked => setIsLockClosed(checked)}>\n        <Textbox value={textValue} onChange={value => setTextValue(String(value))} />\n      </LockGroup>\n    </Wrapper>;\n};\nexport const Basic: Story = {\n  render: StoryDefaultRender.bind({}),\n  args: {\n    title: 'TITLE',\n    isGroupDisabled: false,\n    isLockDisabled: false,\n    statusText: 'statusText'\n  }\n};\nexport const WithInformationText: Story = {\n  render: StoryDefaultRender.bind({}),\n  args: {\n    informationText: 'informationText informationText informationText'\n  }\n};\nexport const WithInformationTextNode: Story = {\n  render: StoryDefaultRender.bind({}),\n  args: {\n    informationText: () => <Text>informationText informationText <a>Information link</a></Text>\n  }\n};\nBasic.parameters = {\n  ...Basic.parameters,\n  docs: {\n    ...Basic.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: StoryDefaultRender.bind({}),\\n  args: {\\n    title: 'TITLE',\\n    isGroupDisabled: false,\\n    isLockDisabled: false,\\n    statusText: 'statusText'\\n  }\\n}\",\n      ...Basic.parameters?.docs?.source\n    }\n  }\n};\nWithInformationText.parameters = {\n  ...WithInformationText.parameters,\n  docs: {\n    ...WithInformationText.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: StoryDefaultRender.bind({}),\\n  args: {\\n    informationText: 'informationText informationText informationText'\\n  }\\n}\",\n      ...WithInformationText.parameters?.docs?.source\n    }\n  }\n};\nWithInformationTextNode.parameters = {\n  ...WithInformationTextNode.parameters,\n  docs: {\n    ...WithInformationTextNode.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: StoryDefaultRender.bind({}),\\n  args: {\\n    informationText: () => <Text>informationText informationText <a>Information link</a></Text>\\n  }\\n}\",\n      ...WithInformationTextNode.parameters?.docs?.source\n    }\n  }\n};",locationsMap:{basic:{startLoc:{col:28,line:30},endLoc:{col:1,line:38},startBody:{col:28,line:30},endBody:{col:1,line:38}},"with-information-text":{startLoc:{col:42,line:39},endLoc:{col:1,line:44},startBody:{col:42,line:39},endBody:{col:1,line:44}},"with-information-text-node":{startLoc:{col:46,line:45},endLoc:{col:1,line:50},startBody:{col:46,line:45},endBody:{col:1,line:50}}}}},title:"Molecules/LockGroup",component:_LockGroup.LockGroup,decorators:[_addonKnobs.withKnobs],args:{title:"Title"}};exports.default=meta;const StoryDefaultRender=args=>{const[isLockClosed,setIsLockClosed]=(0,_react.useState)(!1),[textValue,setTextValue]=(0,_react.useState)("12345");return(0,_jsxRuntime.jsx)(Wrapper,{children:(0,_jsxRuntime.jsx)(_LockGroup.LockGroup,{...args,isLockClosed,onLockChange:checked=>setIsLockClosed(checked),children:(0,_jsxRuntime.jsx)(_input.Textbox,{value:textValue,onChange:value=>setTextValue(String(value))})})})};StoryDefaultRender.displayName="StoryDefaultRender";const Basic=exports.Basic={render:StoryDefaultRender.bind({}),args:{title:"TITLE",isGroupDisabled:!1,isLockDisabled:!1,statusText:"statusText"}},WithInformationText=exports.WithInformationText={render:StoryDefaultRender.bind({}),args:{informationText:"informationText informationText informationText"}},WithInformationTextNode=exports.WithInformationTextNode={render:StoryDefaultRender.bind({}),args:{informationText:()=>(0,_jsxRuntime.jsxs)(_typography.Text,{children:["informationText informationText ",(0,_jsxRuntime.jsx)("a",{children:"Information link"})]})}};Basic.parameters={...Basic.parameters,docs:{...null===(_Basic$parameters=Basic.parameters)||void 0===_Basic$parameters?void 0:_Basic$parameters.docs,source:{originalSource:"{\n  render: StoryDefaultRender.bind({}),\n  args: {\n    title: 'TITLE',\n    isGroupDisabled: false,\n    isLockDisabled: false,\n    statusText: 'statusText'\n  }\n}",...null===(_Basic$parameters2=Basic.parameters)||void 0===_Basic$parameters2||null===(_Basic$parameters2$do=_Basic$parameters2.docs)||void 0===_Basic$parameters2$do?void 0:_Basic$parameters2$do.source}}},WithInformationText.parameters={...WithInformationText.parameters,docs:{...null===(_WithInformationText$=WithInformationText.parameters)||void 0===_WithInformationText$?void 0:_WithInformationText$.docs,source:{originalSource:"{\n  render: StoryDefaultRender.bind({}),\n  args: {\n    informationText: 'informationText informationText informationText'\n  }\n}",...null===(_WithInformationText$2=WithInformationText.parameters)||void 0===_WithInformationText$2||null===(_WithInformationText$3=_WithInformationText$2.docs)||void 0===_WithInformationText$3?void 0:_WithInformationText$3.source}}},WithInformationTextNode.parameters={...WithInformationTextNode.parameters,docs:{...null===(_WithInformationTextN=WithInformationTextNode.parameters)||void 0===_WithInformationTextN?void 0:_WithInformationTextN.docs,source:{originalSource:"{\n  render: StoryDefaultRender.bind({}),\n  args: {\n    informationText: () => <Text>informationText informationText <a>Information link</a></Text>\n  }\n}",...null===(_WithInformationTextN2=WithInformationTextNode.parameters)||void 0===_WithInformationTextN2||null===(_WithInformationTextN3=_WithInformationTextN2.docs)||void 0===_WithInformationTextN3?void 0:_WithInformationTextN3.source}}};exports.__namedExportsOrder=["Basic","WithInformationText","WithInformationTextNode"]}}]);