"use strict";(self.webpackChunk_kaspersky_components=self.webpackChunk_kaspersky_components||[]).push([[6613],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./docs/ThemeConfig.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__page:()=>__page,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/react/index.js");var _Users_vostrik_Documents_projects_github_uif_ssh_uif_packages_kaspersky_components_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),_storybook_blocks__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");function _createMdxContent(props){const _components=Object.assign({h1:"h1",blockquote:"blockquote",p:"p",a:"a",code:"code",h2:"h2",pre:"pre"},(0,_Users_vostrik_Documents_projects_github_uif_ssh_uif_packages_kaspersky_components_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_2__.ah)(),props.components);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_storybook_blocks__WEBPACK_IMPORTED_MODULE_3__.h_,{title:"Docs/Конфигурирование THEME_CONFIG"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h1,{id:"theme_config",children:"THEME_CONFIG"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.blockquote,{children:["\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Перед чтением рекомендуется ознакомиться с разделом ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.a,{href:"?path=/story/docs-%D1%82%D0%B8%D0%BF%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D0%BE%D0%B2--docs",children:"Типизация компонентов"})]}),"\n"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"THEME_CONFIG"})," является главным хранилищем информации о дизайн-системе, в частности, о цветах и размерах всех компонентов.\nК нему обращается хук ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"useThemeComponent"})," и достает оттуда необходимые компоненту значения (подробнее об этом позже)."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"типизация",children:"Типизация"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Выглядит ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"THEME_CONFIG"})," так:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"/design-system/theme/themes/config.ts\n\nexport const THEME_CONFIG = {\n  [ThemeKey.Light]: LIGHT_THEME,\n  [ThemeKey.Dark]: DARK_THEME\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"LIGHT_THEME"})," и ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DARK_THEME"})," обладают одинаковой структурой, которая задается типом ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ThemeConfig"})]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"/design-system/types/Theme.ts\n\nexport type ThemeConfig = {\n  readonly key: ThemeKey,\n  readonly colors: typeof colors,\n  readonly shapes: {\n    readonly borderRadius: typeof BORDER_RADIUS\n  },\n  readonly spaces: typeof SPACES,\n  readonly components: {\n    readonly button: { ... },\n    readonly checkbox: { ... },\n    ...\n  }\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Нас интересует поле ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"components"}),", ключами которого являются названия компонентов. Представим себе абстрактный\nнесуществующий компонент ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Flower"}),". Тогда тип будет выглядеть так:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"/design-system/types/Theme.ts\n\nreadonly flower: {\n  colors: Record<FlowerMode, FlowerColorConfig>,\n  sizes: Record<FlowerSize, FlowerSizeConfig>\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Если у компонента нет цветового мода, то ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"colors: FlowerColorConfig"}),". Если у компонента нет разных размеров\n(small, medium etc.), значит у него не должно быть SizeConfig, а все размеры должны проставляться внутри\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"flowerCss.ts"}),".\nЭту запись можно упростить до эквивалентной:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"/design-system/types/Theme.ts\n\nreadonly flower: ComponentConfig<\n  Record<FlowerMode, FlowerColorConfig>,\n  Record<FlowerSize, FlowerSizeConfig>\n>\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Для примера возьмем ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"LIGHT_THEME"}),", для ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"DARK_THEME"})," все будет аналогично. ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"LIGHT_THEME"})," имеет тип ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"ThemeConfig"}),",\nописанный выше, а конфигурируется в ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"/design-system/theme/themes/light/index.ts"}),":"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"/design-system/theme/themes/light/index.ts\n\nimport { ThemeKey, ThemeConfig } from '@design-system/types'\nimport { COMMON_THEME } from '../common-theme'\nimport { colors } from './colors'\n...\nimport { flower, flowerSize /* если есть */) } from './flower'\n...\n\nexport const LIGHT_THEME: ThemeConfig = {\n  ...COMMON_THEME,\n  key: ThemeKey.Light,\n  colors,\n  components: {\n    flower: {\n      colors: flower({ colors }),\n      sizes: flowerSize /* если есть */\n    },\n    ...\n  }\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.h2,{id:"конфигурация-lightflowerts",children:"Конфигурация light/flower.ts"}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["У компонента ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"Flower"})," должен быть файл в директории ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"/design-system/theme/themes/light/"})," с названием ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"flower.ts"}),",\nв котором и определяется использованная выше функция ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"flower"}),", в которые попадут цвета светлой темы, а также объект\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"flowerSize"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"/design-system/theme/themes/light/flower.ts\n\nexport const flower = ({ colors }: ComponentThemeContext): Record<FlowerMode, FlowerColorConfig> => ({\n  primary: {\n    color: colors.textIconsElements.secondary2\n  },\n  secondary: {\n    color: colors.textIconsElements['secondary2-invert']\n  }\n})\n\nexport const FlowerSize: Record<FlowerSize, FlowerSizeConfig> = {\n  small: {\n    width: '8px',\n    height: '8px',\n    gap: '2px',\n    ...getTextSizes(TextTypes.BTR4)\n  },\n  medium: {\n    width: '16px',\n    height: '16px',\n    gap: '4px',\n    ...getTextSizes(TextTypes.BTR3)\n  }\n}\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Функция ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"flower"})," принимает в себя цвета из палитры, где для каждого токена есть вариант для темной и светлой темы.\nСоответственно в ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"/design-system/theme/themes/light/flower.ts"})," попадут цвета для светлой темы.\nВозвращает функция объект, у которого при наличии цветового мода полями являются названия модов, при отсутствии -\nсами свойства (пример в компоненте checkbox). У ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"flowerSize"})," так же полями являются названия размеров. Если размеров нет,\nто и все сайзинги должны быть вынесены в ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"flowerCss.ts"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Теперь посмотрим на ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"dark/flower.ts"}),":"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"/design-system/theme/themes/dark/flower.ts\n\nimport { flower as defaultFlower, flowerSize as defaultFlowerSize } from '../light/flower'\n\nexport const flower = ({ colors }: ComponentThemeContext): Record<FlowerMode, FlowerColorConfig> => defaultFlower({ colors })\n\nexport const FlowerSize = defaultFlowerSize\n"})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["В идеале ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"dark/flower.ts"})," файлы должны выглядеть так. Тут мы просто пользуемся функцией ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"flower"})," из светлой темы,\nтак как в идеале токены (названия цветов), должны совпадать в темной и светлой теме. Сюда из\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"/design-system/theme/themes/dark/flower.ts"})," попадут цвета для темной темы, а затем просто пробросятся в функцию\nв светлой теме. Сайзинги же от темы не зависят, поэтому просто дублируем то, что есть в\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"/design-system/theme/themes/light/flower.ts"}),"."]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["На выходе в ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"THEME_CONFIG.light.components.flower"})," мы получим объект следующего содержания:"]}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.pre,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:'THEME_CONFIG.light.components.flower\n\n{\n  colors: {\n    default: {\n      color: "#2a3541b3"\n    },\n    inverted: {\n      color: "#e7eef7a8"\n    }\n  },\n  sizes: {\n    medium: {\n      fontFamily: "\\"Kaspersky Sans Text\\", \\"Kaspersky Sans\\", Arial, sans-serif"\n      fontSize: "16px",\n      fontStyle: "normal",\n      fontWeight: 400,\n      gap: "4px",\n      height: "16px",\n      letterSpacing: "0px",\n      lineHeight: "24px",\n      width: "16px"\n    },\n    small: { ... },\n  }\n}\n'})}),"\n",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components.p,{children:["Что в дальнейшем будет использовано в ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"useThemedFlower"})," хуке для получения ",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components.code,{children:"cssConfig"})," для компонента."]})]})}const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Docs/Конфигурирование THEME_CONFIG",tags:["stories-mdx"],includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,_Users_vostrik_Documents_projects_github_uif_ssh_uif_packages_kaspersky_components_node_modules_storybook_addon_docs_dist_shims_mdx_react_shim__WEBPACK_IMPORTED_MODULE_2__.ah)(),props.components);return MDXLayout?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MDXLayout,{...props,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_createMdxContent,{...props})}):_createMdxContent(props)}};const __WEBPACK_DEFAULT_EXPORT__=componentMeta}}]);