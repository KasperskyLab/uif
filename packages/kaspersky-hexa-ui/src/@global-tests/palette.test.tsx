import { colors, shortcuts } from '@design-system/tokens/palette'

const shouldBePaletteKeys = ['violet50', 'violet100', 'violet200', 'violet300', 'violet400', 'violet500', 'violet600', 'violet700', 'violet800', 'violet900', 'violet950', 'purple50', 'purple100', 'purple200', 'purple300', 'purple400', 'purple500', 'purple600', 'purple700', 'purple800', 'purple900', 'purple950', 'marina50', 'marina100', 'marina200', 'marina300', 'marina400', 'marina500', 'marina600', 'marina700', 'marina800', 'marina900', 'marina950', 'marengo50', 'marengo100', 'marengo200', 'marengo300', 'marengo400', 'marengo500', 'marengo600', 'marengo700', 'marengo800', 'marengo900', 'marengo950', 'emerald50', 'emerald100', 'emerald200', 'emerald300', 'emerald400', 'emerald500', 'emerald600', 'emerald700', 'emerald800', 'emerald900', 'emerlad950', 'grass50', 'grass100', 'grass200', 'grass300', 'grass400', 'grass500', 'grass600', 'grass700', 'grass800', 'grass900', 'grass950', 'yellow50', 'yellow100', 'yellow200', 'yellow300', 'yellow400', 'yellow500', 'yellow600', 'yellow700', 'yellow800', 'yellow900', 'yellow950', 'orange50', 'orange100', 'orange200', 'orange300', 'orange400', 'orange500', 'orange600', 'orange700', 'orange800', 'orange900', 'orange950', 'red50', 'red100', 'red200', 'red300', 'red400', 'red500', 'red600', 'red700', 'red800', 'red900', 'red950', 'cg50', 'cg100', 'cg200', 'cg300', 'cg400', 'cg500', 'cg600', 'cg700', 'cg800', 'cg900', 'cg950', 'lg50', 'lg100', 'lg200', 'lg300', 'lg400', 'lg500', 'lg600', 'lg700', 'lg800', 'lg900', 'dg50', 'dg100', 'dg200', 'dg300', 'dg400', 'dg500', 'dg600', 'dg700', 'dg800', 'dg900', 'dga50', 'dga100', 'dga200', 'dga300', 'dga400', 'dga500', 'dga600', 'dga700', 'dga800', 'dga900', 'lga50', 'lga100', 'lga200', 'lga300', 'lga400', 'lga500', 'lga600', 'lga700', 'lga800', 'lga900', 'staticwhite', 'staticblack', 'staticmenu']
const shouldBeTokensKeys = ['text-icons-elements--primary', 'text-icons-elements--secondary', 'text-icons-elements--secondary2', 'text-icons-elements--base-icon', 'text-icons-elements--disabled', 'text-icons-elements--secondary-solid', 'text-icons-elements--secondary2-solid', 'text-icons-elements--base-icon-solid', 'text-icons-elements--disabled-solid', 'text-icons-elements--primary-invert', 'text-icons-elements--secondary-invert', 'text-icons-elements--secondary2-invert', 'text-icons-elements--base-icon-invert', 'text-icons-elements--disabled-invert', 'text-icons-elements--secondary-invert-solid', 'text-icons-elements--secondary2-invert-solid', 'text-icons-elements--base-icon-invert-solid', 'text-icons-elements--disabled-invert-solid', 'text-icons-elements--baseicon', 'text-icons-elements--baseicon-invert', 'bg--base', 'bg--alternative', 'bg--alternative2', 'bg--base-invert', 'bg--alternative-invert', 'bg--alternative2-invert', 'bg--transparent', 'elements--line', 'elements--separator', 'elements--separator-bold', 'elements--line-solid', 'elements--separator-solid', 'elements--separator-bold-solid', 'elements--line-invert', 'elements--separator-invert', 'elements--separator-bold-invert', 'elements--line-invert-solid', 'elements--separator-invert-solid', 'elements--separator-bold-invert-solid', 'elements--accent-link', 'elements--accent-link-visited', 'elements--highlight', 'elements--seporator', 'elements--seporatorbold', 'elements--seporator-invert', 'elements--seporatorbold-invert', 'statestatuses--new', 'statestatuses--update', 'statestatuses--in-progress', 'statestatuses--resolved-solved', 'statestatuses--in-incident', 'statestatuses--inprogress', 'statestatuses--resolved_solved', 'statestatuses--inincedent', 'criticalitystatuses--critical', 'criticalitystatuses--high', 'criticalitystatuses--medium', 'criticalitystatuses--low', 'criticalitystatuses--info', 'criticalitystatuses--positive', 'tags--neutral', 'tags--neutral-bg-base', 'tags--neutral-bg-hover', 'tags--neutral-bg-active', 'tags--grey', 'tags--grey-bg-base', 'tags--grey-bg-hover', 'tags--grey-bg-active', 'tags--red', 'tags--red-bg-base', 'tags--red-bg-hover', 'tags--red-bg-active', 'tags--orange', 'tags--orange-bg-base', 'tags--orange-bg-hover', 'tags--orange-bg-active', 'tags--yellow', 'tags--yellow-bg-base', 'tags--yellow-bg-hover', 'tags--yellow-bg-active', 'tags--grass', 'tags--grass-bg-base', 'tags--grass-bg-hover', 'tags--grass-bg-active', 'tags--emerald', 'tags--emerald-bg-base', 'tags--emerald-bg-hover', 'tags--emerald-bg-active', 'tags--marengo', 'tags--marengo-bg-base', 'tags--marengo-bg-hover', 'tags--marengo-bg-active', 'tags--marina', 'tags--marina-bg-base', 'tags--marina-bg-hover', 'tags--marina-bg-active', 'tags--purple', 'tags--purple-bg-base', 'tags--purple-bg-hover', 'tags--purple-bg-active', 'tags--violet', 'tags--violet-bg-base', 'tags--violet-bg-hover', 'tags--violet-bg-active', 'tags--neutral-invert', 'tags--red-invert', 'tags--orange-invert', 'tags--yellow-invert', 'tags--grass-invert', 'tags--emerald-invert', 'tags--marengo-invert', 'tags--marina-invert', 'tags--purple-invert', 'tags--violet-invert', 'surface--red', 'surface--orange', 'surface--yellow', 'surface--grass', 'surface--emerald', 'surface--marengo', 'surface--marina', 'surface--purple', 'surface--violet', 'surface--coldgrey', 'surface--neutral', 'tagsoutlined--neutral', 'tagsoutlined--neutral-bg-base', 'tagsoutlined--neutral-bg-hover', 'tagsoutlined--neutral-bg-active', 'tagsoutlined--neutral-border', 'tagsoutlined--grey', 'tagsoutlined--grey-bg-base', 'tagsoutlined--grey-bg-hover', 'tagsoutlined--grey-bg-active', 'tagsoutlined--grey-border', 'tagsoutlined--red', 'tagsoutlined--red-bg-base', 'tagsoutlined--red-bg-hover', 'tagsoutlined--red-bg-active', 'tagsoutlined--red-border', 'tagsoutlined--orange', 'tagsoutlined--orange-bg-base', 'tagsoutlined--orange-bg-hover', 'tagsoutlined--orange-bg-active', 'tagsoutlined--orange-border', 'tagsoutlined--yellow', 'tagsoutlined--yellow-bg-base', 'tagsoutlined--yellow-bg-hover', 'tagsoutlined--yellow-bg-active', 'tagsoutlined--yellow-border', 'tagsoutlined--grass', 'tagsoutlined--grass-bg-base', 'tagsoutlined--grass-bg-hover', 'tagsoutlined--grass-bg-active', 'tagsoutlined--grass-border', 'tagsoutlined--emerald', 'tagsoutlined--emerald-bg-base', 'tagsoutlined--emerald-bg-hover', 'tagsoutlined--emerald-bg-active', 'tagsoutlined--emerald-border', 'tagsoutlined--marengo', 'tagsoutlined--marengo-bg-base', 'tagsoutlined--marengo-bg-hover', 'tagsoutlined--marengo-bg-active', 'tagsoutlined--marengo-border', 'tagsoutlined--marina', 'tagsoutlined--marina-bg-base', 'tagsoutlined--marina-bg-hover', 'tagsoutlined--marina-bg-active', 'tagsoutlined--marina-border', 'tagsoutlined--purple', 'tagsoutlined--purple-bg-base', 'tagsoutlined--purple-bg-hover', 'tagsoutlined--purple-bg-active', 'tagsoutlined--purple-border', 'tagsoutlined--violet', 'tagsoutlined--violet-bg-base', 'tagsoutlined--violet-bg-hover', 'tagsoutlined--violet-bg-active', 'tagsoutlined--violet-border', 'main-interact--primary', 'main-interact--secondary', 'main-interact--tertiary', 'main-interact--focus', 'main-interact--pressed', 'main-interact--primary-invert', 'main-interact--secondary-invert', 'main-interact--tertiary-invert', 'main-interact--border-invert', 'danger-interact--primary', 'danger-interact--secondary', 'danger-interact--tertiary', 'danger-interact--primary-invert', 'danger-interact--secondary-invert', 'danger-interact--tertiary-invert', 'danger-interact--border-invert']

const actualPaletteKeys = Object.keys(colors)
const actualTokensKeys = Object.values(shortcuts).reduce<string[]>((arr, section) => {
  const cssSectionString = Object.entries(section).reduce<string[]>((sectionArr, [sectionName, sectionValue]): string[] => {
    const lessVariablesString = Object.keys(sectionValue).reduce<string[]>((entryArr, entryName: string): string[] => {
      const [cleanEntryName] = entryName.split('[deprecated]')
      return [...entryArr, `${sectionName.toLowerCase()}--${cleanEntryName.toLowerCase()}`]
    }, [])
    return [...sectionArr, ...lessVariablesString]
  }, [])
  return [...arr, ...cssSectionString]
}, []).filter(Boolean)
describe('Palette', () => {
  test('should have static colors', async () => {
    expect(shouldBePaletteKeys.every(color => {
      !actualPaletteKeys.includes(color) && console.log('missing: ', color)
      return actualPaletteKeys.includes(color)
    })).toBeTruthy()
  })
  test('should have tokens', async () => {
    expect(shouldBeTokensKeys.every(token => {
      !actualTokensKeys.includes(token) && console.log('missing: ', token)
      return actualTokensKeys.includes(token)
    })).toBeTruthy()
  })

  test('unhandled new static colors', async () => {
    expect(actualPaletteKeys.every(color => {
      !shouldBePaletteKeys.includes(color) && console.log('new: ', color)
      return shouldBePaletteKeys.includes(color)
    })).toBeTruthy()
  })
  test('unhandled new tokens', async () => {
    expect(actualTokensKeys.every(token => {
      !shouldBeTokensKeys.includes(token) && console.log('new: ', token)
      return shouldBeTokensKeys.includes(token)
    })).toBeTruthy()
  })
})
