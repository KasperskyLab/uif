"use strict";(self.webpackChunk_kaspersky_hexa_ui=self.webpackChunk_kaspersky_hexa_ui||[]).push([[1854],{"./.storybook/helpers.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ac:()=>sbSetDefaultValue,Of:()=>sbHideControls,RV:()=>sbMergeActions,zf:()=>sbFixArrayArgs});const sbSetDefaultValue=text=>({table:{defaultValue:{summary:text}}}),sbHideControls=controls=>controls.reduce(((acc,control)=>(acc[control]={control:!1},acc)),{});function sbFixArrayArgs(args,arrayKeys){const out={...args};for(const key of arrayKeys)Array.isArray(out[key])||delete out[key];return out}function sbMergeActions(args,actions){const out={...args};for(const key in actions){const addonAction=out[key],action=actions[key];out[key]=(...args2)=>{null==addonAction||addonAction(...args2),action(...args2)}}return out}},"./src/notification/stories/notification.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Basic:()=>Basic,ColorTokens:()=>ColorTokens,WithActionButton:()=>WithActionButton,__namedExportsOrder:()=>__namedExportsOrder,default:()=>notification_stories});var Palette=__webpack_require__("./design-system/palette/Palette.tsx"),badges=__webpack_require__("./.storybook/badges.tsx"),withMeta=__webpack_require__("./.storybook/components/Meta/withMeta.tsx"),helpers=__webpack_require__("./.storybook/helpers.ts"),Button=__webpack_require__("./src/button/Button.tsx"),NotificationService=__webpack_require__("./src/notification/NotificationService.tsx"),react=__webpack_require__("./node_modules/react/index.js"),js=__webpack_require__("./node_modules/@kaspersky/hexa-ui-core/esm/colors/js/index.js");const meta_namespaceObject=JSON.parse('{"dod":{"designTokens":true,"useThemedHook":true,"unitTests":true,"screenshotTests":false,"migration":true,"apiTable":true,"storybook":true,"designLink":true,"figmaView":true},"component":"Notification","description":"Компонент Notification используетсс длс отображенис временных глобальных уведомлений. Накладываетсс поверх всей страницы.","usage":"Чтобы показать уведомление необходимо вызвать функцию `openNotification`. Так же необходимо отрендерить компонент `Notification`. В dom ноду стого компонента будут складыватьсс все уведомленис.","designLink":"https://www.figma.com/design/9hiN2DbkqbxbhR9EWRI1VK/%5BB2B%5D-Hexa-UI-Components-v6.148.0?m=auto&node-id=69315-242254&t=pkT4USurK2McO1PM-1","figmaView":"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2F9hiN2DbkqbxbhR9EWRI1VK%2F01-%255BB2B%255D-Hexa-UI-Components%3Ftype%3Ddesign%26node-id%3D43876%253A184415%26mode%3Ddev"}');var Notification=__webpack_require__("./src/notification/Notification.tsx");const notification_stories={title:"Hexa UI Components/Notification",component:Notification.E,argTypes:{noIcon:{control:"boolean"},...(0,helpers.Of)(["theme","place"])},args:{description:"Body text",duration:5,klId:"notification-kl-id",noIcon:!1,testId:"notification-test-id"},parameters:{badges:[badges.j.stable,badges.j.reviewedByDesign],controls:{sort:"alpha"},docs:{page:(0,withMeta.C)(meta_namespaceObject)}}},Basic={render:({noIcon,testId,...args})=>(react.useEffect((()=>(0,NotificationService.ae)()),[]),react.createElement(react.Fragment,null,react.createElement(Notification.E,{noIcon,testId}),react.createElement(Button.$,{onClick:()=>(0,NotificationService.GX)({...args,mode:"success"})},"Success"),react.createElement(Button.$,{onClick:()=>NotificationService.GX.error(args)},"Error"),react.createElement(Button.$,{onClick:()=>NotificationService.GX.warning(args)},"Warning"),react.createElement(Button.$,{onClick:()=>NotificationService.GX.info(args)},"Info"))),args:{actionButton:{title:"Go To",onClick:console.log}}},WithActionButton={render:({id,noIcon,testId,theme,...args})=>(react.useEffect((()=>(0,NotificationService.ae)()),[]),react.createElement(react.Fragment,null,react.createElement(Notification.E,{id,noIcon,testId,theme}),react.createElement(Button.$,{onClick:()=>NotificationService.GX.success({id,...args})},"Open the notification box"),react.createElement(Button.$,{onClick:()=>NotificationService.GX.error("Some error")},"Open the notification box by api with text"),react.createElement(Button.$,{onClick:()=>NotificationService.GX.error({id,...args})},"Open the notification box by api with args"))),args:{id:"notification2",actionButton:{title:"Go To",onClick:console.log}}},ColorTokens={args:{source:js.Ah.toast},render:args=>react.createElement(Palette.r,args)};Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:"{\n  render: ({\n    noIcon,\n    testId,\n    ...args\n  }) => {\n    React.useEffect(() => notificationDestroy(), []);\n    return <>\n        <Notification noIcon={noIcon} testId={testId} />\n        <Button onClick={() => openNotification({\n        ...args,\n        mode: 'success'\n      })}>\n          Success\n        </Button>\n        <Button onClick={() => openNotification.error(args)}>\n          Error\n        </Button>\n        <Button onClick={() => openNotification.warning(args)}>\n          Warning\n        </Button>\n        <Button onClick={() => openNotification.info(args)}>\n          Info\n        </Button>\n      </>;\n  },\n  args: {\n    actionButton: {\n      title: 'Go To',\n      onClick: console.log\n    }\n  }\n}",...Basic.parameters?.docs?.source}}},WithActionButton.parameters={...WithActionButton.parameters,docs:{...WithActionButton.parameters?.docs,source:{originalSource:"{\n  render: ({\n    id,\n    noIcon,\n    testId,\n    theme,\n    ...args\n  }) => {\n    React.useEffect(() => notificationDestroy(), []);\n    return <>\n        <Notification id={id} noIcon={noIcon} testId={testId} theme={theme} />\n        <Button onClick={() => openNotification.success({\n        id,\n        ...args\n      })}>\n          Open the notification box\n        </Button>\n        <Button onClick={() => openNotification.error('Some error')}>\n          Open the notification box by api with text\n        </Button>\n        <Button onClick={() => openNotification.error({\n        id,\n        ...args\n      })}>\n          Open the notification box by api with args\n        </Button>\n      </>;\n  },\n  args: {\n    id: 'notification2',\n    actionButton: {\n      title: 'Go To',\n      onClick: console.log\n    }\n  }\n}",...WithActionButton.parameters?.docs?.source}}},ColorTokens.parameters={...ColorTokens.parameters,docs:{...ColorTokens.parameters?.docs,source:{originalSource:"{\n  args: {\n    source: componentColors.toast\n  },\n  render: args => <ThemedPalette {...args} />\n}",...ColorTokens.parameters?.docs?.source}}};const __namedExportsOrder=["Basic","WithActionButton","ColorTokens"]}}]);