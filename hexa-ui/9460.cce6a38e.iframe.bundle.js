"use strict";(self.webpackChunk_kaspersky_hexa_ui=self.webpackChunk_kaspersky_hexa_ui||[]).push([[9460],{"./src/segmented-button/SegmentedButton.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{t:()=>SegmentedButton});var useTestAttribute=__webpack_require__("./helpers/hooks/useTestAttribute.ts"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),react=__webpack_require__("./node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),v4=__webpack_require__("./node_modules/uuid/dist/esm-browser/v4.js"),variables=__webpack_require__("./design-system/theme/themes/variables.ts"),typography=__webpack_require__("./design-system/tokens/typography.ts"),getFromProps=__webpack_require__("./helpers/getFromProps.ts"),js=__webpack_require__("./node_modules/@kaspersky/hexa-ui-core/esm/typography/js/index.js");const fromProps=(0,getFromProps.P)(),textSizes=(0,typography.ip)(js.jA.BTR3),segmentedButtonCss=(0,styled_components_browser_esm.AH)(["display:flex;flex-direction:row;width:100%;"," ",""],(({type})=>"checkbox"===type?(0,styled_components_browser_esm.AH)(["gap:4px;"]):(0,styled_components_browser_esm.AH)(["div:not(:first-child):not(:last-child){&,& label{border-radius:0;}}div:first-child{&,& label{border-top-right-radius:0;border-bottom-right-radius:0;}}div:last-child{&,& label{border-top-left-radius:0;border-bottom-left-radius:0;}}div:not(:last-child):not(.kl6-segmentedButton-item-checked){&,&:hover,&:active,&:focus-visible{border-right-color:transparent;}}div:not(:last-child){margin-right:-1px;}"])),(({isStretch})=>isStretch&&(0,styled_components_browser_esm.AH)(["& > div{flex-grow:1;label{justify-content:center;}}"]))),segmentedButtonItemCss=(0,styled_components_browser_esm.AH)(["display:flex;transition:all 0.3s ease;&,label{border-radius:8px;}font-family:",";font-size:",";line-height:",";font-weight:",";font-style:",";letter-spacing:",";background:",";color:",";border:1px solid ",";&:hover{background:",";}&:active{background:",";}input:focus-visible + label{box-shadow:",";}&.kl6-segmentedButton-item-checked:not(.kl6-segmentedButton-item-disabled){z-index:1;background:",";color:",";border:1px solid ",";&:hover{background:",";}&:active{background:",";}}&.kl6-segmentedButton-item-disabled{&,&:hover,&:active,&:focus-visible{background:",";color:",";border:1px solid ",";&.kl6-segmentedButton-item-checked{background:",";border-color:transparent;}label{cursor:not-allowed;}}}"," .kl6-segmentedButton-item-additional{display:flex;flex-direction:column;justify-content:center;}input{position:absolute;opacity:0;}label{position:relative;display:flex;flex-direction:row;gap:","px;width:100%;height:100%;padding:",";cursor:pointer;transition:all 0.3s ease;}"],textSizes.fontFamily,textSizes.fontSize,textSizes.lineHeight,textSizes.fontWeight,textSizes.fontStyle,textSizes.letterSpacing,fromProps("unchecked.enabled.background"),fromProps("unchecked.enabled.color"),fromProps("unchecked.enabled.border"),fromProps("unchecked.hover.background"),fromProps("unchecked.active.background"),fromProps("focus.boxShadow"),fromProps("checked.enabled.background"),fromProps("checked.enabled.color"),fromProps("checked.enabled.border"),fromProps("checked.hover.background"),fromProps("checked.active.background"),fromProps("unchecked.enabled.background"),fromProps("unchecked.disabled.color"),fromProps("unchecked.disabled.border"),fromProps("checked.disabled.background"),(({type})=>"radio"===type&&(0,styled_components_browser_esm.AH)(["&:not(.kl6-segmentedButton-item-disabled) + .kl6-segmentedButton-item-disabled{&,&:hover,&:active,&:focus-visible{border-left-color:",";}}"],fromProps("unchecked.enabled.border"))),variables.m[2],fromProps("padding"));var useThemedComponent=__webpack_require__("./helpers/useThemedComponent.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const StyledSegmentedButtonItem=styled_components_browser_esm.Ay.div.withConfig({shouldForwardProp:prop=>!["cssConfig","type"].includes(prop)}).withConfig({displayName:"SegmentedButtonItem__StyledSegmentedButtonItem",componentId:"sc-7cy1p2-0"})(["",""],segmentedButtonItemCss),SegmentedButtonItem=rawProps=>{const props=(props=>(0,useThemedComponent.K)(props,{componentName:"segmentedButton",defaultValues:{mode:"marina",size:"medium"}}))(rawProps);return react.createElement(SegmentedButtonItemView,props)},SegmentedButtonItemView=props=>{const{className,id,text,selectedValues,onChange,value,componentsBefore,componentsAfter,disabled,cssConfig,testId,klId,...rest}=props,{testAttributes}=(0,useTestAttribute.a)(props),isChecked=selectedValues.includes(value);return react.createElement(StyledSegmentedButtonItem,_extends({cssConfig,className:classnames_default()(className,{"kl6-segmentedButton-item-disabled":disabled,"kl6-segmentedButton-item-checked":isChecked}),type:rest.type},testAttributes),react.createElement("input",_extends({},rest,{id,onChange:disabled?void 0:e=>onChange(e.target.value,selectedValues),"data-testid":testId+"-input","data-checked":isChecked,value,disabled})),react.createElement("label",{htmlFor:id,"data-testid":`${testId}-label`},componentsBefore&&react.createElement("div",{className:"kl6-segmentedButton-item-additional"},componentsBefore),react.createElement("div",{"data-testid":testId+"-label-value"},text),componentsAfter&&react.createElement("div",{className:"kl6-segmentedButton-item-additional"},componentsAfter)))};function SegmentedButton_extends(){return SegmentedButton_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},SegmentedButton_extends.apply(null,arguments)}SegmentedButtonItem.__docgenInfo={description:"",methods:[],displayName:"SegmentedButtonItem",props:{value:{required:!0,tsType:{name:"string"},description:""},text:{required:!1,tsType:{name:"ReactNode"},description:""},className:{required:!1,tsType:{name:"string"},description:""},disabled:{required:!1,tsType:{name:"boolean"},description:""},mode:{required:!1,tsType:{name:"union",raw:"'grey' | 'red' | 'orange' | 'yellow' | 'grass' | 'emerald' | 'marengo' | 'marina' | 'purple' | 'violet'",elements:[{name:"literal",value:"'grey'"},{name:"literal",value:"'red'"},{name:"literal",value:"'orange'"},{name:"literal",value:"'yellow'"},{name:"literal",value:"'grass'"},{name:"literal",value:"'emerald'"},{name:"literal",value:"'marengo'"},{name:"literal",value:"'marina'"},{name:"literal",value:"'purple'"},{name:"literal",value:"'violet'"}]},description:""},componentsBefore:{required:!1,tsType:{name:"Array",elements:[{name:"ReactNode"}],raw:"ReactNode[]"},description:""},componentsAfter:{required:!1,tsType:{name:"Array",elements:[{name:"ReactNode"}],raw:"ReactNode[]"},description:""},testId:{required:!1,tsType:{name:"string"},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},klId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},componentId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},dataTestId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},componentType:{required:!1,tsType:{name:"string"},description:""},id:{required:!0,tsType:{name:"string"},description:""},type:{required:!0,tsType:{name:"union",raw:"'checkbox' | 'radio'",elements:[{name:"literal",value:"'checkbox'"},{name:"literal",value:"'radio'"}]},description:""},name:{required:!1,tsType:{name:"string"},description:""},selectedValues:{required:!0,tsType:{name:"Array",elements:[{name:"string"}],raw:"string[]"},description:""},onChange:{required:!0,tsType:{name:"signature",type:"function",raw:"(handledValue: string, selectedValues: string[]) => void",signature:{arguments:[{type:{name:"string"},name:"handledValue"},{type:{name:"Array",elements:[{name:"string"}],raw:"string[]"},name:"selectedValues"}],return:{name:"void"}}},description:""}}};const StyledSegmentedButton=styled_components_browser_esm.Ay.div.withConfig({shouldForwardProp:prop=>!["isStretch","type"].includes(prop)}).withConfig({displayName:"SegmentedButton__StyledSegmentedButton",componentId:"sc-mbh2rb-0"})(["",""],segmentedButtonCss),SegmentedButton=props=>{const{type="radio",theme,mode,size,className,disabled,items,value,onChange,isStretch}=props,optionsGroupId=(0,react.useMemo)((()=>(0,v4.A)()),[]),{testAttributes}=(0,useTestAttribute.a)(props),onItemClick=(0,react.useCallback)(((handledValue,selectedValues)=>{"checkbox"===type?selectedValues.includes(handledValue)?onChange(selectedValues.filter((value=>value!==handledValue))):onChange([...selectedValues,handledValue]):selectedValues.includes(handledValue)||onChange([handledValue])}),[onChange,type]),mappedItems=(0,react.useMemo)((()=>items.map((item=>({...item,id:(0,v4.A)(),name:optionsGroupId})))),[items,type,optionsGroupId]);return react.createElement(StyledSegmentedButton,SegmentedButton_extends({type,className:classnames_default()("kl6-segmented-button",className),isStretch},testAttributes),mappedItems.map((item=>react.createElement(SegmentedButtonItem,SegmentedButton_extends({key:item.id,type,selectedValues:value,onChange:onItemClick,theme,mode:item.mode||mode,size},item,{disabled:disabled||item.disabled})))))};SegmentedButton.__docgenInfo={description:"",methods:[],displayName:"SegmentedButton",props:{type:{required:!1,tsType:{name:"union",raw:"'checkbox' | 'radio'",elements:[{name:"literal",value:"'checkbox'"},{name:"literal",value:"'radio'"}]},description:"Checkbox or radio behavior"},isStretch:{required:!1,tsType:{name:"boolean"},description:"Is SegmentedButton stretched to the full container's width"},disabled:{required:!1,tsType:{name:"boolean"},description:"Is disabled"},items:{required:!0,tsType:{name:"Array",elements:[{name:"intersection",raw:"{\n  value: string,\n  text?: ReactNode,\n  className?: string,\n  disabled?: boolean,\n  mode?: SegmentedButtonMode,\n  componentsBefore?: ReactNode[],\n  componentsAfter?: ReactNode[]\n} & TestingProps",elements:[{name:"signature",type:"object",raw:"{\n  value: string,\n  text?: ReactNode,\n  className?: string,\n  disabled?: boolean,\n  mode?: SegmentedButtonMode,\n  componentsBefore?: ReactNode[],\n  componentsAfter?: ReactNode[]\n}",signature:{properties:[{key:"value",value:{name:"string",required:!0}},{key:"text",value:{name:"ReactNode",required:!1}},{key:"className",value:{name:"string",required:!1}},{key:"disabled",value:{name:"boolean",required:!1}},{key:"mode",value:{name:"union",raw:"'grey' | 'red' | 'orange' | 'yellow' | 'grass' | 'emerald' | 'marengo' | 'marina' | 'purple' | 'violet'",elements:[{name:"literal",value:"'grey'"},{name:"literal",value:"'red'"},{name:"literal",value:"'orange'"},{name:"literal",value:"'yellow'"},{name:"literal",value:"'grass'"},{name:"literal",value:"'emerald'"},{name:"literal",value:"'marengo'"},{name:"literal",value:"'marina'"},{name:"literal",value:"'purple'"},{name:"literal",value:"'violet'"}],required:!1}},{key:"componentsBefore",value:{name:"Array",elements:[{name:"ReactNode"}],raw:"ReactNode[]",required:!1}},{key:"componentsAfter",value:{name:"Array",elements:[{name:"ReactNode"}],raw:"ReactNode[]",required:!1}}]}},{name:"signature",type:"object",raw:"{\n  /** Actual identifier for autotesting, whill be passed to HTML attribute data-testid */\n  testId?: string,\n  /** @deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id */\n  klId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  componentId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  dataTestId?: string,\n  componentType?: string\n}",signature:{properties:[{key:"testId",value:{name:"string",required:!1},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},{key:"klId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},{key:"componentId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"dataTestId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"componentType",value:{name:"string",required:!1}}]}}]}],raw:"SegmentedButtonOption[]"},description:"Array of options"},value:{required:!0,tsType:{name:"Array",elements:[{name:"string"}],raw:"string[]"},description:"Controlled array value of selected options"},onChange:{required:!0,tsType:{name:"signature",type:"function",raw:"(value: string[]) => void",signature:{arguments:[{type:{name:"Array",elements:[{name:"string"}],raw:"string[]"},name:"value"}],return:{name:"void"}}},description:"Handler"},className:{required:!1,tsType:{name:"string"},description:"Custom class name of the container"},mode:{required:!1,tsType:{name:"union",raw:"'grey' | 'red' | 'orange' | 'yellow' | 'grass' | 'emerald' | 'marengo' | 'marina' | 'purple' | 'violet'",elements:[{name:"literal",value:"'grey'"},{name:"literal",value:"'red'"},{name:"literal",value:"'orange'"},{name:"literal",value:"'yellow'"},{name:"literal",value:"'grass'"},{name:"literal",value:"'emerald'"},{name:"literal",value:"'marengo'"},{name:"literal",value:"'marina'"},{name:"literal",value:"'purple'"},{name:"literal",value:"'violet'"}]},description:"Default color mode of checked state"},size:{required:!1,tsType:{name:"literal",value:"`${Extract<Size, Size.Medium | Size.Large>}`"},description:"Size"},theme:{required:!1,tsType:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:"Custom theme"},testId:{required:!1,tsType:{name:"string"},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},klId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},componentId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},dataTestId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},componentType:{required:!1,tsType:{name:"string"},description:""}}}}}]);