"use strict";(self.webpackChunk_kaspersky_hexa_ui=self.webpackChunk_kaspersky_hexa_ui||[]).push([[2076],{"./src/loader/Loader.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{a:()=>Loader});var useTestAttribute=__webpack_require__("./helpers/hooks/useTestAttribute.ts"),spin=__webpack_require__("./node_modules/antd/es/spin/index.js"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),react=__webpack_require__("./node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js");const fromProps=(0,__webpack_require__("./helpers/getFromProps.ts").P)(),loaderCss=(0,styled_components_browser_esm.AH)(["&.ant-spinner-centered{position:absolute;transform:translate(-50%,-50%);top:50%;left:50%;}line-height:0;& > svg{height:",";width:",";}.ant-spin-text{color:",";font-family:",";font-weight:",";font-size:",";font-style:",";line-height:",";letter-spacing:",";padding-top:",";}"],fromProps("height"),fromProps("width"),fromProps("textColor"),fromProps("fontFamily"),fromProps("fontWeight"),fromProps("fontSize"),fromProps("fontStyle"),fromProps("lineHeight"),fromProps("letterSpacing"),fromProps("gap")),iconCss=(0,styled_components_browser_esm.AH)(["& path{stroke:","}"],(({color})=>color)),LoaderIcon=({className})=>react.createElement("svg",{width:"48",height:"48",viewBox:"0 0 48 48",fill:"none",xmlns:"http://www.w3.org/2000/svg",className:classnames_default()(["anticon-spin",className])},react.createElement("path",{d:"M24 45.5C35.8741 45.5 45.5 35.8741 45.5 24C45.5 12.1259 35.8741 2.5 24 2.5C12.1259 2.5 2.5 12.1259 2.5 24",strokeWidth:"5",strokeLinecap:"round"}));LoaderIcon.__docgenInfo={description:"",methods:[],displayName:"LoaderIcon",props:{className:{required:!1,tsType:{name:"string"},description:""}}};var useThemedComponent=__webpack_require__("./helpers/useThemedComponent.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const StyledSpin=(0,styled_components_browser_esm.Ay)(spin.A).withConfig({shouldForwardProp:prop=>!["centered","cssConfig"].includes(prop)}).withConfig({displayName:"Loader__StyledSpin",componentId:"sc-cmtvzq-0"})(["",""],loaderCss),StyledIcon=(0,styled_components_browser_esm.Ay)(LoaderIcon).withConfig({displayName:"Loader__StyledIcon",componentId:"sc-cmtvzq-1"})(["",""],iconCss),Loader=rawProps=>{const themedProps=(props=>(0,useThemedComponent.K)(props,{componentName:"loader",defaultValues:{mode:"default",size:"small"}}))(rawProps),props=(0,useTestAttribute.a)(themedProps);return react.createElement(LoaderView,props)},LoaderView=({spinning=!0,cssConfig,className,centered,testAttributes,...rest})=>react.createElement(StyledSpin,_extends({className:classnames_default()(className,{"ant-spinner-centered":centered}),centered,indicator:react.createElement(StyledIcon,{color:cssConfig.color}),spinning,cssConfig},testAttributes,rest));Loader.__docgenInfo={description:"",methods:[],displayName:"Loader",props:{centered:{required:!1,tsType:{name:"boolean"},description:"Is centered"},delay:{required:!1,tsType:{name:"number"},description:"Specifies a delay in milliseconds for loading state (prevent flush)"},spinning:{required:!1,tsType:{name:"boolean"},description:"Whether Spin is visible"},className:{required:!1,tsType:{name:"string"},description:"Spinner className"},tip:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Customize description content when Spin has children"},theme:{required:!1,tsType:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:"Custom theme"},mode:{required:!1,tsType:{name:"union",raw:"'default' | 'inverted'",elements:[{name:"literal",value:"'default'"},{name:"literal",value:"'inverted'"}]},description:"Color mode"},size:{required:!1,tsType:{name:"union",raw:"Size | `${Size}`",elements:[{name:"Size"},{name:"literal",value:"`${Size}`"}]},description:"Size"},testId:{required:!1,tsType:{name:"string"},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},klId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},componentId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},dataTestId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},componentType:{required:!1,tsType:{name:"string"},description:""}}}},"./src/tree/stories/Tree.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ColorTokens:()=>ColorTokens,TreeListBasic:()=>TreeListBasic,TreeListLoadDataAsynchronously:()=>TreeListLoadDataAsynchronously,TreeNavBasic:()=>TreeNavBasic,TreeNavDraggable:()=>TreeNavDraggable,TreeNavLoadDataAsynchronously:()=>TreeNavLoadDataAsynchronously,TreeNavMultipleChoiceWithALotOfData:()=>TreeNavMultipleChoiceWithALotOfData,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Tree_stories});var Palette=__webpack_require__("./design-system/palette/Palette.tsx"),badges=__webpack_require__("./.storybook/badges.tsx"),withMeta=__webpack_require__("./.storybook/components/Meta/withMeta.tsx"),helpers=__webpack_require__("./.storybook/helpers.ts"),Tree=__webpack_require__("./src/tree/Tree.tsx"),react=__webpack_require__("./node_modules/react/index.js");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const StyledTreeList=(0,__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js").Ay)(Tree.PH).withConfig({displayName:"TreeList__StyledTreeList",componentId:"sc-1000egu-0"})(["&&{.ant-tree-treenode{margin:0;}}"]),TreeList=({mode,...props})=>{switch(mode){case"readOnly":return react.createElement(StyledTreeList,_extends({selectable:!1,checkable:!1,disableNodeBg:!0},props));case"singleChoice":return react.createElement(StyledTreeList,_extends({selectable:!1,checkable:!0,disableNodeBg:!0,multiple:!1,allowUncheck:!1},props));case"multipleChoice":return react.createElement(StyledTreeList,_extends({selectable:!1,checkable:!0,disableNodeBg:!0,multiple:!0},props));default:return null}};function TreeNav_extends(){return TreeNav_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},TreeNav_extends.apply(null,arguments)}function Icon(props){return props.multiple?react.createElement(react.Fragment,null,props.loading&&react.createElement(Tree.y$,null),react.createElement(Tree.qN,TreeNav_extends({},props,{multiple:!0}))):props.loading?react.createElement(Tree.y$,null):null}TreeList.defaultProps={checkChildren:!0,checkParents:!1,checkStrictly:!1,disabled:!1,draggable:!1,invalid:!1,mode:"readOnly"},TreeList.__docgenInfo={description:"",methods:[],displayName:"TreeList",props:{theme:{required:!1,tsType:{name:"ThemeKey"},description:"Custom theme"},testId:{required:!1,tsType:{name:"string"},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},klId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},componentId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},dataTestId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},componentType:{required:!1,tsType:{name:"string"},description:""},treeData:{required:!1,tsType:{name:"TreeProps['treeData']",raw:"TreeProps['treeData']"},description:"The treeNodes data Array, if set it then you need not construct children TreeNode.\n(key should be unique across the whole array)"},disabled:{required:!1,tsType:{name:"boolean"},description:"Whether disabled the tree",defaultValue:{value:"false",computed:!1}},draggable:{required:!1,tsType:{name:"union",raw:"DraggableFn | boolean | DraggableConfig",elements:[{name:"signature",type:"function",raw:"(node: DataNode) => boolean",signature:{arguments:[{type:{name:"DataNode"},name:"node"}],return:{name:"boolean"}}},{name:"boolean"},{name:"DraggableConfig"}]},description:"Specifies whether this Tree or the node is draggable",defaultValue:{value:"false",computed:!1}},showLine:{required:!1,tsType:{name:"union",raw:"boolean | { showLeafIcon: boolean }",elements:[{name:"boolean"},{name:"signature",type:"object",raw:"{ showLeafIcon: boolean }",signature:{properties:[{key:"showLeafIcon",value:{name:"boolean",required:!0}}]}}]},description:"@deprecated"},checkChildren:{required:!1,tsType:{name:"boolean"},description:"Whether to check children if the parent node is checked. Has no effect if checkStrictly is true",defaultValue:{value:"true",computed:!1}},checkParents:{required:!1,tsType:{name:"boolean"},description:"Whether to check/half check/uncheck parents if the node is checked. Has no effect if checkStrictly is true",defaultValue:{value:"false",computed:!1}},checkStrictly:{required:!1,tsType:{name:"boolean"},description:"Check treeNode precisely; parent treeNode and children treeNodes are not associated",defaultValue:{value:"false",computed:!1}},onCheck:{required:!1,tsType:{name:"signature",type:"function",raw:"(checkedKeys: Key[], e: TreeCheckEvent) => void | undefined",signature:{arguments:[{type:{name:"Array",elements:[{name:"Key"}],raw:"Key[]"},name:"checkedKeys"},{type:{name:"signature",type:"object",raw:"{\n  checked: boolean,\n  halfCheckedKeys: [],\n  event: Record<string, string>,\n  checkedNodes: Record<string, string>[],\n  node: { checked: boolean, key: string }\n}",signature:{properties:[{key:"checked",value:{name:"boolean",required:!0}},{key:"halfCheckedKeys",value:{name:"tuple",raw:"[]",elements:[],required:!0}},{key:"event",value:{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>",required:!0}},{key:"checkedNodes",value:{name:"Array",elements:[{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}],raw:"Record<string, string>[]",required:!0}},{key:"node",value:{name:"signature",type:"object",raw:"{ checked: boolean, key: string }",signature:{properties:[{key:"checked",value:{name:"boolean",required:!0}},{key:"key",value:{name:"string",required:!0}}]},required:!0}}]}},name:"e"}],return:{name:"union",raw:"void | undefined",elements:[{name:"void"},{name:"undefined"}]}}},description:"Callback function for when the onCheck event occurs"},checkedKeys:{required:!1,tsType:{name:"union",raw:"string[] | undefined",elements:[{name:"Array",elements:[{name:"string"}],raw:"string[]"},{name:"undefined"}]},description:"Specifies the keys of the checked treeNodes"},onExpand:{required:!1,tsType:{name:"signature",type:"function",raw:"(newExpandedKeys: string[]) => void | undefined",signature:{arguments:[{type:{name:"Array",elements:[{name:"string"}],raw:"string[]"},name:"newExpandedKeys"}],return:{name:"union",raw:"void | undefined",elements:[{name:"void"},{name:"undefined"}]}}},description:"Callback function for when a treeNode is expanded or collapsed"},expandedKeys:{required:!1,tsType:{name:"union",raw:"string[] | undefined",elements:[{name:"Array",elements:[{name:"string"}],raw:"string[]"},{name:"undefined"}]},description:"Specifies the keys of the expanded treeNodes"},onLoad:{required:!1,tsType:{name:"signature",type:"function",raw:"(newExpandedKeys: string[]) => void | undefined",signature:{arguments:[{type:{name:"Array",elements:[{name:"string"}],raw:"string[]"},name:"newExpandedKeys"}],return:{name:"union",raw:"void | undefined",elements:[{name:"void"},{name:"undefined"}]}}},description:"Callback function for when a treeNode is loaded by loadData function"},loadedKeys:{required:!1,tsType:{name:"union",raw:"string[] | undefined",elements:[{name:"Array",elements:[{name:"string"}],raw:"string[]"},{name:"undefined"}]},description:"Specifies the keys of the loaded treeNodes by loadData function"},autoExpandParent:{required:!1,tsType:{name:"boolean"},description:"Whether to automatically expand a parent treeNode"},onDragStart:{required:!1,tsType:{name:"signature",type:"function",raw:"(info: NodeDragEventParams) => void",signature:{arguments:[{type:{name:"NodeDragEventParams"},name:"info"}],return:{name:"void"}}},description:"Callback function for when the onDragStart event occurs"},onDragEnter:{required:!1,tsType:{name:"signature",type:"function",raw:"(\n  info: NodeDragEventParams & {\n    expandedKeys: Key[]\n  }\n) => void",signature:{arguments:[{type:{name:"intersection",raw:"NodeDragEventParams & {\n  expandedKeys: Key[]\n}",elements:[{name:"NodeDragEventParams"},{name:"signature",type:"object",raw:"{\n  expandedKeys: Key[]\n}",signature:{properties:[{key:"expandedKeys",value:{name:"Array",elements:[{name:"Key"}],raw:"Key[]",required:!0}}]}}]},name:"info"}],return:{name:"void"}}},description:"Callback function for when the onDragEnter event occurs"},onDragOver:{required:!1,tsType:{name:"signature",type:"function",raw:"(info: NodeDragEventParams) => void",signature:{arguments:[{type:{name:"NodeDragEventParams"},name:"info"}],return:{name:"void"}}},description:"Callback function for when the onDragOver event occurs"},onDragLeave:{required:!1,tsType:{name:"signature",type:"function",raw:"(info: NodeDragEventParams) => void",signature:{arguments:[{type:{name:"NodeDragEventParams"},name:"info"}],return:{name:"void"}}},description:"Callback function for when the onDragLeave event occurs"},onDragEnd:{required:!1,tsType:{name:"signature",type:"function",raw:"(info: NodeDragEventParams) => void",signature:{arguments:[{type:{name:"NodeDragEventParams"},name:"info"}],return:{name:"void"}}},description:"Callback function for when the onDragEnd event occurs"},onDrop:{required:!1,tsType:{name:"signature",type:"function",raw:"(info: NodeDropEventParams) => void",signature:{arguments:[{type:{name:"intersection",raw:"NodeDragEventParams & {\n  dragNode: EventDataNode,\n  dragNodesKeys: Key[],\n  dropPosition: number,\n  dropToGap: boolean\n}",elements:[{name:"NodeDragEventParams"},{name:"signature",type:"object",raw:"{\n  dragNode: EventDataNode,\n  dragNodesKeys: Key[],\n  dropPosition: number,\n  dropToGap: boolean\n}",signature:{properties:[{key:"dragNode",value:{name:"EventDataNode",required:!0}},{key:"dragNodesKeys",value:{name:"Array",elements:[{name:"Key"}],raw:"Key[]",required:!0}},{key:"dropPosition",value:{name:"number",required:!0}},{key:"dropToGap",value:{name:"boolean",required:!0}}]}}]},name:"info"}],return:{name:"void"}}},description:"Callback function for when the onDrop event occurs"},defaultCheckedKeys:{required:!1,tsType:{name:"Array",elements:[{name:"Key"}],raw:"Key[]"},description:"Specify the keys of the default checked treeNodes"},defaultExpandedKeys:{required:!1,tsType:{name:"Array",elements:[{name:"Key"}],raw:"Key[]"},description:"Specify the keys of the default expanded treeNodes"},blockNode:{required:!1,tsType:{name:"boolean"},description:"Whether treeNode fill remaining horizontal space"},allowUncheck:{required:!1,tsType:{name:"boolean"},description:"Whether user can uncheck an item"},height:{required:!1,tsType:{name:"number"},description:"Config virtual scroll height. Will not support horizontal scroll when enable this"},virtual:{required:!1,tsType:{name:"boolean"},description:"Disable virtual scroll when set to false"},invalid:{required:!1,tsType:{name:"boolean"},description:"Is invalid",defaultValue:{value:"false",computed:!1}},mode:{required:!1,tsType:{name:"union",raw:"'multipleChoice' | 'singleChoice' | 'readOnly'",elements:[{name:"literal",value:"'multipleChoice'"},{name:"literal",value:"'singleChoice'"},{name:"literal",value:"'readOnly'"}]},description:"",defaultValue:{value:"'readOnly'",computed:!1}}}};const TreeNav=({multiple=!1,...props})=>react.createElement(Tree.PH,TreeNav_extends({checkable:!0,icon:nodeProps=>react.createElement(Icon,TreeNav_extends({},nodeProps,{multiple})),multiple,selectable:!1},props));TreeNav.__docgenInfo={description:"",methods:[],displayName:"TreeNav",props:{theme:{required:!1,tsType:{name:"ThemeKey"},description:"Custom theme"},testId:{required:!1,tsType:{name:"string"},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},klId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},componentId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},dataTestId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},componentType:{required:!1,tsType:{name:"string"},description:""},treeData:{required:!1,tsType:{name:"TreeProps['treeData']",raw:"TreeProps['treeData']"},description:"The treeNodes data Array, if set it then you need not construct children TreeNode.\n(key should be unique across the whole array)"},disabled:{required:!1,tsType:{name:"boolean"},description:"Whether disabled the tree"},draggable:{required:!1,tsType:{name:"union",raw:"DraggableFn | boolean | DraggableConfig",elements:[{name:"signature",type:"function",raw:"(node: DataNode) => boolean",signature:{arguments:[{type:{name:"DataNode"},name:"node"}],return:{name:"boolean"}}},{name:"boolean"},{name:"DraggableConfig"}]},description:"Specifies whether this Tree or the node is draggable"},showLine:{required:!1,tsType:{name:"union",raw:"boolean | { showLeafIcon: boolean }",elements:[{name:"boolean"},{name:"signature",type:"object",raw:"{ showLeafIcon: boolean }",signature:{properties:[{key:"showLeafIcon",value:{name:"boolean",required:!0}}]}}]},description:"@deprecated"},checkChildren:{required:!1,tsType:{name:"boolean"},description:"Whether to check children if the parent node is checked. Has no effect if checkStrictly is true"},checkParents:{required:!1,tsType:{name:"boolean"},description:"Whether to check/half check/uncheck parents if the node is checked. Has no effect if checkStrictly is true"},checkStrictly:{required:!1,tsType:{name:"boolean"},description:"Check treeNode precisely; parent treeNode and children treeNodes are not associated"},onCheck:{required:!1,tsType:{name:"signature",type:"function",raw:"(checkedKeys: Key[], e: TreeCheckEvent) => void | undefined",signature:{arguments:[{type:{name:"Array",elements:[{name:"Key"}],raw:"Key[]"},name:"checkedKeys"},{type:{name:"signature",type:"object",raw:"{\n  checked: boolean,\n  halfCheckedKeys: [],\n  event: Record<string, string>,\n  checkedNodes: Record<string, string>[],\n  node: { checked: boolean, key: string }\n}",signature:{properties:[{key:"checked",value:{name:"boolean",required:!0}},{key:"halfCheckedKeys",value:{name:"tuple",raw:"[]",elements:[],required:!0}},{key:"event",value:{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>",required:!0}},{key:"checkedNodes",value:{name:"Array",elements:[{name:"Record",elements:[{name:"string"},{name:"string"}],raw:"Record<string, string>"}],raw:"Record<string, string>[]",required:!0}},{key:"node",value:{name:"signature",type:"object",raw:"{ checked: boolean, key: string }",signature:{properties:[{key:"checked",value:{name:"boolean",required:!0}},{key:"key",value:{name:"string",required:!0}}]},required:!0}}]}},name:"e"}],return:{name:"union",raw:"void | undefined",elements:[{name:"void"},{name:"undefined"}]}}},description:"Callback function for when the onCheck event occurs"},checkedKeys:{required:!1,tsType:{name:"union",raw:"string[] | undefined",elements:[{name:"Array",elements:[{name:"string"}],raw:"string[]"},{name:"undefined"}]},description:"Specifies the keys of the checked treeNodes"},onExpand:{required:!1,tsType:{name:"signature",type:"function",raw:"(newExpandedKeys: string[]) => void | undefined",signature:{arguments:[{type:{name:"Array",elements:[{name:"string"}],raw:"string[]"},name:"newExpandedKeys"}],return:{name:"union",raw:"void | undefined",elements:[{name:"void"},{name:"undefined"}]}}},description:"Callback function for when a treeNode is expanded or collapsed"},expandedKeys:{required:!1,tsType:{name:"union",raw:"string[] | undefined",elements:[{name:"Array",elements:[{name:"string"}],raw:"string[]"},{name:"undefined"}]},description:"Specifies the keys of the expanded treeNodes"},onLoad:{required:!1,tsType:{name:"signature",type:"function",raw:"(newExpandedKeys: string[]) => void | undefined",signature:{arguments:[{type:{name:"Array",elements:[{name:"string"}],raw:"string[]"},name:"newExpandedKeys"}],return:{name:"union",raw:"void | undefined",elements:[{name:"void"},{name:"undefined"}]}}},description:"Callback function for when a treeNode is loaded by loadData function"},loadedKeys:{required:!1,tsType:{name:"union",raw:"string[] | undefined",elements:[{name:"Array",elements:[{name:"string"}],raw:"string[]"},{name:"undefined"}]},description:"Specifies the keys of the loaded treeNodes by loadData function"},autoExpandParent:{required:!1,tsType:{name:"boolean"},description:"Whether to automatically expand a parent treeNode"},onDragStart:{required:!1,tsType:{name:"signature",type:"function",raw:"(info: NodeDragEventParams) => void",signature:{arguments:[{type:{name:"NodeDragEventParams"},name:"info"}],return:{name:"void"}}},description:"Callback function for when the onDragStart event occurs"},onDragEnter:{required:!1,tsType:{name:"signature",type:"function",raw:"(\n  info: NodeDragEventParams & {\n    expandedKeys: Key[]\n  }\n) => void",signature:{arguments:[{type:{name:"intersection",raw:"NodeDragEventParams & {\n  expandedKeys: Key[]\n}",elements:[{name:"NodeDragEventParams"},{name:"signature",type:"object",raw:"{\n  expandedKeys: Key[]\n}",signature:{properties:[{key:"expandedKeys",value:{name:"Array",elements:[{name:"Key"}],raw:"Key[]",required:!0}}]}}]},name:"info"}],return:{name:"void"}}},description:"Callback function for when the onDragEnter event occurs"},onDragOver:{required:!1,tsType:{name:"signature",type:"function",raw:"(info: NodeDragEventParams) => void",signature:{arguments:[{type:{name:"NodeDragEventParams"},name:"info"}],return:{name:"void"}}},description:"Callback function for when the onDragOver event occurs"},onDragLeave:{required:!1,tsType:{name:"signature",type:"function",raw:"(info: NodeDragEventParams) => void",signature:{arguments:[{type:{name:"NodeDragEventParams"},name:"info"}],return:{name:"void"}}},description:"Callback function for when the onDragLeave event occurs"},onDragEnd:{required:!1,tsType:{name:"signature",type:"function",raw:"(info: NodeDragEventParams) => void",signature:{arguments:[{type:{name:"NodeDragEventParams"},name:"info"}],return:{name:"void"}}},description:"Callback function for when the onDragEnd event occurs"},onDrop:{required:!1,tsType:{name:"signature",type:"function",raw:"(info: NodeDropEventParams) => void",signature:{arguments:[{type:{name:"intersection",raw:"NodeDragEventParams & {\n  dragNode: EventDataNode,\n  dragNodesKeys: Key[],\n  dropPosition: number,\n  dropToGap: boolean\n}",elements:[{name:"NodeDragEventParams"},{name:"signature",type:"object",raw:"{\n  dragNode: EventDataNode,\n  dragNodesKeys: Key[],\n  dropPosition: number,\n  dropToGap: boolean\n}",signature:{properties:[{key:"dragNode",value:{name:"EventDataNode",required:!0}},{key:"dragNodesKeys",value:{name:"Array",elements:[{name:"Key"}],raw:"Key[]",required:!0}},{key:"dropPosition",value:{name:"number",required:!0}},{key:"dropToGap",value:{name:"boolean",required:!0}}]}}]},name:"info"}],return:{name:"void"}}},description:"Callback function for when the onDrop event occurs"},defaultCheckedKeys:{required:!1,tsType:{name:"Array",elements:[{name:"Key"}],raw:"Key[]"},description:"Specify the keys of the default checked treeNodes"},defaultExpandedKeys:{required:!1,tsType:{name:"Array",elements:[{name:"Key"}],raw:"Key[]"},description:"Specify the keys of the default expanded treeNodes"},blockNode:{required:!1,tsType:{name:"boolean"},description:"Whether treeNode fill remaining horizontal space"},allowUncheck:{required:!1,tsType:{name:"boolean"},description:"Whether user can uncheck an item"},height:{required:!1,tsType:{name:"number"},description:"Config virtual scroll height. Will not support horizontal scroll when enable this"},virtual:{required:!1,tsType:{name:"boolean"},description:"Disable virtual scroll when set to false"},invalid:{required:!1,tsType:{name:"boolean"},description:"Is invalid"},multiple:{required:!1,tsType:{name:"boolean"},description:"",defaultValue:{value:"false",computed:!1}}}};var utils=__webpack_require__("./src/tree/utils.ts"),js=__webpack_require__("./node_modules/@kaspersky/hexa-ui-core/esm/colors/js/index.js");const meta_namespaceObject=JSON.parse('{"dod":{"designTokens":true,"useThemedHook":true,"unitTests":true,"screenshotTests":false,"migration":true,"apiTable":true,"storybook":true},"component":"Tree","description":"В качестве основы используется Tree из библиотеки Antd.","usage":"Компонент Tree предназначен для отображения иерархической структуры","designLink":"https://www.figma.com/file/9hiN2DbkqbxbhR9EWRI1VK/B2B-UI-KIT?node-id=30551%3A107886"}');function getKeys(nodes){const out=[];for(const node of nodes)out.push(node.key),node.children&&out.push(...getKeys(node.children));return out}function generateTreeData(num,config={depth:3,width:3}){const nodes=[];let currentRootWidth=0,currentNum=0;function isNumberOfNodesExceeded(){return currentNum>=num}function flipCoin(){return Math.random()<.5}function createNode(key,currentDepth){const node={key,isLeaf:!0,title:key};if(currentNum++,!isNumberOfNodesExceeded()&&config.depth>currentDepth&&flipCoin()){node.isLeaf=!1,node.children=[];let childrenNumber=0;for(;node.children.push(createNode(`${key}-${childrenNumber++}`,currentDepth+1)),!isNumberOfNodesExceeded()&&config.width!==childrenNumber&&!flipCoin(););}return node}function createRootNode(){return createNode("0-"+currentRootWidth++,1)}for(;!isNumberOfNodesExceeded();)nodes.push(createRootNode());return nodes}function Tree_stories_extends(){return Tree_stories_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},Tree_stories_extends.apply(null,arguments)}const Tree_stories={title:"Hexa UI Components/Tree",component:TreeList,argTypes:{allowUncheck:{control:"boolean"},autoExpandParent:{control:"boolean"},blockNode:{control:"boolean"},checkChildren:{control:"boolean"},checkParents:{control:"boolean"},checkStrictly:{control:"boolean"},checkedKeys:{control:"object"},defaultCheckedKeys:{control:"object"},defaultExpandedKeys:{control:"object"},disabled:{control:"boolean"},expandedKeys:{control:"object"},invalid:{control:"boolean"},loadData:{},loadedKeys:{control:"object"},treeData:{control:"object"}},args:{klId:"tree-kl-id",testId:"tree-test-id"},parameters:{actions:{argTypesRegex:"^(on.*)"},badges:[badges.j.stable,badges.j.reviewedByDesign],controls:{exclude:/(componentId|componentType|dataTestId|showLine|theme)/,sort:"alpha"},docs:{page:(0,withMeta.C)(meta_namespaceObject)}}},treeDataMock=[{title:"Main",key:"0-0",children:[{title:"Categorized assets",disabled:!0,key:"0-0-0",children:[{title:"Address space",key:"0-0-0-0",children:[{title:"Address space",key:"0-0-0-0-0"}]},{title:"Business impact",key:"0-0-0-1"},{title:"Location",key:"0-0-0-2"}]}]},{title:"KUMA Updater",key:"0-1",children:[{title:"Categorized assets",key:"0-1-0",children:[{title:"Address space",key:"0-1-0-0"},{title:"Business impact",key:"0-1-0-1"},{title:"Location",key:"0-1-0-2"}]}]},{title:"Shared",key:"0-2",children:[{title:"Categorized assets",key:"0-2-0",children:[{title:"Address space",key:"0-2-0-0"},{title:"Business impact",key:"0-2-0-1"},{title:"Location",key:"0-2-0-2"}]},{title:"Org chart",key:"0-2-1",children:[{title:"Shared chart",key:"0-2-1-0"}]},{title:"Test chart",key:"0-2-2",children:[{title:"Test common",key:"0-2-2-0"}]}]}];function TreeWrapper({Component,...props}){const[checkedKeys,setCheckedKeys]=react.useState(props.checkedKeys);react.useEffect((()=>setCheckedKeys(props.checkedKeys)),[props.checkedKeys]);const props2=(0,helpers.RV)((0,helpers.zf)({...props,checkedKeys},["checkedKeys","defaultCheckedKeys","defaultExpandedKeys","expandedKeys"]),{onCheck:keys=>setCheckedKeys([...keys])});return react.createElement(Component,props2)}const TreeListBasic={render:args=>react.createElement(TreeWrapper,Tree_stories_extends({},args,{Component:TreeList})),args:{mode:"multipleChoice",treeData:treeDataMock}};function LoadDataAsynchronously({Component,...props}){const[treeData,setTreeData]=react.useState([{key:"0-0",title:"0-0",checkable:!1}]),updateTreeData=(nodes,key,children)=>nodes.map((node=>node.key===key?{...node,children}:node.children?{...node,children:updateTreeData(node.children,key,children)}:node));return react.createElement(Component,Tree_stories_extends({},props,{loadData:async node=>{var _props$loadData;null===(_props$loadData=props.loadData)||void 0===_props$loadData||_props$loadData.call(props,node),await new Promise((resolve=>setTimeout(resolve,2e3))),setTreeData(updateTreeData(treeData,node.key,[{key:`${node.key}-0`,title:`${node.title}-0`},{key:`${node.key}-1`,isLeaf:!0,title:`${node.title}-1`}]))},treeData}))}const TreeListLoadDataAsynchronously={render:args=>react.createElement(LoadDataAsynchronously,Tree_stories_extends({},args,{Component:TreeList})),args:{mode:"multipleChoice"},parameters:{actions:{argTypesRegex:"^(on.*|loadData)"},controls:{exclude:/(componentId|componentType|dataTestId|showLine|theme|treeData)/}}},TreeNavBasic={render:args=>react.createElement(TreeWrapper,Tree_stories_extends({},args,{Component:TreeNav})),args:{multiple:!0,treeData:treeDataMock},parameters:{controls:{exclude:/(componentId|componentType|mode|showLine|theme)/}}},TreeNavMultipleChoiceWithALotOfData={...TreeNavBasic,render:args=>{const treeData=react.useMemo((()=>[{key:"all",title:"all",children:generateTreeData(400,{depth:3,width:10})}]),[]),defaultExpandedKeys=react.useMemo((()=>getKeys(treeData)),[treeData]);return react.createElement(TreeNav,Tree_stories_extends({},args,{defaultExpandedKeys,treeData}))},args:{checkParents:!0,multiple:!0},parameters:{controls:{exclude:/(componentId|componentType|defaultExpandedKeys|mode|showLine|theme|treeData)/}}},TreeNavLoadDataAsynchronously={...TreeNavBasic,render:args=>react.createElement(LoadDataAsynchronously,Tree_stories_extends({},args,{Component:TreeNav})),args:{multiple:!0},parameters:{actions:{argTypesRegex:"^(on.*|loadData)"},controls:{exclude:/(componentId|componentType|dataTestId|mode|showLine|theme|treeData)/}}},defaultData=generateTreeData(20),TreeNavDraggable={...TreeNavBasic,render:args=>{const[gData,setGData]=react.useState(args.treeData);return react.createElement(TreeNav,Tree_stories_extends({},args,{onDrop:info=>{var _args$onDrop;null===(_args$onDrop=args.onDrop)||void 0===_args$onDrop||_args$onDrop.call(args,info),setGData((0,utils.dj)(info,gData))},treeData:gData}))},args:{blockNode:!0,defaultExpandedKeys:["0-0","0-0-0","0-0-0-0"],draggable:!0,checkParents:!0,treeData:defaultData}},ColorTokens={args:{source:{tree:js.Ah.tree}},render:args=>react.createElement(Palette.r,args),parameters:{controls:{include:/(source)/}}};TreeListBasic.parameters={...TreeListBasic.parameters,docs:{...TreeListBasic.parameters?.docs,source:{originalSource:"{\n  render: args => <TreeWrapper {...args} Component={TreeList} />,\n  args: {\n    mode: 'multipleChoice',\n    treeData: treeDataMock\n  }\n}",...TreeListBasic.parameters?.docs?.source}}},TreeListLoadDataAsynchronously.parameters={...TreeListLoadDataAsynchronously.parameters,docs:{...TreeListLoadDataAsynchronously.parameters?.docs,source:{originalSource:"{\n  render: args => <LoadDataAsynchronously {...args} Component={TreeList} />,\n  args: {\n    mode: 'multipleChoice'\n  },\n  parameters: {\n    actions: {\n      argTypesRegex: '^(on.*|loadData)'\n    },\n    controls: {\n      exclude: /(componentId|componentType|dataTestId|showLine|theme|treeData)/\n    }\n  }\n}",...TreeListLoadDataAsynchronously.parameters?.docs?.source}}},TreeNavBasic.parameters={...TreeNavBasic.parameters,docs:{...TreeNavBasic.parameters?.docs,source:{originalSource:"{\n  render: args => <TreeWrapper {...args} Component={TreeNav} />,\n  args: {\n    multiple: true,\n    treeData: treeDataMock\n  },\n  parameters: {\n    controls: {\n      exclude: /(componentId|componentType|mode|showLine|theme)/\n    }\n  }\n}",...TreeNavBasic.parameters?.docs?.source}}},TreeNavMultipleChoiceWithALotOfData.parameters={...TreeNavMultipleChoiceWithALotOfData.parameters,docs:{...TreeNavMultipleChoiceWithALotOfData.parameters?.docs,source:{originalSource:"{\n  ...TreeNavBasic,\n  render: args => {\n    const treeData = React.useMemo(() => {\n      return [{\n        key: 'all',\n        title: 'all',\n        children: generateTreeData(400, {\n          depth: 3,\n          width: 10\n        })\n      }];\n    }, []);\n    const defaultExpandedKeys = React.useMemo(() => getKeys(treeData), [treeData]);\n    return <TreeNav {...args} defaultExpandedKeys={defaultExpandedKeys} treeData={treeData} />;\n  },\n  args: {\n    checkParents: true,\n    multiple: true\n  },\n  parameters: {\n    controls: {\n      exclude: /(componentId|componentType|defaultExpandedKeys|mode|showLine|theme|treeData)/\n    }\n  }\n}",...TreeNavMultipleChoiceWithALotOfData.parameters?.docs?.source}}},TreeNavLoadDataAsynchronously.parameters={...TreeNavLoadDataAsynchronously.parameters,docs:{...TreeNavLoadDataAsynchronously.parameters?.docs,source:{originalSource:"{\n  ...TreeNavBasic,\n  render: args => <LoadDataAsynchronously {...args} Component={TreeNav} />,\n  args: {\n    multiple: true\n  },\n  parameters: {\n    actions: {\n      argTypesRegex: '^(on.*|loadData)'\n    },\n    controls: {\n      exclude: /(componentId|componentType|dataTestId|mode|showLine|theme|treeData)/\n    }\n  }\n}",...TreeNavLoadDataAsynchronously.parameters?.docs?.source}}},TreeNavDraggable.parameters={...TreeNavDraggable.parameters,docs:{...TreeNavDraggable.parameters?.docs,source:{originalSource:"{\n  ...TreeNavBasic,\n  render: args => {\n    const [gData, setGData] = React.useState(args.treeData!);\n    return <TreeNav {...args} onDrop={info => {\n      args.onDrop?.(info);\n      setGData(applyDropToTreeData(info, gData));\n    }} treeData={gData} />;\n  },\n  args: {\n    blockNode: true,\n    defaultExpandedKeys: ['0-0', '0-0-0', '0-0-0-0'],\n    draggable: true,\n    checkParents: true,\n    treeData: defaultData\n  }\n}",...TreeNavDraggable.parameters?.docs?.source}}},ColorTokens.parameters={...ColorTokens.parameters,docs:{...ColorTokens.parameters?.docs,source:{originalSource:"{\n  args: {\n    source: {\n      tree: componentColors.tree\n    }\n  },\n  render: args => <ThemedPalette {...args} />,\n  parameters: {\n    controls: {\n      include: /(source)/\n    }\n  }\n}",...ColorTokens.parameters?.docs?.source}}};const __namedExportsOrder=["TreeListBasic","TreeListLoadDataAsynchronously","TreeNavBasic","TreeNavMultipleChoiceWithALotOfData","TreeNavLoadDataAsynchronously","TreeNavDraggable","ColorTokens"]}}]);