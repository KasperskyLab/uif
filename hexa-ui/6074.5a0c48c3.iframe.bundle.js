"use strict";(self.webpackChunk_kaspersky_hexa_ui=self.webpackChunk_kaspersky_hexa_ui||[]).push([[6074],{"./helpers/components/AdditionalContent.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{P:()=>AdditionalContent});var _src_help_message__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/help-message/HelpMessage.tsx"),react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const StyledAdditionalContent=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js").Ay.div.withConfig({displayName:"AdditionalContent__StyledAdditionalContent",componentId:"sc-15dsamg-0"})(["display:flex;flex-direction:column;gap:8px;margin-top:4px;margin-left:","px;"],(({_margin})=>_margin)),AdditionalContent=({description,dependentElement,_margin=18})=>description||dependentElement?react__WEBPACK_IMPORTED_MODULE_0__.createElement(StyledAdditionalContent,{_margin},description&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_src_help_message__WEBPACK_IMPORTED_MODULE_2__.p,{text:description}),dependentElement):null;AdditionalContent.__docgenInfo={description:"",methods:[],displayName:"AdditionalContent",props:{description:{required:!1,tsType:{name:"string"},description:""},dependentElement:{required:!1,tsType:{name:"ReactNode"},description:""},_margin:{defaultValue:{value:"18",computed:!1},required:!1}}}},"./src/checkbox/Checkbox.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Sc:()=>Checkbox,$Q:()=>CheckboxGroup,qX:()=>StyledCheckboxWrapper});var AdditionalContent=__webpack_require__("./helpers/components/AdditionalContent.tsx"),useTestAttribute=__webpack_require__("./helpers/hooks/useTestAttribute.ts"),FormLabel=__webpack_require__("./src/form-label/FormLabel.tsx"),es_checkbox=__webpack_require__("./node_modules/antd/es/checkbox/index.js"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),react=__webpack_require__("./node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),v4=__webpack_require__("./node_modules/uuid/dist/esm-browser/v4.js"),checkboxCss=__webpack_require__("./src/checkbox/checkboxCss.ts"),useThemedComponent=__webpack_require__("./helpers/useThemedComponent.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const StyledCheckbox=(0,styled_components_browser_esm.Ay)(es_checkbox.A).withConfig({shouldForwardProp:prop=>!["cssConfig"].includes(prop)}).withConfig({displayName:"Checkbox__StyledCheckbox",componentId:"sc-2sp3aa-0"})(["",""],checkboxCss.Z$),StyledCheckboxWrapper=styled_components_browser_esm.Ay.div.withConfig({displayName:"Checkbox__StyledCheckboxWrapper",componentId:"sc-2sp3aa-1"})(["display:flex;flex-direction:column;"]),Checkbox=rawProps=>{const themedProps=(props=>(0,useThemedComponent.K)({...props,mode:void 0},{componentName:"checkbox",defaultValues:{}}))(rawProps),props=(0,useTestAttribute.a)(themedProps);return react.createElement(CheckboxView,_extends({role:"checkbox"},props,{mode:rawProps.mode}))},CheckboxView=({className,invalid,children,disabled,readonly,required,tooltip,mode="primary",testAttributes,description,dependentElement,...rest})=>{const uid=(0,v4.A)();return react.createElement("div",_extends({},testAttributes,{className:"kl6-checkbox-wrapper"}),react.createElement(StyledCheckbox,_extends({id:uid,disabled:disabled||readonly,className:classnames_default()(className,{"kl6-checkbox-invalid":invalid,"kl6-checkbox-readonly":readonly})},rest),"string"==typeof children?react.createElement(FormLabel.l,{disabled,required,tooltip,mode,htmlFor:uid},children):children),react.createElement(AdditionalContent.P,{description,dependentElement}))},CheckboxGroup=({direction="vertical",options,className,role="checkbox-group",onChange,...rawProps})=>{const{testAttributes,...rest}=(0,useTestAttribute.a)(rawProps);return react.createElement(checkboxCss.Me,_extends({},testAttributes,rest,{onChange,role,className:classnames_default()(className,{"kl6-checkbox-group-vertical":"vertical"===direction,"kl6-checkbox-group-horizontal":"horizontal"===direction})}),null==options?void 0:options.map((option=>react.createElement(Checkbox,_extends({},rest,{key:option.value,value:option.value,disabled:option.disabled&&!rest.readonly||rest.disabled,readonly:option.readonly&&!rest.disabled||rest.readonly,mode:option.mode||rest.mode,description:option.description,invalid:option.invalid||rest.invalid,klId:`${rawProps.klId}-${option.value}`,testId:`${rawProps.testId}-${option.value}`}),option.label))))};Checkbox.Group=CheckboxGroup,Checkbox.__docgenInfo={description:"",methods:[{name:"Group",docblock:null,modifiers:["static"],params:[{name:"{\n  direction = 'vertical',\n  options,\n  className,\n  role = 'checkbox-group',\n  onChange,\n  ...rawProps\n}: CheckboxGroupProps",optional:!1,type:{name:"intersection",raw:"AntdCheckboxGroupProps & CheckboxThemeProps & TestingProps & {\n  /** Group options */\n  options?: CheckboxOption[],\n  /** Is invalid */\n  invalid?: boolean,\n  /** Is readonly */\n  readonly?: boolean,\n  /** Form label mode */\n  mode?: FormLabelMode,\n  /** Group direction */\n  direction?: 'horizontal' | 'vertical',\n  /** HTML role */\n  role?: string,\n  /** Called when the state changes */\n  onChange?: (checkedValue: any) => void\n}",elements:[{name:"AntdCheckboxGroupProps"},{name:"signature",type:"object",raw:"{\n  /** Custom theme */\n  theme?: Theme\n}",signature:{properties:[{key:"theme",value:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}],required:!1},description:"Custom theme"}]}},{name:"signature",type:"object",raw:"{\n  /** Actual identifier for autotesting, whill be passed to HTML attribute data-testid */\n  testId?: string,\n  /** @deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id */\n  klId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  componentId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  dataTestId?: string,\n  componentType?: string\n}",signature:{properties:[{key:"testId",value:{name:"string",required:!1},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},{key:"klId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},{key:"componentId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"dataTestId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"componentType",value:{name:"string",required:!1}}]}},{name:"signature",type:"object",raw:"{\n  /** Group options */\n  options?: CheckboxOption[],\n  /** Is invalid */\n  invalid?: boolean,\n  /** Is readonly */\n  readonly?: boolean,\n  /** Form label mode */\n  mode?: FormLabelMode,\n  /** Group direction */\n  direction?: 'horizontal' | 'vertical',\n  /** HTML role */\n  role?: string,\n  /** Called when the state changes */\n  onChange?: (checkedValue: any) => void\n}",signature:{properties:[{key:"options",value:{name:"Array",elements:[{name:"intersection",raw:"Omit<CheckboxProps, 'children'> & {\n  label: CheckboxProps['children']\n}",elements:[{name:"Omit",elements:[{name:"intersection",raw:"AntdCheckboxProps & CheckboxThemeProps & TestingProps & WithAdditionalContent<{\n  /** React children */\n  children?: ReactNode,\n  /** Custom class name */\n  className?: string,\n  /** Is readonly */\n  readonly?: boolean,\n  /** Is invalid */\n  invalid?: boolean,\n  /** HTML role */\n  role?: string,\n  /** Called when the checkbox is focused */\n  onFocus?: FocusEventHandler,\n  /** If form label is required */\n  required?: boolean,\n  /** Form label tooltip content */\n  tooltip?: ReactNode,\n  /** Form label mode */\n  mode?: FormLabelMode\n}>",elements:[{name:"AntdCheckboxProps"},{name:"signature",type:"object",raw:"{\n  /** Custom theme */\n  theme?: Theme\n}",signature:{properties:[{key:"theme",value:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}],required:!1},description:"Custom theme"}]}},{name:"signature",type:"object",raw:"{\n  /** Actual identifier for autotesting, whill be passed to HTML attribute data-testid */\n  testId?: string,\n  /** @deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id */\n  klId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  componentId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  dataTestId?: string,\n  componentType?: string\n}",signature:{properties:[{key:"testId",value:{name:"string",required:!1},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},{key:"klId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},{key:"componentId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"dataTestId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"componentType",value:{name:"string",required:!1}}]}},{name:"intersection",raw:"T & {\n  description?: string,\n  dependentElement?: ReactNode\n}",elements:[{name:"signature",type:"object",raw:"{\n  /** React children */\n  children?: ReactNode,\n  /** Custom class name */\n  className?: string,\n  /** Is readonly */\n  readonly?: boolean,\n  /** Is invalid */\n  invalid?: boolean,\n  /** HTML role */\n  role?: string,\n  /** Called when the checkbox is focused */\n  onFocus?: FocusEventHandler,\n  /** If form label is required */\n  required?: boolean,\n  /** Form label tooltip content */\n  tooltip?: ReactNode,\n  /** Form label mode */\n  mode?: FormLabelMode\n}",signature:{properties:[{key:"children",value:{name:"ReactNode",required:!1},description:"React children"},{key:"className",value:{name:"string",required:!1},description:"Custom class name"},{key:"readonly",value:{name:"boolean",required:!1},description:"Is readonly"},{key:"invalid",value:{name:"boolean",required:!1},description:"Is invalid"},{key:"role",value:{name:"string",required:!1},description:"HTML role"},{key:"onFocus",value:{name:"FocusEventHandler",required:!1},description:"Called when the checkbox is focused"},{key:"required",value:{name:"boolean",required:!1},description:"If form label is required"},{key:"tooltip",value:{name:"ReactNode",required:!1},description:"Form label tooltip content"},{key:"mode",value:{name:"union",raw:"'primary' | 'secondary' | 'disabled'",elements:[{name:"literal",value:"'primary'"},{name:"literal",value:"'secondary'"},{name:"literal",value:"'disabled'"}],required:!1},description:"Form label mode"}]}},{name:"signature",type:"object",raw:"{\n  description?: string,\n  dependentElement?: ReactNode\n}",signature:{properties:[{key:"description",value:{name:"string",required:!1}},{key:"dependentElement",value:{name:"ReactNode",required:!1}}]}}]}]},{name:"literal",value:"'children'"}],raw:"Omit<CheckboxProps, 'children'>"},{name:"signature",type:"object",raw:"{\n  label: CheckboxProps['children']\n}",signature:{properties:[{key:"label",value:{name:"intersection['children']",raw:"CheckboxProps['children']",required:!0}}]}}]}],raw:"CheckboxOption[]",required:!1},description:"Group options"},{key:"invalid",value:{name:"boolean",required:!1},description:"Is invalid"},{key:"readonly",value:{name:"boolean",required:!1},description:"Is readonly"},{key:"mode",value:{name:"union",raw:"'primary' | 'secondary' | 'disabled'",elements:[{name:"literal",value:"'primary'"},{name:"literal",value:"'secondary'"},{name:"literal",value:"'disabled'"}],required:!1},description:"Form label mode"},{key:"direction",value:{name:"union",raw:"'horizontal' | 'vertical'",elements:[{name:"literal",value:"'horizontal'"},{name:"literal",value:"'vertical'"}],required:!1},description:"Group direction"},{key:"role",value:{name:"string",required:!1},description:"HTML role"},{key:"onChange",value:{name:"signature",type:"function",raw:"(checkedValue: any) => void",signature:{arguments:[{type:{name:"any"},name:"checkedValue"}],return:{name:"void"}},required:!1},description:"Called when the state changes"}]}}],alias:"CheckboxGroupProps"}}],returns:null}],displayName:"Checkbox",props:{theme:{required:!1,tsType:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:"Custom theme"},testId:{required:!1,tsType:{name:"string"},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},klId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},componentId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},dataTestId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},componentType:{required:!1,tsType:{name:"string"},description:""},description:{required:!1,tsType:{name:"string"},description:""},dependentElement:{required:!1,tsType:{name:"ReactNode"},description:""}}},CheckboxGroup.__docgenInfo={description:"",methods:[],displayName:"CheckboxGroup",props:{theme:{required:!1,tsType:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:"Custom theme"},testId:{required:!1,tsType:{name:"string"},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},klId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},componentId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},dataTestId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},componentType:{required:!1,tsType:{name:"string"},description:""},options:{required:!1,tsType:{name:"Array",elements:[{name:"intersection",raw:"Omit<CheckboxProps, 'children'> & {\n  label: CheckboxProps['children']\n}",elements:[{name:"Omit",elements:[{name:"intersection",raw:"AntdCheckboxProps & CheckboxThemeProps & TestingProps & WithAdditionalContent<{\n  /** React children */\n  children?: ReactNode,\n  /** Custom class name */\n  className?: string,\n  /** Is readonly */\n  readonly?: boolean,\n  /** Is invalid */\n  invalid?: boolean,\n  /** HTML role */\n  role?: string,\n  /** Called when the checkbox is focused */\n  onFocus?: FocusEventHandler,\n  /** If form label is required */\n  required?: boolean,\n  /** Form label tooltip content */\n  tooltip?: ReactNode,\n  /** Form label mode */\n  mode?: FormLabelMode\n}>",elements:[{name:"AntdCheckboxProps"},{name:"signature",type:"object",raw:"{\n  /** Custom theme */\n  theme?: Theme\n}",signature:{properties:[{key:"theme",value:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}],required:!1},description:"Custom theme"}]}},{name:"signature",type:"object",raw:"{\n  /** Actual identifier for autotesting, whill be passed to HTML attribute data-testid */\n  testId?: string,\n  /** @deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id */\n  klId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  componentId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  dataTestId?: string,\n  componentType?: string\n}",signature:{properties:[{key:"testId",value:{name:"string",required:!1},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},{key:"klId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},{key:"componentId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"dataTestId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"componentType",value:{name:"string",required:!1}}]}},{name:"intersection",raw:"T & {\n  description?: string,\n  dependentElement?: ReactNode\n}",elements:[{name:"signature",type:"object",raw:"{\n  /** React children */\n  children?: ReactNode,\n  /** Custom class name */\n  className?: string,\n  /** Is readonly */\n  readonly?: boolean,\n  /** Is invalid */\n  invalid?: boolean,\n  /** HTML role */\n  role?: string,\n  /** Called when the checkbox is focused */\n  onFocus?: FocusEventHandler,\n  /** If form label is required */\n  required?: boolean,\n  /** Form label tooltip content */\n  tooltip?: ReactNode,\n  /** Form label mode */\n  mode?: FormLabelMode\n}",signature:{properties:[{key:"children",value:{name:"ReactNode",required:!1},description:"React children"},{key:"className",value:{name:"string",required:!1},description:"Custom class name"},{key:"readonly",value:{name:"boolean",required:!1},description:"Is readonly"},{key:"invalid",value:{name:"boolean",required:!1},description:"Is invalid"},{key:"role",value:{name:"string",required:!1},description:"HTML role"},{key:"onFocus",value:{name:"FocusEventHandler",required:!1},description:"Called when the checkbox is focused"},{key:"required",value:{name:"boolean",required:!1},description:"If form label is required"},{key:"tooltip",value:{name:"ReactNode",required:!1},description:"Form label tooltip content"},{key:"mode",value:{name:"union",raw:"'primary' | 'secondary' | 'disabled'",elements:[{name:"literal",value:"'primary'"},{name:"literal",value:"'secondary'"},{name:"literal",value:"'disabled'"}],required:!1},description:"Form label mode"}]}},{name:"signature",type:"object",raw:"{\n  description?: string,\n  dependentElement?: ReactNode\n}",signature:{properties:[{key:"description",value:{name:"string",required:!1}},{key:"dependentElement",value:{name:"ReactNode",required:!1}}]}}]}]},{name:"literal",value:"'children'"}],raw:"Omit<CheckboxProps, 'children'>"},{name:"signature",type:"object",raw:"{\n  label: CheckboxProps['children']\n}",signature:{properties:[{key:"label",value:{name:"intersection['children']",raw:"CheckboxProps['children']",required:!0}}]}}]}],raw:"CheckboxOption[]"},description:"Group options"},invalid:{required:!1,tsType:{name:"boolean"},description:"Is invalid"},readonly:{required:!1,tsType:{name:"boolean"},description:"Is readonly"},mode:{required:!1,tsType:{name:"union",raw:"'primary' | 'secondary' | 'disabled'",elements:[{name:"literal",value:"'primary'"},{name:"literal",value:"'secondary'"},{name:"literal",value:"'disabled'"}]},description:"Form label mode"},direction:{required:!1,tsType:{name:"union",raw:"'horizontal' | 'vertical'",elements:[{name:"literal",value:"'horizontal'"},{name:"literal",value:"'vertical'"}]},description:"Group direction",defaultValue:{value:"'vertical'",computed:!1}},role:{required:!1,tsType:{name:"string"},description:"HTML role",defaultValue:{value:"'checkbox-group'",computed:!1}},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(checkedValue: any) => void",signature:{arguments:[{type:{name:"any"},name:"checkedValue"}],return:{name:"void"}}},description:"Called when the state changes"}}}},"./src/checkbox/checkboxCss.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{HL:()=>getCheckboxCss,Me:()=>StyledCheckboxGroup,Z$:()=>checkboxCss});var _design_system_theme_themes_variables__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./design-system/theme/themes/variables.ts"),_helpers_getFromProps__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./helpers/getFromProps.ts"),antd__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/antd/es/checkbox/index.js"),styled_components__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js");const fromCheckboxProps=(0,_helpers_getFromProps__WEBPACK_IMPORTED_MODULE_0__.P)(),getCheckboxCss=fromProps=>(0,styled_components__WEBPACK_IMPORTED_MODULE_1__.AH)(["color:",";line-height:","px;&&{position:relative;display:inline-flex;align-items:flex-start;}&.ant-checkbox-wrapper{display:inline-flex;}&.ant-checkbox-wrapper + &.ant-checkbox-wrapper{margin-left:0;}.ant-checkbox{top:3px;}.ant-checkbox + span{padding:0;margin-left:4px;& .form-label{cursor:pointer;}}.ant-checkbox-inner{height:","px;width:","px;border-color:",";background-color:",";border-radius:","px;}.ant-checkbox-checked .ant-checkbox-inner,.ant-checkbox-indeterminate .ant-checkbox-inner{border-color:",";background-color:",";&::after{border-color:",";border-radius:1px;border-bottom-left-radius:2px;border-top-right-radius:2px;width:5px;height:7.5px;}}.ant-checkbox-checked::after{border:none;}.ant-checkbox-indeterminate .ant-checkbox-inner::after{background-color:",";width:","px;height:","px;border-radius:","px;}&:hover{.ant-checkbox-inner{background-color:",";border-color:",";}.ant-checkbox-checked .ant-checkbox-inner,.ant-checkbox-indeterminate .ant-checkbox-inner{background-color:",";border-color:transparent;}.ant-checkbox-indeterminate .ant-checkbox-inner::after{border-color:",";}.ant-checkbox-indeterminate .ant-checkbox-inner::after{background-color:",";}}.ant-checkbox-input:focus + .ant-checkbox-inner{border-color:",";}.ant-checkbox-checked .ant-checkbox-input:focus + .ant-checkbox-inner,.ant-checkbox-indeterminate .ant-checkbox-input:focus + .ant-checkbox-inner{border-color:transparent;}.ant-checkbox-input:focus-visible + .ant-checkbox-inner{box-shadow:",";}.ant-checkbox-checked .ant-checkbox-input:focus-visible + .ant-checkbox-inner,.ant-checkbox-indeterminate .ant-checkbox-input:focus-visible + .ant-checkbox-inner{background-color:",";}.ant-checkbox-checked .ant-checkbox-input:focus-visible + .ant-checkbox-inner::after{border-color:",";}.ant-checkbox-indeterminate .ant-checkbox-input:focus-visible + .ant-checkbox-inner::after{background-color:",";}&:active{.ant-checkbox-inner{background-color:",";border-color:",";}.ant-checkbox-checked .ant-checkbox-inner,.ant-checkbox-indeterminate .ant-checkbox-inner{background-color:",";border-color:",";box-shadow:none;}.ant-checkbox-checked .ant-checkbox-inner::after{border-color:",";}.ant-checkbox-indeterminate .ant-checkbox-inner::after{background-color:",";}}&&.kl6-checkbox-invalid{.ant-checkbox-inner{border-color:",";background-color:",";}.ant-checkbox-checked .ant-checkbox-inner,.ant-checkbox-indeterminate .ant-checkbox-inner{background-color:",";border-color:",";}.ant-checkbox-checked .ant-checkbox-inner::after{border-color:",";}.ant-checkbox-indeterminate .ant-checkbox-inner::after{background-color:",";}}&.ant-checkbox-wrapper-disabled,.ant-checkbox-disabled{cursor:not-allowed;}.ant-checkbox-disabled{+ span{color:",";cursor:default;& .form-label > span{cursor:default;color:",";}}.ant-checkbox-inner{background-color:"," !important;border-color:transparent !important;}&.ant-checkbox-checked .ant-checkbox-inner,&.ant-checkbox-indeterminate .ant-checkbox-inner{background-color:"," !important;}&.ant-checkbox-checked .ant-checkbox-inner::after{border-color:"," !important;}&.ant-checkbox-indeterminate .ant-checkbox-inner::after{background-color:"," !important;}}&.kl6-checkbox-readonly.ant-checkbox-wrapper-disabled,&.kl6-checkbox-readonly .ant-checkbox-disabled{cursor:default;}&.kl6-checkbox-readonly .ant-checkbox-disabled{+ span{color:",";cursor:default;& .form-label > span{cursor:default;color:",";}}.ant-checkbox-inner{background-color:"," !important;border-color:transparent !important;}&.ant-checkbox-checked .ant-checkbox-inner,&.ant-checkbox-indeterminate .ant-checkbox-inner{background-color:"," !important;}&.ant-checkbox-checked .ant-checkbox-inner::after{border-color:"," !important;}&.ant-checkbox-indeterminate .ant-checkbox-inner::after{background-color:"," !important;}}"],fromProps("default.enabled.color"),_design_system_theme_themes_variables__WEBPACK_IMPORTED_MODULE_2__.m[10],_design_system_theme_themes_variables__WEBPACK_IMPORTED_MODULE_2__.m[7],_design_system_theme_themes_variables__WEBPACK_IMPORTED_MODULE_2__.m[7],fromProps("default.enabled.border"),fromProps("default.enabled.background.unselected"),_design_system_theme_themes_variables__WEBPACK_IMPORTED_MODULE_2__.a[2],fromProps("default.enabled.background.selected"),fromProps("default.enabled.background.selected"),fromProps("default.enabled.checkColor"),fromProps("default.enabled.checkColor"),_design_system_theme_themes_variables__WEBPACK_IMPORTED_MODULE_2__.m[4],_design_system_theme_themes_variables__WEBPACK_IMPORTED_MODULE_2__.m[1],_design_system_theme_themes_variables__WEBPACK_IMPORTED_MODULE_2__.a[2],fromProps("default.hover.background.unselected"),fromProps("default.hover.border"),fromProps("default.hover.background.selected"),fromProps("default.hover.checkColor"),fromProps("default.hover.checkColor"),fromProps("default.enabled.border"),fromProps("focus.boxShadow"),fromProps("default.enabled.background.selected"),fromProps("default.enabled.checkColor"),fromProps("default.enabled.checkColor"),fromProps("default.active.background.unselected"),fromProps("default.active.border"),fromProps("default.active.background.selected"),fromProps("default.active.border"),fromProps("default.active.checkColor"),fromProps("default.active.checkColor"),fromProps("invalid.enabled.border"),fromProps("invalid.enabled.background.unselected"),fromProps("invalid.enabled.background.selected"),fromProps("invalid.enabled.border"),fromProps("invalid.enabled.checkColor"),fromProps("invalid.enabled.checkColor"),fromProps("default.disabled.color"),fromProps("default.disabled.color"),fromProps("default.disabled.background.unselected"),fromProps("default.disabled.background.selected"),fromProps("default.disabled.checkColor"),fromProps("default.disabled.checkColor"),fromProps("default.readonly.color"),fromProps("default.readonly.color"),fromProps("default.readonly.background.unselected"),fromProps("default.readonly.background.selected"),fromProps("default.readonly.checkColor"),fromProps("default.readonly.checkColor")),checkboxCss=getCheckboxCss(fromCheckboxProps),StyledCheckboxGroup=(0,styled_components__WEBPACK_IMPORTED_MODULE_1__.Ay)(antd__WEBPACK_IMPORTED_MODULE_3__.A.Group).withConfig({displayName:"checkboxCss__StyledCheckboxGroup",componentId:"sc-1ecmi3b-0"})(["&.kl6-checkbox-group-vertical{display:flex;flex-direction:column;align-items:flex-start;gap:","px;}&.kl6-checkbox-group-horizontal{display:flex;flex-direction:row;gap:","px;}.ant-checkbox-wrapper + .ant-checkbox-wrapper{margin-left:0;}"],_design_system_theme_themes_variables__WEBPACK_IMPORTED_MODULE_2__.m[4],_design_system_theme_themes_variables__WEBPACK_IMPORTED_MODULE_2__.m[8])},"./src/help-message/HelpMessage.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{p:()=>HelpMessage});var useTestAttribute=__webpack_require__("./helpers/hooks/useTestAttribute.ts"),classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),react=__webpack_require__("./node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),Text_styled=__webpack_require__("./src/typography/text/Text.styled.tsx");const fromProps=(0,__webpack_require__("./helpers/getFromProps.ts").P)(),helpMessageCss=(0,styled_components_browser_esm.AH)(["color:",""],fromProps("color"));var useThemedComponent=__webpack_require__("./helpers/useThemedComponent.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const StyledHelpMessage=(0,styled_components_browser_esm.Ay)(Text_styled.E).withConfig({shouldForwardProp:prop=>!["cssConfig"].includes(prop)}).attrs({type:"BTR4"}).withConfig({displayName:"HelpMessage__StyledHelpMessage",componentId:"sc-1ij6otj-0"})(["",""],helpMessageCss),HelpMessage=rawProps=>{const themedProps=(props=>(0,useThemedComponent.K)(props,{componentName:"helpMessage",defaultValues:{mode:"common"}}))(rawProps),props=(0,useTestAttribute.a)(themedProps);return react.createElement(HelpMessageView,props)},HelpMessageView=({text,testAttributes,className,...rest})=>react.createElement(StyledHelpMessage,_extends({className:classnames_default()("kl6-help-message",className)},testAttributes,rest),text);HelpMessage.__docgenInfo={description:"",methods:[],displayName:"HelpMessage",props:{text:{required:!1,tsType:{name:"string"},description:"Displayed text (instead of count)"},className:{required:!1,tsType:{name:"string"},description:"Custom class name"},mode:{required:!1,tsType:{name:"union",raw:"'error' | 'warning' | 'success' | 'common'",elements:[{name:"literal",value:"'error'"},{name:"literal",value:"'warning'"},{name:"literal",value:"'success'"},{name:"literal",value:"'common'"}]},description:"Color mode"},theme:{required:!1,tsType:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:"Custom theme"},testId:{required:!1,tsType:{name:"string"},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},klId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},componentId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},dataTestId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},componentType:{required:!1,tsType:{name:"string"},description:""}}}}}]);