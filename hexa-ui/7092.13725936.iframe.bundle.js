"use strict";(self.webpackChunk_kaspersky_hexa_ui=self.webpackChunk_kaspersky_hexa_ui||[]).push([[7092],{"./.storybook/helpers.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ac:()=>sbSetDefaultValue,Of:()=>sbHideControls,RV:()=>sbMergeActions,zf:()=>sbFixArrayArgs});const sbSetDefaultValue=text=>({table:{defaultValue:{summary:text}}}),sbHideControls=controls=>controls.reduce(((acc,control)=>(acc[control]={control:!1},acc)),{});function sbFixArrayArgs(args,arrayKeys){const out={...args};for(const key of arrayKeys)Array.isArray(out[key])||delete out[key];return out}function sbMergeActions(args,actions){const out={...args};for(const key in actions){const addonAction=out[key],action=actions[key];out[key]=(...args2)=>{null==addonAction||addonAction(...args2),action(...args2)}}return out}},"./src/submenu/Submenu.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Q:()=>Submenu});var useTestAttribute=__webpack_require__("./helpers/hooks/useTestAttribute.ts"),react=__webpack_require__("./node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),getFromProps=__webpack_require__("./helpers/getFromProps.ts"),ActionButton=__webpack_require__("./src/action-button/ActionButton.tsx"),Divider=__webpack_require__("./src/divider/Divider.tsx"),Text_styled=__webpack_require__("./src/typography/text/Text.styled.tsx");const fromProps=(0,getFromProps.P)(),TextReducerWrapper=(0,styled_components_browser_esm.AH)(["flex:auto;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;"]),StyledRowBlock=styled_components_browser_esm.Ay.span.withConfig({displayName:"submenuCss__StyledRowBlock",componentId:"sc-8thb5l-0"})([""]),StyledRowText=(0,styled_components_browser_esm.Ay)(Text_styled.E).withConfig({displayName:"submenuCss__StyledRowText",componentId:"sc-8thb5l-1"})([""]),StyledRow=styled_components_browser_esm.Ay.div.withConfig({shouldForwardProp:prop=>!["cssConfig","selected","disabled","leftOffset","truncateText"].includes(prop)}).withConfig({displayName:"submenuCss__StyledRow",componentId:"sc-8thb5l-2"})(["",""],(props=>{const state=props.selected?"selected":"unselected";return(0,styled_components_browser_esm.AH)(["display:flex;gap:4px;cursor:pointer;border-radius:8px;width:232px;padding:6px 8px;background:",";"," ","{color:",";width:100%;","}","{display:flex;align-items:center;height:20px;color:",";}&:hover{background:",";","{color:",";}","{color:",";}}&:active{background:",";","{color:",";}","{color:",";}}&:focus-visible{box-shadow:",";outline:none;}",""],fromProps(`row.${state}.enabled.background`),props.leftOffset&&`padding-left: ${props.leftOffset}px;`,StyledRowText,fromProps(`row.${state}.enabled.color`),props.truncateText&&TextReducerWrapper,StyledRowBlock,fromProps(`row.${state}.enabled.icon`),fromProps(`row.${state}.hover.background`),StyledRowText,fromProps(`row.${state}.hover.color`),StyledRowBlock,fromProps(`row.${state}.hover.icon`),fromProps(`row.${state}.active.background`),StyledRowText,fromProps(`row.${state}.active.color`),StyledRowBlock,fromProps(`row.${state}.active.icon`),fromProps("row.focus.boxShadow"),props.disabled&&`\n        &, &:hover, &:active, &:focus-visible {\n          cursor: not-allowed;\n          box-shadow: none;\n          outline: none;\n          background: ${fromProps(`row.${state}.disabled.background`)(props)};\n          ${StyledRowText} {\n            color: ${fromProps(`row.${state}.disabled.color`)(props)};\n          }\n          ${StyledRowBlock} {\n            color: ${fromProps(`row.${state}.disabled.icon`)(props)};\n          }\n        }\n      `)})),StyledTitleText=(0,styled_components_browser_esm.Ay)(Text_styled.E).withConfig({shouldForwardProp:prop=>!["cssConfig"].includes(prop.toString())}).withConfig({displayName:"submenuCss__StyledTitleText",componentId:"sc-8thb5l-3"})(["color:",";",""],fromProps("title.color"),TextReducerWrapper),StyledTitle=styled_components_browser_esm.Ay.div.withConfig({displayName:"submenuCss__StyledTitle",componentId:"sc-8thb5l-4"})(["display:flex;gap:4px;width:216px;height:16px;margin:0 8px;margin-top:16px;justify-content:space-between;"]),StyledDivider=(0,styled_components_browser_esm.Ay)(Divider.c).withConfig({displayName:"submenuCss__StyledDivider",componentId:"sc-8thb5l-5"})(["width:216px;margin:4px 8px;min-height:1px;"]),StyledActionButton=(0,styled_components_browser_esm.Ay)(ActionButton.r).withConfig({displayName:"submenuCss__StyledActionButton",componentId:"sc-8thb5l-6"})(["margin:0 2px;"]),SubmenuWrapper=styled_components_browser_esm.Ay.div.withConfig({displayName:"submenuCss__SubmenuWrapper",componentId:"sc-8thb5l-7"})(["display:flex;height:100%;"]),SubmenuContent=styled_components_browser_esm.Ay.div.withConfig({displayName:"submenuCss__SubmenuContent",componentId:"sc-8thb5l-8"})(["padding:24px;width:100%;overflow-y:auto;"]),SubmenuItemsStack=styled_components_browser_esm.Ay.div.withConfig({displayName:"submenuCss__SubmenuItemsStack",componentId:"sc-8thb5l-9"})(["overflow-x:hidden;overflow-y:auto;padding:0 16px;display:flex;flex-direction:column;gap:2px;"]),SubmenuElementWrapper=styled_components_browser_esm.Ay.div.withConfig({displayName:"submenuCss__SubmenuElementWrapper",componentId:"sc-8thb5l-10"})(["padding:0 16px;",""],(props=>props.fixToBottom&&"margin-top: auto;")),submenuCss=(0,styled_components_browser_esm.AH)(["display:flex;flex-direction:column;max-width:281px;padding:24px 0;gap:24px;border-right:1px solid ",";"],fromProps("border"));var TextReducer=__webpack_require__("./helpers/components/TextReducer.tsx"),Badge=__webpack_require__("./src/badge/Badge.tsx"),Indicator=__webpack_require__("./src/indicator/Indicator.tsx"),ArrowDownSolid=__webpack_require__("./node_modules/@kaspersky/hexa-ui-icons/esm/8/ArrowDownSolid.js"),ArrowRightSolid=__webpack_require__("./node_modules/@kaspersky/hexa-ui-icons/esm/8/ArrowRightSolid.js");const SubmenuRow=({row,truncateText,collapseOnTextClick,selected,collapsible,onCollapsibleClick,onClick,cssConfig})=>{var _row$action,_row$action2;const handleClick=null!=row&&row.disabled?void 0:onClick;return react.createElement(StyledRow,{selected,disabled:null==row?void 0:row.disabled,leftOffset:8+20*((null==row?void 0:row.level)||0)+((null==row?void 0:row.extraLeftPadding)||0),truncateText,onClick:handleClick,onKeyDown:e=>"Enter"===e.key?null==handleClick?void 0:handleClick():void 0,cssConfig,tabIndex:0},collapsible&&react.createElement(StyledActionButton,{interactive:!1,onClick:onCollapsibleClick,icon:row.opened?react.createElement(ArrowDownSolid.A,null):react.createElement(ArrowRightSolid.A,null),size:"small"}),row.iconBefore&&react.createElement(StyledRowBlock,null,row.iconBefore),react.createElement(StyledRowText,null,truncateText?react.createElement(TextReducer.g,null,react.createElement("span",{onClick:collapseOnTextClick?onCollapsibleClick:void 0},row.text)):react.createElement("span",{onClick:collapseOnTextClick?onCollapsibleClick:void 0},row.text)),row.elementAfter&&react.createElement(StyledRowBlock,null,row.elementAfter),row.notification&&("badge"===row.notification.type?react.createElement(StyledRowBlock,null,react.createElement(Badge.E,row.notification)):react.createElement(StyledRowBlock,null,react.createElement(Indicator.C,row.notification))),row.action&&react.createElement(StyledRowBlock,null,react.createElement(ActionButton.r,{onClick:null===(_row$action=row.action)||void 0===_row$action?void 0:_row$action.onClick,icon:null===(_row$action2=row.action)||void 0===_row$action2?void 0:_row$action2.icon})))},SubmenuTitle=props=>{var _props$action,_props$action2;return react.createElement(StyledTitle,null,react.createElement(StyledTitleText,{type:"BTR4",cssConfig:props.cssConfig},react.createElement(TextReducer.g,null,props.text)),props.action&&react.createElement(ActionButton.r,{icon:null===(_props$action=props.action)||void 0===_props$action?void 0:_props$action.icon,onClick:null===(_props$action2=props.action)||void 0===_props$action2?void 0:_props$action2.onClick}))},SubmenuDivider=()=>react.createElement(StyledDivider,{mode:"light"});function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}SubmenuRow.__docgenInfo={description:"",methods:[],displayName:"SubmenuRow",props:{row:{required:!0,tsType:{name:"intersection",raw:"RowProps & {\n  level?: number,\n  opened?: boolean,\n  extraLeftPadding?: number,\n  children?: LeveledRowProps[]\n}",elements:[{name:"signature",type:"object",raw:"{\n  type: 'row',\n  key: string,\n  text: string,\n  content: ReactNode,\n  contentClassName?: string,\n  disabled?: boolean,\n  draggable?: boolean,\n  iconBefore?: ReactNode,\n  elementAfter?: ReactNode,\n  notification?: BadgeNotification | IndicatorNotification,\n  action?: ActionProps,\n  children?: RowProps[]\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'row'",required:!0}},{key:"key",value:{name:"string",required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"content",value:{name:"ReactNode",required:!0}},{key:"contentClassName",value:{name:"string",required:!1}},{key:"disabled",value:{name:"boolean",required:!1}},{key:"draggable",value:{name:"boolean",required:!1}},{key:"iconBefore",value:{name:"ReactNode",required:!1}},{key:"elementAfter",value:{name:"ReactNode",required:!1}},{key:"notification",value:{name:"union",raw:"BadgeNotification | IndicatorNotification",elements:[{name:"intersection",raw:"{\n  type: 'badge',\n  mode: BadgeNotificationMode\n} & Pick<BadgeProps, 'title' | 'count' | 'text' | 'overflowCount' | 'showZero'>",elements:[{name:"signature",type:"object",raw:"{\n  type: 'badge',\n  mode: BadgeNotificationMode\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'badge'",required:!0}},{key:"mode",value:{name:"Extract",elements:[{name:"union",raw:"BadgeMediumMode | BadgeLargeMode",elements:[{name:"badgeModes[number]",raw:"typeof badgeModes[number]"},{name:"badgeTransparentModes[number]",raw:"typeof badgeTransparentModes[number]"}]},{name:"union",raw:"'new' | 'critical'",elements:[{name:"literal",value:"'new'"},{name:"literal",value:"'critical'"}]}],raw:"Extract<BadgeMode, 'new' | 'critical'>",required:!0}}]}},{name:"Pick",elements:[{name:"intersection",raw:"{\n  /** CSS Class name */\n  className?: string,\n  /** Displayed number */\n  count?: number,\n  /** Displayed text (instead of count) */\n  text?: string,\n  /** Max count to show */\n  overflowCount?: number,\n  /** @deprecated Text to show when hovering over the badge */\n  title?: string,\n  /** Whether to show badge when count is zero */\n  showZero?: boolean\n} & BadgeThemeProps & TestingProps",elements:[{name:"signature",type:"object",raw:"{\n  /** CSS Class name */\n  className?: string,\n  /** Displayed number */\n  count?: number,\n  /** Displayed text (instead of count) */\n  text?: string,\n  /** Max count to show */\n  overflowCount?: number,\n  /** @deprecated Text to show when hovering over the badge */\n  title?: string,\n  /** Whether to show badge when count is zero */\n  showZero?: boolean\n}",signature:{properties:[{key:"className",value:{name:"string",required:!1},description:"CSS Class name"},{key:"count",value:{name:"number",required:!1},description:"Displayed number"},{key:"text",value:{name:"string",required:!1},description:"Displayed text (instead of count)"},{key:"overflowCount",value:{name:"number",required:!1},description:"Max count to show"},{key:"title",value:{name:"string",required:!1},description:"@deprecated Text to show when hovering over the badge"},{key:"showZero",value:{name:"boolean",required:!1},description:"Whether to show badge when count is zero"}]}},{name:"intersection",raw:"(BadgeLargeConfig | BadgeMediumConfig) & {\n  /** Custom theme */\n  theme?: Theme\n}",elements:[{name:"unknown"},{name:"signature",type:"object",raw:"{\n  /** Custom theme */\n  theme?: Theme\n}",signature:{properties:[{key:"theme",value:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}],required:!1},description:"Custom theme"}]}}]},{name:"signature",type:"object",raw:"{\n  /** Actual identifier for autotesting, whill be passed to HTML attribute data-testid */\n  testId?: string,\n  /** @deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id */\n  klId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  componentId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  dataTestId?: string,\n  componentType?: string\n}",signature:{properties:[{key:"testId",value:{name:"string",required:!1},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},{key:"klId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},{key:"componentId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"dataTestId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"componentType",value:{name:"string",required:!1}}]}}]},{name:"union",raw:"'title' | 'count' | 'text' | 'overflowCount' | 'showZero'",elements:[{name:"literal",value:"'title'"},{name:"literal",value:"'count'"},{name:"literal",value:"'text'"},{name:"literal",value:"'overflowCount'"},{name:"literal",value:"'showZero'"}]}],raw:"Pick<BadgeProps, 'title' | 'count' | 'text' | 'overflowCount' | 'showZero'>"}]},{name:"signature",type:"object",raw:"{\n  type: 'indicator',\n  mode: IndicatorNotificationMode\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'indicator'",required:!0}},{key:"mode",value:{name:"Extract",elements:[{name:"IndicatorModes[number]",raw:"typeof IndicatorModes[number]"},{name:"union",raw:"'new' | 'critical' | 'medium'",elements:[{name:"literal",value:"'new'"},{name:"literal",value:"'critical'"},{name:"literal",value:"'medium'"}]}],raw:"Extract<IndicatorMode, 'new' | 'critical' | 'medium'>",required:!0}}]}}],required:!1}},{key:"action",value:{name:"Pick",elements:[{name:"intersection",raw:"ActionButtonHTMLProps & ActionButtonCustomProps",elements:[{name:"ReactButtonHTMLAttributes",raw:"React.ButtonHTMLAttributes<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},{name:"intersection",raw:'{\n  /** Icon component instead of default "cross" icon */\n  icon?: React.ReactNode,\n  /** Without icon */\n  noIcon?: boolean,\n  /** If interactive */\n  interactive?: boolean\n} & ActionButtonThemeProps & TestingProps',elements:[{name:"signature",type:"object",raw:'{\n  /** Icon component instead of default "cross" icon */\n  icon?: React.ReactNode,\n  /** Without icon */\n  noIcon?: boolean,\n  /** If interactive */\n  interactive?: boolean\n}',signature:{properties:[{key:"icon",value:{name:"ReactReactNode",raw:"React.ReactNode",required:!1},description:'Icon component instead of default "cross" icon'},{key:"noIcon",value:{name:"boolean",required:!1},description:"Without icon"},{key:"interactive",value:{name:"boolean",required:!1},description:"If interactive"}]}},{name:"signature",type:"object",raw:"{\n  /** Custom theme */\n  theme?: Theme,\n  /** Size */\n  size?: ActionButtonSize,\n  /** Color mode */\n  mode?: ActionButtonMode\n}",signature:{properties:[{key:"theme",value:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}],required:!1},description:"Custom theme"},{key:"size",value:{name:"union",raw:"'large' | 'medium' | 'small'",elements:[{name:"literal",value:"'large'"},{name:"literal",value:"'medium'"},{name:"literal",value:"'small'"}],required:!1},description:"Size"},{key:"mode",value:{name:"union",raw:"'ghost' | 'ghostInverted' | 'filled' | 'filledInverted' | 'onLight'",elements:[{name:"literal",value:"'ghost'"},{name:"literal",value:"'ghostInverted'"},{name:"literal",value:"'filled'"},{name:"literal",value:"'filledInverted'"},{name:"literal",value:"'onLight'"}],required:!1},description:"Color mode"}]}},{name:"signature",type:"object",raw:"{\n  /** Actual identifier for autotesting, whill be passed to HTML attribute data-testid */\n  testId?: string,\n  /** @deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id */\n  klId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  componentId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  dataTestId?: string,\n  componentType?: string\n}",signature:{properties:[{key:"testId",value:{name:"string",required:!1},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},{key:"klId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},{key:"componentId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"dataTestId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"componentType",value:{name:"string",required:!1}}]}}]}]},{name:"union",raw:"'onClick' | 'icon'",elements:[{name:"literal",value:"'onClick'"},{name:"literal",value:"'icon'"}]}],raw:"Pick<ActionButtonProps, 'onClick' | 'icon'>",required:!1}},{key:"children",value:{name:"Array",elements:[{name:"RowProps"}],raw:"RowProps[]",required:!1}}]}},{name:"signature",type:"object",raw:"{\n  level?: number,\n  opened?: boolean,\n  extraLeftPadding?: number,\n  children?: LeveledRowProps[]\n}",signature:{properties:[{key:"level",value:{name:"number",required:!1}},{key:"opened",value:{name:"boolean",required:!1}},{key:"extraLeftPadding",value:{name:"number",required:!1}},{key:"children",value:{name:"Array",elements:[{name:"LeveledRowProps"}],raw:"LeveledRowProps[]",required:!1}}]}}]},description:""},selected:{required:!0,tsType:{name:"boolean"},description:""},collapsible:{required:!0,tsType:{name:"boolean"},description:""},onCollapsibleClick:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""},onClick:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""}}},SubmenuTitle.__docgenInfo={description:"",methods:[],displayName:"SubmenuTitle",props:{type:{required:!0,tsType:{name:"literal",value:"'title'"},description:""},key:{required:!0,tsType:{name:"string"},description:""},text:{required:!0,tsType:{name:"string"},description:""},action:{required:!1,tsType:{name:"Pick",elements:[{name:"intersection",raw:"ActionButtonHTMLProps & ActionButtonCustomProps",elements:[{name:"ReactButtonHTMLAttributes",raw:"React.ButtonHTMLAttributes<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},{name:"intersection",raw:'{\n  /** Icon component instead of default "cross" icon */\n  icon?: React.ReactNode,\n  /** Without icon */\n  noIcon?: boolean,\n  /** If interactive */\n  interactive?: boolean\n} & ActionButtonThemeProps & TestingProps',elements:[{name:"signature",type:"object",raw:'{\n  /** Icon component instead of default "cross" icon */\n  icon?: React.ReactNode,\n  /** Without icon */\n  noIcon?: boolean,\n  /** If interactive */\n  interactive?: boolean\n}',signature:{properties:[{key:"icon",value:{name:"ReactReactNode",raw:"React.ReactNode",required:!1},description:'Icon component instead of default "cross" icon'},{key:"noIcon",value:{name:"boolean",required:!1},description:"Without icon"},{key:"interactive",value:{name:"boolean",required:!1},description:"If interactive"}]}},{name:"signature",type:"object",raw:"{\n  /** Custom theme */\n  theme?: Theme,\n  /** Size */\n  size?: ActionButtonSize,\n  /** Color mode */\n  mode?: ActionButtonMode\n}",signature:{properties:[{key:"theme",value:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}],required:!1},description:"Custom theme"},{key:"size",value:{name:"union",raw:"'large' | 'medium' | 'small'",elements:[{name:"literal",value:"'large'"},{name:"literal",value:"'medium'"},{name:"literal",value:"'small'"}],required:!1},description:"Size"},{key:"mode",value:{name:"union",raw:"'ghost' | 'ghostInverted' | 'filled' | 'filledInverted' | 'onLight'",elements:[{name:"literal",value:"'ghost'"},{name:"literal",value:"'ghostInverted'"},{name:"literal",value:"'filled'"},{name:"literal",value:"'filledInverted'"},{name:"literal",value:"'onLight'"}],required:!1},description:"Color mode"}]}},{name:"signature",type:"object",raw:"{\n  /** Actual identifier for autotesting, whill be passed to HTML attribute data-testid */\n  testId?: string,\n  /** @deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id */\n  klId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  componentId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  dataTestId?: string,\n  componentType?: string\n}",signature:{properties:[{key:"testId",value:{name:"string",required:!1},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},{key:"klId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},{key:"componentId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"dataTestId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"componentType",value:{name:"string",required:!1}}]}}]}]},{name:"union",raw:"'onClick' | 'icon'",elements:[{name:"literal",value:"'onClick'"},{name:"literal",value:"'icon'"}]}],raw:"Pick<ActionButtonProps, 'onClick' | 'icon'>"},description:""},cssConfig:{required:!0,tsType:{name:"intersection",raw:"StateConfig & {\n  title: StateConfig,\n  row: Focus & Record<'unselected' | 'selected', SubmenuRowStateConfig>\n}",elements:[{name:"signature",type:"object",raw:"{\n  color?: string,\n  border?: string,\n  icon?: string,\n  background?: string\n}",signature:{properties:[{key:"color",value:{name:"string",required:!1}},{key:"border",value:{name:"string",required:!1}},{key:"icon",value:{name:"string",required:!1}},{key:"background",value:{name:"string",required:!1}}]},required:!0},{name:"signature",type:"object",raw:"{\n  title: StateConfig,\n  row: Focus & Record<'unselected' | 'selected', SubmenuRowStateConfig>\n}",signature:{properties:[{key:"title",value:{name:"signature",type:"object",raw:"{\n  color?: string,\n  border?: string,\n  icon?: string,\n  background?: string\n}",signature:{properties:[{key:"color",value:{name:"string",required:!1}},{key:"border",value:{name:"string",required:!1}},{key:"icon",value:{name:"string",required:!1}},{key:"background",value:{name:"string",required:!1}}]},required:!0}},{key:"row",value:{name:"intersection",raw:"Focus & Record<'unselected' | 'selected', SubmenuRowStateConfig>",elements:[{name:"signature",type:"object",raw:"{\n  focus?: {\n    boxShadow: string\n  }\n}",signature:{properties:[{key:"focus",value:{name:"signature",type:"object",raw:"{\n  boxShadow: string\n}",signature:{properties:[{key:"boxShadow",value:{name:"string",required:!0}}]},required:!1}}]}},{name:"Record",elements:[{name:"union",raw:"'unselected' | 'selected'",elements:[{name:"literal",value:"'unselected'"},{name:"literal",value:"'selected'"}]},{name:"Record",elements:[{name:"union",raw:"'enabled' | 'hover' | 'active' | 'disabled'",elements:[{name:"literal",value:"'enabled'"},{name:"literal",value:"'hover'"},{name:"literal",value:"'active'"},{name:"literal",value:"'disabled'"}]},{name:"signature",type:"object",raw:"{\n  color?: string,\n  border?: string,\n  icon?: string,\n  background?: string\n}",signature:{properties:[{key:"color",value:{name:"string",required:!1}},{key:"border",value:{name:"string",required:!1}},{key:"icon",value:{name:"string",required:!1}},{key:"background",value:{name:"string",required:!1}}]},required:!0}],raw:"Record<'enabled' | 'hover' | 'active' | 'disabled', StateConfig>"}],raw:"Record<'unselected' | 'selected', SubmenuRowStateConfig>"}],required:!0}}]}}]},description:""}}},SubmenuDivider.__docgenInfo={description:"",methods:[],displayName:"SubmenuDivider",props:{type:{required:!0,tsType:{name:"literal",value:"'divider'"},description:""}}};const SubmenuItems=({items,...props})=>react.createElement(react.Fragment,null,items.map(((item,index)=>{switch(item.type){case"row":return react.createElement(Row,_extends({},props,{row:item,key:item.key}));case"title":return react.createElement(SubmenuTitle,_extends({},item,{key:item.key,cssConfig:props.cssConfig}));case"divider":return react.createElement(SubmenuDivider,_extends({},item,{key:index}));default:return null}}))),Row=({row,...props})=>{const{children}=row,[showChildren,setShowChildren]=(0,react.useState)(row.opened);return react.createElement(react.Fragment,null,react.createElement(SubmenuRow,_extends({},props,{row:{...row,opened:showChildren},selected:props.activeRowKey===row.key,collapsible:!!children,onCollapsibleClick:()=>{children&&setShowChildren(!showChildren)},onClick:()=>{props.handleActiveRowChange(row)}})),children&&showChildren&&react.createElement(SubmenuItems,_extends({},props,{items:children})))};SubmenuItems.__docgenInfo={description:"",methods:[],displayName:"SubmenuItems",props:{truncateText:{required:!0,tsType:{name:"boolean"},description:""},collapseOnTextClick:{required:!0,tsType:{name:"boolean"},description:""},activeRowKey:{required:!1,tsType:{name:"string"},description:""},handleActiveRowChange:{required:!0,tsType:{name:"signature",type:"function",raw:"(row: LeveledRowProps) => void",signature:{arguments:[{type:{name:"intersection",raw:"RowProps & {\n  level?: number,\n  opened?: boolean,\n  extraLeftPadding?: number,\n  children?: LeveledRowProps[]\n}",elements:[{name:"signature",type:"object",raw:"{\n  type: 'row',\n  key: string,\n  text: string,\n  content: ReactNode,\n  contentClassName?: string,\n  disabled?: boolean,\n  draggable?: boolean,\n  iconBefore?: ReactNode,\n  elementAfter?: ReactNode,\n  notification?: BadgeNotification | IndicatorNotification,\n  action?: ActionProps,\n  children?: RowProps[]\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'row'",required:!0}},{key:"key",value:{name:"string",required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"content",value:{name:"ReactNode",required:!0}},{key:"contentClassName",value:{name:"string",required:!1}},{key:"disabled",value:{name:"boolean",required:!1}},{key:"draggable",value:{name:"boolean",required:!1}},{key:"iconBefore",value:{name:"ReactNode",required:!1}},{key:"elementAfter",value:{name:"ReactNode",required:!1}},{key:"notification",value:{name:"union",raw:"BadgeNotification | IndicatorNotification",elements:[{name:"intersection",raw:"{\n  type: 'badge',\n  mode: BadgeNotificationMode\n} & Pick<BadgeProps, 'title' | 'count' | 'text' | 'overflowCount' | 'showZero'>",elements:[{name:"signature",type:"object",raw:"{\n  type: 'badge',\n  mode: BadgeNotificationMode\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'badge'",required:!0}},{key:"mode",value:{name:"Extract",elements:[{name:"union",raw:"BadgeMediumMode | BadgeLargeMode",elements:[{name:"badgeModes[number]",raw:"typeof badgeModes[number]"},{name:"badgeTransparentModes[number]",raw:"typeof badgeTransparentModes[number]"}]},{name:"union",raw:"'new' | 'critical'",elements:[{name:"literal",value:"'new'"},{name:"literal",value:"'critical'"}]}],raw:"Extract<BadgeMode, 'new' | 'critical'>",required:!0}}]}},{name:"Pick",elements:[{name:"intersection",raw:"{\n  /** CSS Class name */\n  className?: string,\n  /** Displayed number */\n  count?: number,\n  /** Displayed text (instead of count) */\n  text?: string,\n  /** Max count to show */\n  overflowCount?: number,\n  /** @deprecated Text to show when hovering over the badge */\n  title?: string,\n  /** Whether to show badge when count is zero */\n  showZero?: boolean\n} & BadgeThemeProps & TestingProps",elements:[{name:"signature",type:"object",raw:"{\n  /** CSS Class name */\n  className?: string,\n  /** Displayed number */\n  count?: number,\n  /** Displayed text (instead of count) */\n  text?: string,\n  /** Max count to show */\n  overflowCount?: number,\n  /** @deprecated Text to show when hovering over the badge */\n  title?: string,\n  /** Whether to show badge when count is zero */\n  showZero?: boolean\n}",signature:{properties:[{key:"className",value:{name:"string",required:!1},description:"CSS Class name"},{key:"count",value:{name:"number",required:!1},description:"Displayed number"},{key:"text",value:{name:"string",required:!1},description:"Displayed text (instead of count)"},{key:"overflowCount",value:{name:"number",required:!1},description:"Max count to show"},{key:"title",value:{name:"string",required:!1},description:"@deprecated Text to show when hovering over the badge"},{key:"showZero",value:{name:"boolean",required:!1},description:"Whether to show badge when count is zero"}]}},{name:"intersection",raw:"(BadgeLargeConfig | BadgeMediumConfig) & {\n  /** Custom theme */\n  theme?: Theme\n}",elements:[{name:"unknown"},{name:"signature",type:"object",raw:"{\n  /** Custom theme */\n  theme?: Theme\n}",signature:{properties:[{key:"theme",value:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}],required:!1},description:"Custom theme"}]}}]},{name:"signature",type:"object",raw:"{\n  /** Actual identifier for autotesting, whill be passed to HTML attribute data-testid */\n  testId?: string,\n  /** @deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id */\n  klId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  componentId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  dataTestId?: string,\n  componentType?: string\n}",signature:{properties:[{key:"testId",value:{name:"string",required:!1},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},{key:"klId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},{key:"componentId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"dataTestId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"componentType",value:{name:"string",required:!1}}]}}]},{name:"union",raw:"'title' | 'count' | 'text' | 'overflowCount' | 'showZero'",elements:[{name:"literal",value:"'title'"},{name:"literal",value:"'count'"},{name:"literal",value:"'text'"},{name:"literal",value:"'overflowCount'"},{name:"literal",value:"'showZero'"}]}],raw:"Pick<BadgeProps, 'title' | 'count' | 'text' | 'overflowCount' | 'showZero'>"}]},{name:"signature",type:"object",raw:"{\n  type: 'indicator',\n  mode: IndicatorNotificationMode\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'indicator'",required:!0}},{key:"mode",value:{name:"Extract",elements:[{name:"IndicatorModes[number]",raw:"typeof IndicatorModes[number]"},{name:"union",raw:"'new' | 'critical' | 'medium'",elements:[{name:"literal",value:"'new'"},{name:"literal",value:"'critical'"},{name:"literal",value:"'medium'"}]}],raw:"Extract<IndicatorMode, 'new' | 'critical' | 'medium'>",required:!0}}]}}],required:!1}},{key:"action",value:{name:"Pick",elements:[{name:"intersection",raw:"ActionButtonHTMLProps & ActionButtonCustomProps",elements:[{name:"ReactButtonHTMLAttributes",raw:"React.ButtonHTMLAttributes<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},{name:"intersection",raw:'{\n  /** Icon component instead of default "cross" icon */\n  icon?: React.ReactNode,\n  /** Without icon */\n  noIcon?: boolean,\n  /** If interactive */\n  interactive?: boolean\n} & ActionButtonThemeProps & TestingProps',elements:[{name:"signature",type:"object",raw:'{\n  /** Icon component instead of default "cross" icon */\n  icon?: React.ReactNode,\n  /** Without icon */\n  noIcon?: boolean,\n  /** If interactive */\n  interactive?: boolean\n}',signature:{properties:[{key:"icon",value:{name:"ReactReactNode",raw:"React.ReactNode",required:!1},description:'Icon component instead of default "cross" icon'},{key:"noIcon",value:{name:"boolean",required:!1},description:"Without icon"},{key:"interactive",value:{name:"boolean",required:!1},description:"If interactive"}]}},{name:"signature",type:"object",raw:"{\n  /** Custom theme */\n  theme?: Theme,\n  /** Size */\n  size?: ActionButtonSize,\n  /** Color mode */\n  mode?: ActionButtonMode\n}",signature:{properties:[{key:"theme",value:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}],required:!1},description:"Custom theme"},{key:"size",value:{name:"union",raw:"'large' | 'medium' | 'small'",elements:[{name:"literal",value:"'large'"},{name:"literal",value:"'medium'"},{name:"literal",value:"'small'"}],required:!1},description:"Size"},{key:"mode",value:{name:"union",raw:"'ghost' | 'ghostInverted' | 'filled' | 'filledInverted' | 'onLight'",elements:[{name:"literal",value:"'ghost'"},{name:"literal",value:"'ghostInverted'"},{name:"literal",value:"'filled'"},{name:"literal",value:"'filledInverted'"},{name:"literal",value:"'onLight'"}],required:!1},description:"Color mode"}]}},{name:"signature",type:"object",raw:"{\n  /** Actual identifier for autotesting, whill be passed to HTML attribute data-testid */\n  testId?: string,\n  /** @deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id */\n  klId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  componentId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  dataTestId?: string,\n  componentType?: string\n}",signature:{properties:[{key:"testId",value:{name:"string",required:!1},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},{key:"klId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},{key:"componentId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"dataTestId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"componentType",value:{name:"string",required:!1}}]}}]}]},{name:"union",raw:"'onClick' | 'icon'",elements:[{name:"literal",value:"'onClick'"},{name:"literal",value:"'icon'"}]}],raw:"Pick<ActionButtonProps, 'onClick' | 'icon'>",required:!1}},{key:"children",value:{name:"Array",elements:[{name:"RowProps"}],raw:"RowProps[]",required:!1}}]}},{name:"signature",type:"object",raw:"{\n  level?: number,\n  opened?: boolean,\n  extraLeftPadding?: number,\n  children?: LeveledRowProps[]\n}",signature:{properties:[{key:"level",value:{name:"number",required:!1}},{key:"opened",value:{name:"boolean",required:!1}},{key:"extraLeftPadding",value:{name:"number",required:!1}},{key:"children",value:{name:"Array",elements:[{name:"LeveledRowProps"}],raw:"LeveledRowProps[]",required:!1}}]}}]},name:"row"}],return:{name:"void"}}},description:""},cssConfig:{required:!0,tsType:{name:"intersection",raw:"StateConfig & {\n  title: StateConfig,\n  row: Focus & Record<'unselected' | 'selected', SubmenuRowStateConfig>\n}",elements:[{name:"signature",type:"object",raw:"{\n  color?: string,\n  border?: string,\n  icon?: string,\n  background?: string\n}",signature:{properties:[{key:"color",value:{name:"string",required:!1}},{key:"border",value:{name:"string",required:!1}},{key:"icon",value:{name:"string",required:!1}},{key:"background",value:{name:"string",required:!1}}]},required:!0},{name:"signature",type:"object",raw:"{\n  title: StateConfig,\n  row: Focus & Record<'unselected' | 'selected', SubmenuRowStateConfig>\n}",signature:{properties:[{key:"title",value:{name:"signature",type:"object",raw:"{\n  color?: string,\n  border?: string,\n  icon?: string,\n  background?: string\n}",signature:{properties:[{key:"color",value:{name:"string",required:!1}},{key:"border",value:{name:"string",required:!1}},{key:"icon",value:{name:"string",required:!1}},{key:"background",value:{name:"string",required:!1}}]},required:!0}},{key:"row",value:{name:"intersection",raw:"Focus & Record<'unselected' | 'selected', SubmenuRowStateConfig>",elements:[{name:"signature",type:"object",raw:"{\n  focus?: {\n    boxShadow: string\n  }\n}",signature:{properties:[{key:"focus",value:{name:"signature",type:"object",raw:"{\n  boxShadow: string\n}",signature:{properties:[{key:"boxShadow",value:{name:"string",required:!0}}]},required:!1}}]}},{name:"Record",elements:[{name:"union",raw:"'unselected' | 'selected'",elements:[{name:"literal",value:"'unselected'"},{name:"literal",value:"'selected'"}]},{name:"Record",elements:[{name:"union",raw:"'enabled' | 'hover' | 'active' | 'disabled'",elements:[{name:"literal",value:"'enabled'"},{name:"literal",value:"'hover'"},{name:"literal",value:"'active'"},{name:"literal",value:"'disabled'"}]},{name:"signature",type:"object",raw:"{\n  color?: string,\n  border?: string,\n  icon?: string,\n  background?: string\n}",signature:{properties:[{key:"color",value:{name:"string",required:!1}},{key:"border",value:{name:"string",required:!1}},{key:"icon",value:{name:"string",required:!1}},{key:"background",value:{name:"string",required:!1}}]},required:!0}],raw:"Record<'enabled' | 'hover' | 'active' | 'disabled', StateConfig>"}],raw:"Record<'unselected' | 'selected', SubmenuRowStateConfig>"}],required:!0}}]}}]},description:""},items:{required:!0,tsType:{name:"Array",elements:[{name:"union",raw:"DividerProps | TitleProps | LeveledRowProps",elements:[{name:"signature",type:"object",raw:"{\n  type: 'divider'\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'divider'",required:!0}}]}},{name:"signature",type:"object",raw:"{\n  type: 'title',\n  key: string,\n  text: string,\n  action?: ActionProps\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'title'",required:!0}},{key:"key",value:{name:"string",required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"action",value:{name:"Pick",elements:[{name:"intersection",raw:"ActionButtonHTMLProps & ActionButtonCustomProps",elements:[{name:"ReactButtonHTMLAttributes",raw:"React.ButtonHTMLAttributes<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},{name:"intersection",raw:'{\n  /** Icon component instead of default "cross" icon */\n  icon?: React.ReactNode,\n  /** Without icon */\n  noIcon?: boolean,\n  /** If interactive */\n  interactive?: boolean\n} & ActionButtonThemeProps & TestingProps',elements:[{name:"signature",type:"object",raw:'{\n  /** Icon component instead of default "cross" icon */\n  icon?: React.ReactNode,\n  /** Without icon */\n  noIcon?: boolean,\n  /** If interactive */\n  interactive?: boolean\n}',signature:{properties:[{key:"icon",value:{name:"ReactReactNode",raw:"React.ReactNode",required:!1},description:'Icon component instead of default "cross" icon'},{key:"noIcon",value:{name:"boolean",required:!1},description:"Without icon"},{key:"interactive",value:{name:"boolean",required:!1},description:"If interactive"}]}},{name:"signature",type:"object",raw:"{\n  /** Custom theme */\n  theme?: Theme,\n  /** Size */\n  size?: ActionButtonSize,\n  /** Color mode */\n  mode?: ActionButtonMode\n}",signature:{properties:[{key:"theme",value:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}],required:!1},description:"Custom theme"},{key:"size",value:{name:"union",raw:"'large' | 'medium' | 'small'",elements:[{name:"literal",value:"'large'"},{name:"literal",value:"'medium'"},{name:"literal",value:"'small'"}],required:!1},description:"Size"},{key:"mode",value:{name:"union",raw:"'ghost' | 'ghostInverted' | 'filled' | 'filledInverted' | 'onLight'",elements:[{name:"literal",value:"'ghost'"},{name:"literal",value:"'ghostInverted'"},{name:"literal",value:"'filled'"},{name:"literal",value:"'filledInverted'"},{name:"literal",value:"'onLight'"}],required:!1},description:"Color mode"}]}},{name:"signature",type:"object",raw:"{\n  /** Actual identifier for autotesting, whill be passed to HTML attribute data-testid */\n  testId?: string,\n  /** @deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id */\n  klId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  componentId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  dataTestId?: string,\n  componentType?: string\n}",signature:{properties:[{key:"testId",value:{name:"string",required:!1},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},{key:"klId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},{key:"componentId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"dataTestId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"componentType",value:{name:"string",required:!1}}]}}]}]},{name:"union",raw:"'onClick' | 'icon'",elements:[{name:"literal",value:"'onClick'"},{name:"literal",value:"'icon'"}]}],raw:"Pick<ActionButtonProps, 'onClick' | 'icon'>",required:!1}}]}},{name:"intersection",raw:"RowProps & {\n  level?: number,\n  opened?: boolean,\n  extraLeftPadding?: number,\n  children?: LeveledRowProps[]\n}",elements:[{name:"signature",type:"object",raw:"{\n  type: 'row',\n  key: string,\n  text: string,\n  content: ReactNode,\n  contentClassName?: string,\n  disabled?: boolean,\n  draggable?: boolean,\n  iconBefore?: ReactNode,\n  elementAfter?: ReactNode,\n  notification?: BadgeNotification | IndicatorNotification,\n  action?: ActionProps,\n  children?: RowProps[]\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'row'",required:!0}},{key:"key",value:{name:"string",required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"content",value:{name:"ReactNode",required:!0}},{key:"contentClassName",value:{name:"string",required:!1}},{key:"disabled",value:{name:"boolean",required:!1}},{key:"draggable",value:{name:"boolean",required:!1}},{key:"iconBefore",value:{name:"ReactNode",required:!1}},{key:"elementAfter",value:{name:"ReactNode",required:!1}},{key:"notification",value:{name:"union",raw:"BadgeNotification | IndicatorNotification",elements:[{name:"intersection",raw:"{\n  type: 'badge',\n  mode: BadgeNotificationMode\n} & Pick<BadgeProps, 'title' | 'count' | 'text' | 'overflowCount' | 'showZero'>",elements:[{name:"signature",type:"object",raw:"{\n  type: 'badge',\n  mode: BadgeNotificationMode\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'badge'",required:!0}},{key:"mode",value:{name:"Extract",elements:[{name:"union",raw:"BadgeMediumMode | BadgeLargeMode",elements:[{name:"badgeModes[number]",raw:"typeof badgeModes[number]"},{name:"badgeTransparentModes[number]",raw:"typeof badgeTransparentModes[number]"}]},{name:"union",raw:"'new' | 'critical'",elements:[{name:"literal",value:"'new'"},{name:"literal",value:"'critical'"}]}],raw:"Extract<BadgeMode, 'new' | 'critical'>",required:!0}}]}},{name:"Pick",elements:[{name:"intersection",raw:"{\n  /** CSS Class name */\n  className?: string,\n  /** Displayed number */\n  count?: number,\n  /** Displayed text (instead of count) */\n  text?: string,\n  /** Max count to show */\n  overflowCount?: number,\n  /** @deprecated Text to show when hovering over the badge */\n  title?: string,\n  /** Whether to show badge when count is zero */\n  showZero?: boolean\n} & BadgeThemeProps & TestingProps",elements:[{name:"signature",type:"object",raw:"{\n  /** CSS Class name */\n  className?: string,\n  /** Displayed number */\n  count?: number,\n  /** Displayed text (instead of count) */\n  text?: string,\n  /** Max count to show */\n  overflowCount?: number,\n  /** @deprecated Text to show when hovering over the badge */\n  title?: string,\n  /** Whether to show badge when count is zero */\n  showZero?: boolean\n}",signature:{properties:[{key:"className",value:{name:"string",required:!1},description:"CSS Class name"},{key:"count",value:{name:"number",required:!1},description:"Displayed number"},{key:"text",value:{name:"string",required:!1},description:"Displayed text (instead of count)"},{key:"overflowCount",value:{name:"number",required:!1},description:"Max count to show"},{key:"title",value:{name:"string",required:!1},description:"@deprecated Text to show when hovering over the badge"},{key:"showZero",value:{name:"boolean",required:!1},description:"Whether to show badge when count is zero"}]}},{name:"intersection",raw:"(BadgeLargeConfig | BadgeMediumConfig) & {\n  /** Custom theme */\n  theme?: Theme\n}",elements:[{name:"unknown"},{name:"signature",type:"object",raw:"{\n  /** Custom theme */\n  theme?: Theme\n}",signature:{properties:[{key:"theme",value:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}],required:!1},description:"Custom theme"}]}}]},{name:"signature",type:"object",raw:"{\n  /** Actual identifier for autotesting, whill be passed to HTML attribute data-testid */\n  testId?: string,\n  /** @deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id */\n  klId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  componentId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  dataTestId?: string,\n  componentType?: string\n}",signature:{properties:[{key:"testId",value:{name:"string",required:!1},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},{key:"klId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},{key:"componentId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"dataTestId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"componentType",value:{name:"string",required:!1}}]}}]},{name:"union",raw:"'title' | 'count' | 'text' | 'overflowCount' | 'showZero'",elements:[{name:"literal",value:"'title'"},{name:"literal",value:"'count'"},{name:"literal",value:"'text'"},{name:"literal",value:"'overflowCount'"},{name:"literal",value:"'showZero'"}]}],raw:"Pick<BadgeProps, 'title' | 'count' | 'text' | 'overflowCount' | 'showZero'>"}]},{name:"signature",type:"object",raw:"{\n  type: 'indicator',\n  mode: IndicatorNotificationMode\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'indicator'",required:!0}},{key:"mode",value:{name:"Extract",elements:[{name:"IndicatorModes[number]",raw:"typeof IndicatorModes[number]"},{name:"union",raw:"'new' | 'critical' | 'medium'",elements:[{name:"literal",value:"'new'"},{name:"literal",value:"'critical'"},{name:"literal",value:"'medium'"}]}],raw:"Extract<IndicatorMode, 'new' | 'critical' | 'medium'>",required:!0}}]}}],required:!1}},{key:"action",value:{name:"Pick",elements:[{name:"intersection",raw:"ActionButtonHTMLProps & ActionButtonCustomProps",elements:[{name:"ReactButtonHTMLAttributes",raw:"React.ButtonHTMLAttributes<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},{name:"intersection",raw:'{\n  /** Icon component instead of default "cross" icon */\n  icon?: React.ReactNode,\n  /** Without icon */\n  noIcon?: boolean,\n  /** If interactive */\n  interactive?: boolean\n} & ActionButtonThemeProps & TestingProps',elements:[{name:"signature",type:"object",raw:'{\n  /** Icon component instead of default "cross" icon */\n  icon?: React.ReactNode,\n  /** Without icon */\n  noIcon?: boolean,\n  /** If interactive */\n  interactive?: boolean\n}',signature:{properties:[{key:"icon",value:{name:"ReactReactNode",raw:"React.ReactNode",required:!1},description:'Icon component instead of default "cross" icon'},{key:"noIcon",value:{name:"boolean",required:!1},description:"Without icon"},{key:"interactive",value:{name:"boolean",required:!1},description:"If interactive"}]}},{name:"signature",type:"object",raw:"{\n  /** Custom theme */\n  theme?: Theme,\n  /** Size */\n  size?: ActionButtonSize,\n  /** Color mode */\n  mode?: ActionButtonMode\n}",signature:{properties:[{key:"theme",value:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}],required:!1},description:"Custom theme"},{key:"size",value:{name:"union",raw:"'large' | 'medium' | 'small'",elements:[{name:"literal",value:"'large'"},{name:"literal",value:"'medium'"},{name:"literal",value:"'small'"}],required:!1},description:"Size"},{key:"mode",value:{name:"union",raw:"'ghost' | 'ghostInverted' | 'filled' | 'filledInverted' | 'onLight'",elements:[{name:"literal",value:"'ghost'"},{name:"literal",value:"'ghostInverted'"},{name:"literal",value:"'filled'"},{name:"literal",value:"'filledInverted'"},{name:"literal",value:"'onLight'"}],required:!1},description:"Color mode"}]}},{name:"signature",type:"object",raw:"{\n  /** Actual identifier for autotesting, whill be passed to HTML attribute data-testid */\n  testId?: string,\n  /** @deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id */\n  klId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  componentId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  dataTestId?: string,\n  componentType?: string\n}",signature:{properties:[{key:"testId",value:{name:"string",required:!1},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},{key:"klId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},{key:"componentId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"dataTestId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"componentType",value:{name:"string",required:!1}}]}}]}]},{name:"union",raw:"'onClick' | 'icon'",elements:[{name:"literal",value:"'onClick'"},{name:"literal",value:"'icon'"}]}],raw:"Pick<ActionButtonProps, 'onClick' | 'icon'>",required:!1}},{key:"children",value:{name:"Array",elements:[{name:"RowProps"}],raw:"RowProps[]",required:!1}}]}},{name:"signature",type:"object",raw:"{\n  level?: number,\n  opened?: boolean,\n  extraLeftPadding?: number,\n  children?: LeveledRowProps[]\n}",signature:{properties:[{key:"level",value:{name:"number",required:!1}},{key:"opened",value:{name:"boolean",required:!1}},{key:"extraLeftPadding",value:{name:"number",required:!1}},{key:"children",value:{name:"Array",elements:[{name:"LeveledRowProps"}],raw:"LeveledRowProps[]",required:!1}}]}}]}]}],raw:"LeveledSubmenuItemProps[]"},description:""}}};var useThemedComponent=__webpack_require__("./helpers/useThemedComponent.tsx");function Submenu_extends(){return Submenu_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},Submenu_extends.apply(null,arguments)}const StyledSubmenu=styled_components_browser_esm.Ay.div.withConfig({shouldForwardProp:prop=>!["cssConfig"].includes(prop)}).withConfig({displayName:"Submenu__StyledSubmenu",componentId:"sc-1hljtbv-0"})(["",""],submenuCss),Submenu=rawProps=>{const themedProps=(props=>(0,useThemedComponent.K)(props,{componentName:"submenu",defaultValues:{}}))(rawProps),props=(0,useTestAttribute.a)(themedProps);return react.createElement(SubmenuView,props)},SubmenuView=({items,elementBefore,elementAfter,truncateText=!0,collapseOnTextClick=!0,testAttributes,cssConfig,activeKey,onChange,...rest})=>{const pathToActiveRow=(0,react.useMemo)((()=>findPathToActiveRow(items,activeKey)),[items,activeKey]),itemsWithLevels=(0,react.useMemo)((()=>addLevelsToRows(items,null==pathToActiveRow?void 0:pathToActiveRow.map((item=>item.key)).slice(0,-1))),[pathToActiveRow]),[activeRow,setActiveRow]=(0,react.useState)(pathToActiveRow?pathToActiveRow[pathToActiveRow.length-1]:findFirstRow(itemsWithLevels));return react.createElement(SubmenuWrapper,null,react.createElement(StyledSubmenu,Submenu_extends({cssConfig},rest,testAttributes),elementBefore&&react.createElement(SubmenuElementWrapper,null,elementBefore),react.createElement(SubmenuItemsStack,null,react.createElement(SubmenuItems,{handleActiveRowChange:row=>{setActiveRow(row),null==onChange||onChange(row.key)},cssConfig,truncateText,collapseOnTextClick,items:itemsWithLevels,activeRowKey:null==activeRow?void 0:activeRow.key})),elementAfter&&react.createElement(SubmenuElementWrapper,{fixToBottom:!0},elementAfter)),react.createElement(SubmenuContent,{className:null==activeRow?void 0:activeRow.contentClassName},null==activeRow?void 0:activeRow.content))},findFirstRow=items=>items.find((item=>"row"===item.type)),findPathToActiveRow=(items,activeKey)=>{for(const item of items)if("row"===item.type){if(item.key===activeKey)return[item];if(null!=item&&item.children){const path=findPathToActiveRow(item.children,activeKey);if(path)return[item,...path]}}},addLevelsToRows=(items,openedRowsKeys=[],level=0)=>{const hasChildrenAtLevel=items.some((item=>"row"===item.type&&item.children));return items.map((item=>"row"===item.type?{...item,level,opened:openedRowsKeys.includes(item.key),extraLeftPadding:!item.children&&hasChildrenAtLevel?20:0,children:item.children&&addLevelsToRows(item.children,openedRowsKeys,level+1)}:item))};Submenu.__docgenInfo={description:"",methods:[],displayName:"Submenu",props:{theme:{required:!1,tsType:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:"Custom theme"},testId:{required:!1,tsType:{name:"string"},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},klId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},componentId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},dataTestId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},componentType:{required:!1,tsType:{name:"string"},description:""},items:{required:!0,tsType:{name:"Array",elements:[{name:"union",raw:"DividerProps | TitleProps | RowProps",elements:[{name:"signature",type:"object",raw:"{\n  type: 'divider'\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'divider'",required:!0}}]}},{name:"signature",type:"object",raw:"{\n  type: 'title',\n  key: string,\n  text: string,\n  action?: ActionProps\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'title'",required:!0}},{key:"key",value:{name:"string",required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"action",value:{name:"Pick",elements:[{name:"intersection",raw:"ActionButtonHTMLProps & ActionButtonCustomProps",elements:[{name:"ReactButtonHTMLAttributes",raw:"React.ButtonHTMLAttributes<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},{name:"intersection",raw:'{\n  /** Icon component instead of default "cross" icon */\n  icon?: React.ReactNode,\n  /** Without icon */\n  noIcon?: boolean,\n  /** If interactive */\n  interactive?: boolean\n} & ActionButtonThemeProps & TestingProps',elements:[{name:"signature",type:"object",raw:'{\n  /** Icon component instead of default "cross" icon */\n  icon?: React.ReactNode,\n  /** Without icon */\n  noIcon?: boolean,\n  /** If interactive */\n  interactive?: boolean\n}',signature:{properties:[{key:"icon",value:{name:"ReactReactNode",raw:"React.ReactNode",required:!1},description:'Icon component instead of default "cross" icon'},{key:"noIcon",value:{name:"boolean",required:!1},description:"Without icon"},{key:"interactive",value:{name:"boolean",required:!1},description:"If interactive"}]}},{name:"signature",type:"object",raw:"{\n  /** Custom theme */\n  theme?: Theme,\n  /** Size */\n  size?: ActionButtonSize,\n  /** Color mode */\n  mode?: ActionButtonMode\n}",signature:{properties:[{key:"theme",value:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}],required:!1},description:"Custom theme"},{key:"size",value:{name:"union",raw:"'large' | 'medium' | 'small'",elements:[{name:"literal",value:"'large'"},{name:"literal",value:"'medium'"},{name:"literal",value:"'small'"}],required:!1},description:"Size"},{key:"mode",value:{name:"union",raw:"'ghost' | 'ghostInverted' | 'filled' | 'filledInverted' | 'onLight'",elements:[{name:"literal",value:"'ghost'"},{name:"literal",value:"'ghostInverted'"},{name:"literal",value:"'filled'"},{name:"literal",value:"'filledInverted'"},{name:"literal",value:"'onLight'"}],required:!1},description:"Color mode"}]}},{name:"signature",type:"object",raw:"{\n  /** Actual identifier for autotesting, whill be passed to HTML attribute data-testid */\n  testId?: string,\n  /** @deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id */\n  klId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  componentId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  dataTestId?: string,\n  componentType?: string\n}",signature:{properties:[{key:"testId",value:{name:"string",required:!1},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},{key:"klId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},{key:"componentId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"dataTestId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"componentType",value:{name:"string",required:!1}}]}}]}]},{name:"union",raw:"'onClick' | 'icon'",elements:[{name:"literal",value:"'onClick'"},{name:"literal",value:"'icon'"}]}],raw:"Pick<ActionButtonProps, 'onClick' | 'icon'>",required:!1}}]}},{name:"signature",type:"object",raw:"{\n  type: 'row',\n  key: string,\n  text: string,\n  content: ReactNode,\n  contentClassName?: string,\n  disabled?: boolean,\n  draggable?: boolean,\n  iconBefore?: ReactNode,\n  elementAfter?: ReactNode,\n  notification?: BadgeNotification | IndicatorNotification,\n  action?: ActionProps,\n  children?: RowProps[]\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'row'",required:!0}},{key:"key",value:{name:"string",required:!0}},{key:"text",value:{name:"string",required:!0}},{key:"content",value:{name:"ReactNode",required:!0}},{key:"contentClassName",value:{name:"string",required:!1}},{key:"disabled",value:{name:"boolean",required:!1}},{key:"draggable",value:{name:"boolean",required:!1}},{key:"iconBefore",value:{name:"ReactNode",required:!1}},{key:"elementAfter",value:{name:"ReactNode",required:!1}},{key:"notification",value:{name:"union",raw:"BadgeNotification | IndicatorNotification",elements:[{name:"intersection",raw:"{\n  type: 'badge',\n  mode: BadgeNotificationMode\n} & Pick<BadgeProps, 'title' | 'count' | 'text' | 'overflowCount' | 'showZero'>",elements:[{name:"signature",type:"object",raw:"{\n  type: 'badge',\n  mode: BadgeNotificationMode\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'badge'",required:!0}},{key:"mode",value:{name:"Extract",elements:[{name:"union",raw:"BadgeMediumMode | BadgeLargeMode",elements:[{name:"badgeModes[number]",raw:"typeof badgeModes[number]"},{name:"badgeTransparentModes[number]",raw:"typeof badgeTransparentModes[number]"}]},{name:"union",raw:"'new' | 'critical'",elements:[{name:"literal",value:"'new'"},{name:"literal",value:"'critical'"}]}],raw:"Extract<BadgeMode, 'new' | 'critical'>",required:!0}}]}},{name:"Pick",elements:[{name:"intersection",raw:"{\n  /** CSS Class name */\n  className?: string,\n  /** Displayed number */\n  count?: number,\n  /** Displayed text (instead of count) */\n  text?: string,\n  /** Max count to show */\n  overflowCount?: number,\n  /** @deprecated Text to show when hovering over the badge */\n  title?: string,\n  /** Whether to show badge when count is zero */\n  showZero?: boolean\n} & BadgeThemeProps & TestingProps",elements:[{name:"signature",type:"object",raw:"{\n  /** CSS Class name */\n  className?: string,\n  /** Displayed number */\n  count?: number,\n  /** Displayed text (instead of count) */\n  text?: string,\n  /** Max count to show */\n  overflowCount?: number,\n  /** @deprecated Text to show when hovering over the badge */\n  title?: string,\n  /** Whether to show badge when count is zero */\n  showZero?: boolean\n}",signature:{properties:[{key:"className",value:{name:"string",required:!1},description:"CSS Class name"},{key:"count",value:{name:"number",required:!1},description:"Displayed number"},{key:"text",value:{name:"string",required:!1},description:"Displayed text (instead of count)"},{key:"overflowCount",value:{name:"number",required:!1},description:"Max count to show"},{key:"title",value:{name:"string",required:!1},description:"@deprecated Text to show when hovering over the badge"},{key:"showZero",value:{name:"boolean",required:!1},description:"Whether to show badge when count is zero"}]}},{name:"intersection",raw:"(BadgeLargeConfig | BadgeMediumConfig) & {\n  /** Custom theme */\n  theme?: Theme\n}",elements:[{name:"unknown"},{name:"signature",type:"object",raw:"{\n  /** Custom theme */\n  theme?: Theme\n}",signature:{properties:[{key:"theme",value:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}],required:!1},description:"Custom theme"}]}}]},{name:"signature",type:"object",raw:"{\n  /** Actual identifier for autotesting, whill be passed to HTML attribute data-testid */\n  testId?: string,\n  /** @deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id */\n  klId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  componentId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  dataTestId?: string,\n  componentType?: string\n}",signature:{properties:[{key:"testId",value:{name:"string",required:!1},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},{key:"klId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},{key:"componentId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"dataTestId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"componentType",value:{name:"string",required:!1}}]}}]},{name:"union",raw:"'title' | 'count' | 'text' | 'overflowCount' | 'showZero'",elements:[{name:"literal",value:"'title'"},{name:"literal",value:"'count'"},{name:"literal",value:"'text'"},{name:"literal",value:"'overflowCount'"},{name:"literal",value:"'showZero'"}]}],raw:"Pick<BadgeProps, 'title' | 'count' | 'text' | 'overflowCount' | 'showZero'>"}]},{name:"signature",type:"object",raw:"{\n  type: 'indicator',\n  mode: IndicatorNotificationMode\n}",signature:{properties:[{key:"type",value:{name:"literal",value:"'indicator'",required:!0}},{key:"mode",value:{name:"Extract",elements:[{name:"IndicatorModes[number]",raw:"typeof IndicatorModes[number]"},{name:"union",raw:"'new' | 'critical' | 'medium'",elements:[{name:"literal",value:"'new'"},{name:"literal",value:"'critical'"},{name:"literal",value:"'medium'"}]}],raw:"Extract<IndicatorMode, 'new' | 'critical' | 'medium'>",required:!0}}]}}],required:!1}},{key:"action",value:{name:"Pick",elements:[{name:"intersection",raw:"ActionButtonHTMLProps & ActionButtonCustomProps",elements:[{name:"ReactButtonHTMLAttributes",raw:"React.ButtonHTMLAttributes<HTMLButtonElement>",elements:[{name:"HTMLButtonElement"}]},{name:"intersection",raw:'{\n  /** Icon component instead of default "cross" icon */\n  icon?: React.ReactNode,\n  /** Without icon */\n  noIcon?: boolean,\n  /** If interactive */\n  interactive?: boolean\n} & ActionButtonThemeProps & TestingProps',elements:[{name:"signature",type:"object",raw:'{\n  /** Icon component instead of default "cross" icon */\n  icon?: React.ReactNode,\n  /** Without icon */\n  noIcon?: boolean,\n  /** If interactive */\n  interactive?: boolean\n}',signature:{properties:[{key:"icon",value:{name:"ReactReactNode",raw:"React.ReactNode",required:!1},description:'Icon component instead of default "cross" icon'},{key:"noIcon",value:{name:"boolean",required:!1},description:"Without icon"},{key:"interactive",value:{name:"boolean",required:!1},description:"If interactive"}]}},{name:"signature",type:"object",raw:"{\n  /** Custom theme */\n  theme?: Theme,\n  /** Size */\n  size?: ActionButtonSize,\n  /** Color mode */\n  mode?: ActionButtonMode\n}",signature:{properties:[{key:"theme",value:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}],required:!1},description:"Custom theme"},{key:"size",value:{name:"union",raw:"'large' | 'medium' | 'small'",elements:[{name:"literal",value:"'large'"},{name:"literal",value:"'medium'"},{name:"literal",value:"'small'"}],required:!1},description:"Size"},{key:"mode",value:{name:"union",raw:"'ghost' | 'ghostInverted' | 'filled' | 'filledInverted' | 'onLight'",elements:[{name:"literal",value:"'ghost'"},{name:"literal",value:"'ghostInverted'"},{name:"literal",value:"'filled'"},{name:"literal",value:"'filledInverted'"},{name:"literal",value:"'onLight'"}],required:!1},description:"Color mode"}]}},{name:"signature",type:"object",raw:"{\n  /** Actual identifier for autotesting, whill be passed to HTML attribute data-testid */\n  testId?: string,\n  /** @deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id */\n  klId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  componentId?: string,\n  /** @deprecated Use 'testId' prop instead */\n  dataTestId?: string,\n  componentType?: string\n}",signature:{properties:[{key:"testId",value:{name:"string",required:!1},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},{key:"klId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},{key:"componentId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"dataTestId",value:{name:"string",required:!1},description:"@deprecated Use 'testId' prop instead"},{key:"componentType",value:{name:"string",required:!1}}]}}]}]},{name:"union",raw:"'onClick' | 'icon'",elements:[{name:"literal",value:"'onClick'"},{name:"literal",value:"'icon'"}]}],raw:"Pick<ActionButtonProps, 'onClick' | 'icon'>",required:!1}},{key:"children",value:{name:"Array",elements:[{name:"RowProps"}],raw:"RowProps[]",required:!1}}]}}]}],raw:"SubmenuItemProps[]"},description:"Array of submenu items"},activeKey:{required:!1,tsType:{name:"string"},description:"Current submenu item key"},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(activeKey: string) => void",signature:{arguments:[{type:{name:"string"},name:"activeKey"}],return:{name:"void"}}},description:"Callback executed when active submenu item is changed"},truncateText:{required:!1,tsType:{name:"boolean"},description:"Should truncate text if the text is too long"},collapseOnTextClick:{required:!1,tsType:{name:"boolean"},description:"Should collapse submenu item tree when clicking on its text"},elementBefore:{required:!1,tsType:{name:"ReactNode"},description:"Element before"},elementAfter:{required:!1,tsType:{name:"ReactNode"},description:"Element after"}}}},"./src/toggle/Toggle.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{l:()=>Toggle});var AdditionalContent=__webpack_require__("./helpers/components/AdditionalContent.tsx"),useTestAttribute=__webpack_require__("./helpers/hooks/useTestAttribute.ts"),FormLabel=__webpack_require__("./src/form-label/FormLabel.tsx"),es_switch=__webpack_require__("./node_modules/antd/es/switch/index.js"),react=__webpack_require__("./node_modules/react/index.js"),styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js");const fromProps=(0,__webpack_require__("./helpers/getFromProps.ts").P)(),toggleCss=(0,styled_components_browser_esm.AH)(["background-color:",";box-shadow:none;"," &:last-child{translate:none;}&:not(.ant-switch-small){height:20px;min-width:32px;& .ant-switch-handle{width:16px;height:16px;}& .ant-switch-loading-icon.anticon{top:2px;}}& .ant-switch-handle{&::before{box-shadow:none;background-color:",";}}&.ant-switch-checked{background-color:",";& .ant-switch-handle::before{box-shadow:none;background-color:",";}&:not(.ant-switch-small){& .ant-switch-handle{left:calc(100% - 16px - 2px);}}}& .ant-click-animating-node{display:none;}&:hover:not(:disabled),.ant-toggle-wrapper:hover &:not(:disabled){background-color:",";&.ant-switch-checked{background-color:",";}}&:hover:active,&:active,.ant-toggle-wrapper:active &,.ant-toggle-wrapper:hover:active &{&:not(:disabled){background-color:",";&.ant-switch-checked{background-color:",";.ant-switch-handle:before{left:0;}}.ant-switch-handle:before{right:0;}}}&:not(:disabled){&,&:hover,&:active{&:focus,&:focus-within{outline:none;box-shadow:none;}&:focus-visible{outline:none;box-shadow:",";}}}&.ant-switch-disabled,&:disabled{opacity:1;background-color:",";& .ant-switch-handle:before{background-color:",";box-shadow:none;}&.ant-switch-checked{background-color:",";& .ant-switch-handle:before{background-color:",";box-shadow:none;}}}&.ant-switch-disabled ~ .toggle-label span{color:",";}"," + .toggle-label{line-height:20px;}&:not(:disabled) + .toggle-label{cursor:pointer;user-select:none;}&:disabled + .toggle-label{cursor:not-allowed;user-select:none;}"],fromProps("enabled.bgOff"),(({labelPosition})=>{switch(labelPosition){case"before":return{order:100,margin:"0 0 0 4px;"};case"after":return{order:0,margin:"0 4px 0 0;"};default:return{order:0,margin:0}}}),fromProps("enabled.knob"),fromProps("enabled.bgOn"),fromProps("enabled.knob"),fromProps("hover.bgOff"),fromProps("hover.bgOn"),fromProps("active.bgOff"),fromProps("active.bgOn"),fromProps("focus.boxShadow"),fromProps("disabled.bgOff"),fromProps("disabled.knob"),fromProps("disabled.bgOn"),fromProps("disabled.knob"),fromProps("disabled.color"),(props=>props.readonly&&`\n  && {\n    background-color: ${fromProps("readonly.bgOff")(props)};\n    .ant-switch-handle::before {\n      background-color: ${fromProps("readonly.knob")(props)};\n    }\n\n    &, * {\n      cursor: default;\n    }\n  }\n  &&.ant-switch-checked {\n    background-color: ${fromProps("readonly.bgOn")(props)};\n    .ant-switch-handle::before {\n      background-color: ${fromProps("readonly.knob")(props)};\n    }\n  }\n\n  && ~ .toggle-label span {\n    color: ${fromProps("readonly.color")(props)};\n  }\n  `)),ToggleWrapper=styled_components_browser_esm.Ay.div.withConfig({displayName:"toggleCss__ToggleWrapper",componentId:"sc-eb1e36-0"})(["display:flex;flex-direction:row;align-items:flex-start;"]);var useThemedComponent=__webpack_require__("./helpers/useThemedComponent.tsx");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const StyledToggle=(0,styled_components_browser_esm.Ay)(es_switch.A).withConfig({shouldForwardProp:prop=>!["cssConfig","readonly","labelPosition"].includes(prop)}).withConfig({displayName:"Toggle__StyledToggle",componentId:"sc-gi8766-0"})(["",""],toggleCss),Toggle=rawProps=>{const themedProps=(props=>(0,useThemedComponent.K)(props,{componentName:"toggle",defaultValues:{}}))(rawProps),props=(0,useTestAttribute.a)(themedProps);return react.createElement(ToggleView,props)},ToggleView=({onChange,checked,children,disabled,readonly,cssConfig,labelPosition="after",required,tooltip,testAttributes,description,dependentElement,...rest})=>{const[isChecked,setChecked]=(0,react.useState)(!!checked);(0,react.useEffect)((()=>{void 0!==checked&&isChecked!==checked&&setChecked(!!checked)}),[checked]);const toggleValue=(check,e)=>{null==onChange||onChange(check,e),void 0===checked&&setChecked(check)};return react.createElement("div",{className:"ant-toggle-wrapper",role:"toggle"},react.createElement(ToggleWrapper,null,react.createElement(StyledToggle,_extends({onChange:toggleValue,checked:isChecked,cssConfig,disabled:disabled||readonly,readonly,labelPosition:children?labelPosition:void 0},testAttributes,rest)),"string"==typeof children?react.createElement(FormLabel.l,{onClick:()=>!disabled&&!readonly&&toggleValue(!isChecked,new MouseEvent("click")),className:"toggle-label",disabled,required,tooltip},children):react.Children.map(children,(child=>(0,react.isValidElement)(child)?(0,react.cloneElement)(child,{onClick:()=>!disabled&&toggleValue(!isChecked,new MouseEvent("click"))}):child))),react.createElement(AdditionalContent.P,{description,dependentElement,_margin:36}))};Toggle.__docgenInfo={description:"",methods:[],displayName:"Toggle",props:{description:{required:!1,tsType:{name:"string"},description:""},dependentElement:{required:!1,tsType:{name:"ReactNode"},description:""},theme:{required:!1,tsType:{name:"union",raw:"'light' | 'dark'",elements:[{name:"literal",value:"'light'"},{name:"literal",value:"'dark'"}]},description:"Custom theme"},testId:{required:!1,tsType:{name:"string"},description:"Actual identifier for autotesting, whill be passed to HTML attribute data-testid"},klId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead. Identifier for backward compatibility in autotesting, whill be passed to HTML attribute kl-id"},componentId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},dataTestId:{required:!1,tsType:{name:"string"},description:"@deprecated Use 'testId' prop instead"},componentType:{required:!1,tsType:{name:"string"},description:""}}}}}]);